题目难度：HARD

你有一大块巧克力，它由一些甜度不完全相同的小块组成。我们用数组 sweetness 来表示每一小块的甜度。

你打算和 K 名朋友一起分享这块巧克力，所以你需要将切割 K 次才能得到 K+1 块，每一块都由一些 连续 的小块组成。

为了表现出你的慷慨，你将会吃掉 总甜度最小 的一块，并将其余几块分给你的朋友们。

请找出一个最佳的切割策略，使得你所分得的巧克力 总甜度最大，并返回这个 最大总甜度。

 

示例 1：

输入：sweetness = [1,2,3,4,5,6,7,8,9], K = 5
输出：6
解释：你可以把巧克力分成 [1,2,3], [4,5], [6], [7], [8], [9]。
示例 2：

输入：sweetness = [5,6,7,8,9,1,2,3,4], K = 8
输出：1
解释：只有一种办法可以把巧克力分成 9 块。
示例 3：

输入：sweetness = [1,2,2,1,2,2,1,2,2], K = 2
输出：5
解释：你可以把巧克力分成 [1,2,2], [1,2,2], [1,2,2]。
 

提示：

0 <= K < sweetness.length <= 10^4
1 <= sweetness[i] <= 10^5

思路：枚举+二分+贪心求解
过程枚举出所有的甜度，分别取0和最大甜度作为边界，开始二分法
之后如果判断刀数符合条件就向右边二分，不符合就想左边二分
然后把二分后的甜度作为答案，贪心计算按顺序累加的甜度是否达到指定甜度，达到了刀数就加一
如果刀数达到K刀，就可以实现，然后对二分中所有的符合条件的甜度值取最大即可

上代码：
class Solution {
public:
    
    inline bool check(int swt, int len, vector<int>& arr){
        int cur = 0, sum = 0;
        for (auto x: arr){
            sum += x;
            if (sum >= swt){ ++cur; sum = 0; }
        }
        return cur >= len;
    }
    int maximizeSweetness(vector<int>& sweetness, int K) {
        int n = sweetness.size(); ++K;
        
        int left = 0, right = 1e9+50, ans = 0;
        while(left <= right){
            int mid = (left + right) / 2;
            if (check(mid, K, sweetness)){
                // printf("%d Yes\n", mid);
                left = mid + 1; 
                ans = max(ans, mid);
            }else{
                // printf("%d No\n", mid);
                right = mid - 1;
            }
        }
        
        return ans;
    }
};