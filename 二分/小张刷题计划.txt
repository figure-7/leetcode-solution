题目难度：MEDIUM

为了提高自己的代码能力，小张制定了 LeetCode 刷题计划，他选中了 LeetCode 题库中的 n 道题，编号从 0 到 n-1，并计划在 m 天内按照题目编号顺序刷完所有的题目（注意，小张不能用多天完成同一题）。

在小张刷题计划中，小张需要用 time[i] 的时间完成编号 i 的题目。

此外，小张还可以使用场外求助功能，通过询问他的好朋友小杨题目的解法，可以省去该题的做题时间。

为了防止“小张刷题计划”变成“小杨刷题计划”，小张每天最多使用一次求助。

我们定义 m 天中做题时间最多的一天耗时为 T（小杨完成的题目不计入做题总时间）。

请你帮小张求出最小的 T是多少。

示例 1：

输入：time = [1,2,3,3], m = 2

输出：3

解释：第一天小张完成前三题，其中第三题找小杨帮忙；
第二天完成第四题，并且找小杨帮忙。
这样做题时间最多的一天花费了 3 的时间，并且这个值是最小的。

示例 2：

输入：time = [999,999,999], m = 4

输出：0

解释：在前三天中，小张每天求助小杨一次，这样他可以在三天内完成所有的题目并不花任何时间。

 

限制：

1 <= time.length <= 10^5
1 <= time[i] <= 10000
1 <= m <= 1000

思路：二分
遍历上下界最小最大的二分范围，（可以套板子）
然后判断当前值时间小于给定值就可以缩短时间，否则不能缩短时间
计算当前算题最多个数时间，要额外加一道最长时间的题（给小杨做）
最后返回二分结果即可

上代码：
class Solution {
public:
    
    int check(vector<int>& t, int n, int lim){
        int ret = 1, sum = 0, mx = 0;
        for (int i = 0; i < n; i++){
            if (sum + t[i] - max(mx, t[i]) > lim){
                ret += 1;
                mx = sum = t[i];
            }else{
                sum += t[i];
                mx = max(mx, t[i]);
            }
        }
        return ret;
    }
    
    int minTime(vector<int>& time, int m) {
        int n = time.size();
        
        int left = 0, right = 1e9 + 50, ans = 1e9;
        while(left <= right){
            int mid = (left + right) / 2;
            if (check(time, n, mid) <= m){
                ans = min(ans, mid);
                right = mid - 1;
            }else left = mid + 1;
        }
        
        return ans;
    }
    
};