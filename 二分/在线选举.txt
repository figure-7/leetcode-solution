题目难度：MEDIUM

在选举中，第 i 张票是在时间为 times[i] 时投给 persons[i] 的。

现在，我们想要实现下面的查询函数：

 TopVotedCandidate.q(int t) 将返回在 t 时刻主导选举的候选人的编号。

在 t 时刻投出的选票也将被计入我们的查询之中。

在平局的情况下，最近获得投票的候选人将会获胜。

示例：

输入：["TopVotedCandidate","q","q","q","q","q","q"], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]
输出：[null,0,1,1,0,0,1]
解释：
时间为 3，票数分布情况是 [0]，编号为 0 的候选人领先。
时间为 12，票数分布情况是 [0,1,1]，编号为 1 的候选人领先。
时间为 25，票数分布情况是 [0,1,1,0,0,1]，编号为 1 的候选人领先（因为最近的投票结果是平局）。
在时间 15、24 和 8 处继续执行 3 个查询。
 

提示：

1 <= persons.length = times.length <= 5000
0 <= persons[i] <= persons.length
times 是严格递增的数组，所有元素都在 [0, 10^9] 范围中。
每个测试用例最多调用 10000 次 TopVotedCandidate.q。
TopVotedCandidate.q(int t) 被调用时总是满足 t >= times[0]。

思路：二分
接下来上题解区题解：
先预计算出全部时刻的胜利候选人存起来。
计算的时候只需要一个比persons长度大1的vector存储每个可能的候选人的选票数量。
因为每个时刻只会有一个候选人票数发生变化，所以可以记录一个历史最高票，然后每次进行比较，记录胜利者。
查找的时候，二分查找出<=t时刻的下标，然后直接取结果即可。
时间复杂度：n+logn。
空间复杂度：n

执行用时 :
532 ms
, 在所有 C++ 提交中击败了
25.00%
的用户
内存消耗 :
93 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间不咋地，空间完杀！）

上代码 ：
class TopVotedCandidate {
public:
    TopVotedCandidate(vector<int>& persons, vector<int>& times) 
        :times_(times)
    {
        int pl = persons.size();
        vector<int> votes(pl+1,0);
        int max_vote = 0, max_voteid = -1;
        for(int i = 0, l = times.size(); i < l; i++)
        {
            if(++votes[persons[i]] >= max_vote)
            {
                max_voteid = persons[i];
                max_vote = votes[max_voteid];
            }
            winner_.push_back(max_voteid);
        }
    }
    
    int q(int t) {
        int c = upper_bound(times_.begin(), times_.end(), t)-times_.begin();
        c = c - 1;
        return winner_[c];
    }
private:
    vector<int>& times_;
    vector<int> winner_;
};

/**
 * Your TopVotedCandidate object will be instantiated and called as such:
 * TopVotedCandidate* obj = new TopVotedCandidate(persons, times);
 * int param_1 = obj->q(t);
 */