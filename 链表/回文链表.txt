题目难度：EASY

请判断一个链表是否为回文链表。

示例 1:

输入: 1->2
输出: false
示例 2:

输入: 1->2->2->1
输出: true
进阶：
你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？

思路：考虑进阶的方法，没做出来，下面上别人的思路（反转链表不明白再看数据结构书后例题），SildingWindow实现
其一，find mid node 使用快慢指针找到链表中点。 
其二，reverse 逆序后半部分。 
其三，check 从头、中点，开始比较是否相同。

执行用时 :
24 ms
, 在所有 cpp 提交中击败了
71.96%
的用户
内存消耗 :
12.7 MB
, 在所有 cpp 提交中击败了
50.28%
的用户

上代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {//O(n)、O(1)
        ListNode* slow = head, *fast = head,  *prev = nullptr;
        while (fast){//find mid node
            slow = slow->next;
            fast = fast->next ? fast->next->next: fast->next;
        }
        while (slow){//reverse
            ListNode* ovn = slow->next;
            slow->next = prev;
            prev = slow;
            slow = ovn;
        }
        while (head && prev){//check
            if (head->val != prev->val){
                return false;
            }
            head = head->next;
            prev = prev->next;
        }
        return true;
    }
};