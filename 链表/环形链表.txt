题目难度：EASY

给定一个链表，判断链表中是否有环。

为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。

 

示例 1：

输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。


示例 2：

输入：head = [1,2], pos = 0
输出：true
解释：链表中有一个环，其尾部连接到第一个节点。


示例 3：

输入：head = [1], pos = -1
输出：false
解释：链表中没有环。


 

进阶：

你能用 O(1)（即，常量）内存解决此问题吗？

思路：这题是个坑，输入pos但是不用，服了！看了题解才知道
然后自己写的，只要遍历就能实现原地进行运算，长度如果很大就代表有环
有环就返回true，没环就返回false即可

执行用时 :
32 ms
, 在所有 cpp 提交中击败了
7.94%
的用户
内存消耗 :
9.6 MB
, 在所有 cpp 提交中击败了
79.89%
的用户
（时间不出意外的低，空间不错）

上代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
#define INF 999999
class Solution {
public:
    bool flag = false;
    int len = 0;
    
    bool hasCycle(ListNode *head) {
        while(head != nullptr) {
            if(len == INF) {
                flag = true;
                break;
            }
            len++;
            head = head->next;
        }
        return flag;
    }
};