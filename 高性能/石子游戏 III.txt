题目难度：HARD

Alice 和 Bob 用几堆石子在做游戏。

几堆石子排成一行，每堆石子都对应一个得分，由数组 stoneValue 给出。

Alice 和 Bob 轮流取石子，Alice 总是先开始。

在每个玩家的回合中，该玩家可以拿走剩下石子中的的前 1、2 或 3 堆石子 。

比赛一直持续到所有石头都被拿走。

每个玩家的最终得分为他所拿到的每堆石子的对应得分之和。

每个玩家的初始分数都是 0 。

比赛的目标是决出最高分，得分最高的选手将会赢得比赛，比赛也可能会出现平局。

假设 Alice 和 Bob 都采取 最优策略 。

如果 Alice 赢了就返回 "Alice" ，Bob 赢了就返回 "Bob"，平局（分数相同）返回 "Tie" 。

 

示例 1：

输入：values = [1,2,3,7]
输出："Bob"
解释：Alice 总是会输，她的最佳选择是拿走前三堆，得分变成 6 。
但是 Bob 的得分为 7，Bob 获胜。
示例 2：

输入：values = [1,2,3,-9]
输出："Alice"
解释：Alice 要想获胜就必须在第一个回合拿走前三堆石子，给 Bob 留下负分。
如果 Alice 只拿走第一堆，那么她的得分为 1，接下来 Bob 拿走第二、三堆，得分为 5 。
之后 Alice 只能拿到分数 -9 的石子堆，输掉比赛。
如果 Alice 拿走前两堆，那么她的得分为 3，接下来 Bob 拿走第三堆，得分为 3 。
之后 Alice 只能拿到分数 -9 的石子堆，同样会输掉比赛。
注意，他们都应该采取 最优策略 ，所以在这里 Alice 将选择能够使她获胜的方案。
示例 3：

输入：values = [1,2,3,6]
输出："Tie"
解释：Alice 无法赢得比赛。
如果她决定选择前三堆，她可以以平局结束比赛，否则她就会输。
示例 4：

输入：values = [1,2,3,-1,-2,-3,7]
输出："Alice"
示例 5：

输入：values = [-1,-2,-3]
输出："Tie"
 

提示：

1 <= values.length <= 50000
-1000 <= values[i] <= 1000

思路：DP+DFS
DP[i][k]取到i堆石子，第K个人取，值为Alice-Bob的值
初始化：dp[i][k] = 0, vis[i][k] = false;（没有被计划过）
DP表达式：dp[x][turn] = max(dp[x][turn], cur + dfs(i + 1, n, turn ^ 1));dp[x][turn] = min(dp[x][turn], dfs(i + 1, n, turn ^ 1) - cur);dp[x][turn] = dfs(x + 1, n, turn ^ 1) - cur;dp[x][turn] = cur + dfs(x + 1, n, turn ^ 1);
记忆化搜索计算出所有状态然后取最优
Alice取时，先算取第一堆的值加DFS，然后取第二堆的值加DFS，再取三堆的值加DFS
Bob同理

上代码：
const int MAXN = 50000+ 50;

bool vis[MAXN][2]; 
int dp[MAXN][2]; // Alice - Bob
vector<int> num;

int dfs(int x, int n, int turn){
    if (vis[x][turn]) return dp[x][turn];
    if (x >= n) return 0;
    
    vis[x][turn] = true;
    
    if (turn == 0){
        int cur = num[x];
        dp[x][turn] = cur + dfs(x + 1, n, turn ^ 1);
        for (int i = x + 1; i < n && i < x + 3; i++){
            cur += num[i];
            dp[x][turn] = max(dp[x][turn], cur + dfs(i + 1, n, turn ^ 1));
        }
    }else{
        int cur = num[x];
        dp[x][turn] = dfs(x + 1, n, turn ^ 1) - cur;
        for (int i = x + 1; i < n && i < x + 3; i++){
            cur += num[i];
            dp[x][turn] = min(dp[x][turn], dfs(i + 1, n, turn ^ 1) - cur);
        }
    }
    
    return dp[x][turn];
}

class Solution {
public:   
    string stoneGameIII(vector<int>& stoneValue) {
        int n = stoneValue.size();
        
        for (int i = 0; i <= n; i++) 
            for (int k = 0; k < 2; k++) 
                dp[i][k] = 0, vis[i][k] = false;
        num = stoneValue;
        
        int ans = dfs(0, n, 0);
        
        if (ans > 0) return "Alice";
        if (ans < 0) return "Bob";
        return "Tie";
    }
};