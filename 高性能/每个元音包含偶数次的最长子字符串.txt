题目难度：MEDIUM

给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：

每个元音字母，即 'a'，'e'，'i'，'o'，'u' ，在子字符串中都恰好出现了偶数次。

 

示例 1：

输入：s = "eleetminicoworoep"
输出：13
解释：最长子字符串是 "leetminicowor" ，它包含 e，i，o 各 2 个，以及 0 个 a，u 。
示例 2：

输入：s = "leetcodeisgreat"
输出：5
解释：最长子字符串是 "leetc" ，其中包含 2 个 e 。
示例 3：

输入：s = "bcbcbc"
输出：6
解释：这个示例中，字符串 "bcbcbc" 本身就是最长的，因为所有的元音 a，e，i，o，u 都出现了 0 次。
 

提示：

1 <= s.length <= 5 x 10^5
s 只包含小写英文字母。

思路：双周赛第二题，进制+前缀和
先把每段的元音字母个数情况设立32种（空间）的数组（奇偶判断）
再建立一个5空间数组记录开头到当前字母出现多少次
遍历字符串记录每种字符的出现次数入数组，然后遍历5次（5 个字母）
算出5个字母对32种状态之一的值（转换为2进制叠加再转换为10进制）
然后当出现之前相同的状态时就更新开始值，否则取当前下标与开始值的差值与结果（初值0）最大值
最后返回结果值即可

上代码：
class Solution {
public:
    int c2i(char c){
        if (c == 'a') return 0;
        if (c == 'e') return 1;
        if (c == 'i') return 2;
        if (c == 'o') return 3;
        if (c == 'u') return 4;
        return -1;
    }
    int findTheLongestSubstring(string s) {
        int begin[32], n = s.length(), ans = 0;
        int cnt[5];
        
        for (int i = 0; i < 32; i++) begin[i] = n;
        memset(cnt, 0, sizeof(cnt));
        begin[0] = -1;
        
        for (int i = 0; i < n; i++){
            if (c2i(s[i]) != -1) ++cnt[c2i(s[i])];
            int s = 0;
            for (int k = 0; k < 5; k++) s += (1<<k) * (cnt[k] & 1);
            if (begin[s] == n) begin[s] = i;
            ans = max(ans, i - begin[s]);
        }
        
        return ans;
    }
    
};