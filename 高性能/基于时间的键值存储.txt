题目难度：MEDIUM

创建一个基于时间的键值存储类 TimeMap，它支持下面两个操作：

1. set(string key, string value, int timestamp)

存储键 key、值 value，以及给定的时间戳 timestamp。
2. get(string key, int timestamp)

返回先前调用 set(key, value, timestamp_prev) 所存储的值，其中 timestamp_prev <= timestamp。
如果有多个这样的值，则返回对应最大的  timestamp_prev 的那个值。
如果没有值，则返回空字符串（""）。
 

示例 1：

输入：inputs = ["TimeMap","set","get","get","set","get","get"], inputs = [[],["foo","bar",1],["foo",1],["foo",3],["foo","bar2",4],["foo",4],["foo",5]]
输出：[null,null,"bar","bar",null,"bar2","bar2"]
解释：  
TimeMap kv;   
kv.set("foo", "bar", 1); // 存储键 "foo" 和值 "bar" 以及时间戳 timestamp = 1   
kv.get("foo", 1);  // 输出 "bar"   
kv.get("foo", 3); // 输出 "bar" 因为在时间戳 3 和时间戳 2 处没有对应 "foo" 的值，所以唯一的值位于时间戳 1 处（即 "bar"）   
kv.set("foo", "bar2", 4);   
kv.get("foo", 4); // 输出 "bar2"   
kv.get("foo", 5); // 输出 "bar2"   

示例 2：

输入：inputs = ["TimeMap","set","set","get","get","get","get","get"], inputs = [[],["love","high",10],["love","low",20],["love",5],["love",10],["love",15],["love",20],["love",25]]
输出：[null,null,null,"","high","high","low","low"]
 

提示：

所有的键/值字符串都是小写的。
所有的键/值字符串长度都在 [1, 100] 范围内。
所有 TimeMap.set 操作中的时间戳 timestamps 都是严格递增的。
1 <= timestamp <= 10^7
TimeMap.set 和 TimeMap.get 函数在每个测试用例中将（组合）调用总计 120000 次。

思路：设计问题+哈希表
接下来上题解区题解：
c++ hash map + tree map

执行用时 :
732 ms
, 在所有 C++ 提交中击败了
5.76%
的用户
内存消耗 :
146.3 MB
, 在所有 C++ 提交中击败了
9.09%
的用户
（时空都炸了...）

上代码：
class TimeMap {
public:
    /** Initialize your data structure here. */
    unordered_map<string, map<int, string>> m;
    TimeMap() {

    }
    
    void set(string key, string value, int timestamp) {
        m[key][timestamp] = value;
    }
    
    string get(string key, int timestamp) {
        // 查找 key
        if (m.find(key) == m.end()) { // 查找失败，返回 ""
            return "";
        }
        map<int, string>*t_s_m = &m[key]; // 关键：要使用引用，不使用引用频繁内存拷贝会导致超时
        // 查找时间戳
        if ((*t_s_m).find(timestamp) == (*t_s_m).end()) { // 查找失败
            if (((*t_s_m).begin())->first > timestamp) { // 避免迭代器越界，timestamp 比已有的最小值还小返回 ""
                return "";
            }
            (*t_s_m)[timestamp] = ""; // 零时插入，map 会根据 timestamp 排序。
            auto it = (*t_s_m).find(timestamp); it--; // 那么 it-- ，就是比当前插入的 timestamp 小的值
            string result = (*it).second;
            (*t_s_m).erase(timestamp); // 删除零时插入值。
            return result;
        }
        else { // 查找成功
            return (*t_s_m)[timestamp];
        }
    }
};

/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap* obj = new TimeMap();
 * obj->set(key,value,timestamp);
 * string param_2 = obj->get(key,timestamp);
 */