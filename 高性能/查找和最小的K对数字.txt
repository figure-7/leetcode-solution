题目难度：MEIDUM

给定两个以升序排列的整数数组 nums1 和 nums2 , 以及一个整数 k 。
定义一对值 (u,v)，其中第一个元素来自 nums1，第二个元素来自 nums2 。
请找到和最小的 k 个数对 (u1,v1),  (u2,v2)  ...  (uk,vk) 。
示例 1:
输入: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
输出: [1,2],[1,4],[1,6]
解释: 返回序列中的前 3 对数：
     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
示例 2:
输入: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
输出: [1,1],[1,1]
解释: 返回序列中的前 2 对数：
     [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
示例 3:
输入: nums1 = [1,2], nums2 = [3], k = 3 
输出: [1,3],[2,3]
解释: 也可能序列中所有的数对都被返回:[1,3],[2,3]
提示:
1 <= nums1.length, nums2.length <= 104
-109 <= nums1[i], nums2[i] <= 109
nums1, nums2 均为升序排列
1 <= k <= 1000

思路：
接下来上题解区题解
对于已经按升序排列的两个数组 \textit{nums}_1,\textit{nums}_2nums 
1
 ,nums 
2
 ，长度分别为 \textit{length}_1,\textit{length}_2length 
1
 ,length 
2
 ，我们可以知道和最小的数对一定为 (\textit{nums}_1[0], \textit{nums}_2[0])(nums 
1
 [0],nums 
2
 [0])，和最大的数对一定为 (\textit{nums}_1[\textit{length}_1-1], \textit{nums}_2[\textit{length}_2-1])(nums 
1
 [length 
1
 −1],nums 
2
 [length 
2
 −1])。本题要求找到最小的 kk 个数对，最直接的办法是可以将所有的数对求出来，然后利用排序或者 \texttt{TopK}TopK 解法求出最小的 kk 个数对即可。
实际求解时可以不用求出所有的数对，只需从所有符合待选的数对中选出最小的即可，假设当前已选的前 nn 小数对的索引分别为 (a_1,b_1),(a_2,b_2),(a_3,b_3),\ldots,(a_n,b_n)(a 
1
 ,b 
1
 ),(a 
2
 ,b 
2
 ),(a 
3
 ,b 
3
 ),…,(a 
n
 ,b 
n
 )，由于两个数组都是按照升序进行排序的，则可以推出第 n+1n+1 小的数对的索引选择范围为 (a_1+1,b_1),(a_1,b_1+1),(a_2+1,b_2),(a_2,b_2+1),(a_3+1,b_3),(a_3,b_3+1),\ldots,(a_n+1,b_n),(a_n,b_n+1)(a 
1
 +1,b 
1
 ),(a 
1
 ,b 
1
 +1),(a 
2
 +1,b 
2
 ),(a 
2
 ,b 
2
 +1),(a 
3
 +1,b 
3
 ),(a 
3
 ,b 
3
 +1),…,(a 
n
 +1,b 
n
 ),(a 
n
 ,b 
n
 +1)，假设我们利用堆的特性可以求出待选范围中最小数对的索引为 (a_{i},b_{i})(a 
i
 ,b 
i
 )，同时将新的待选的数对 (a_{i}+1,b_{i}),(a_{i},b_{i}+1)(a 
i
 +1,b 
i
 ),(a 
i
 ,b 
i
 +1) 加入到堆中，直到我们选出 kk 个数对即可。
如果我们每次都将已选的数对 (a_{i},b_{i})(a 
i
 ,b 
i
 ) 的待选索引 (a_{i}+1,b_{i}),(a_{i},b_{i}+1)(a 
i
 +1,b 
i
 ),(a 
i
 ,b 
i
 +1) 加入到堆中则可能出现重复的问题，一般需要设置标记位解决去重的问题。
我们可以将 \textit{nums}_1nums 
1
  的前 kk 个索引数对 (0,0),(1,0),\ldots,(k-1,0)(0,0),(1,0),…,(k−1,0) 加入到队列中，每次从队列中取出元素 (x,y)(x,y) 时，我们只需要将 \textit{nums}_2nums 
2
  的索引增加即可，这样避免了重复加入元素的问题。

执行用时：
80 ms
, 在所有 C++ 提交中击败了
79.10%
的用户
内存消耗：
62.8 MB
, 在所有 C++ 提交中击败了
57.93%
的用户
（时间不错，空间一般）

上代码：
class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        auto cmp = [&nums1, &nums2](const pair<int, int> & a, const pair<int, int> & b) {
            return nums1[a.first] + nums2[a.second] > nums1[b.first] + nums2[b.second];
        };

        int m = nums1.size();
        int n = nums2.size();
        vector<vector<int>> ans;   
        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> pq(cmp);
        for (int i = 0; i < min(k, m); i++) {
            pq.emplace(i, 0);
        }
        while (k-- > 0 && !pq.empty()) {
            auto [x, y] = pq.top(); 
            pq.pop();
            ans.emplace_back(initializer_list<int>{nums1[x], nums2[y]});
            if (y + 1 < n) {
                pq.emplace(x, y + 1);
            }
        }

        return ans;
    }
};