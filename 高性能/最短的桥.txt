题目难度：MEDIUM

在给定的二维二进制数组 A 中，存在两座岛。

（岛是由四面相连的 1 形成的一个最大组。）

现在，我们可以将 0 变为 1，以使两座岛连接起来，变成一座岛。

返回必须翻转的 0 的最小数目。

（可以保证答案至少是 1。）

 

示例 1：

输入：[[0,1],[1,0]]
输出：1
示例 2：

输入：[[0,1,0],[0,0,0],[0,0,1]]
输出：2
示例 3：

输入：[[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
输出：1
 

提示：

1 <= A.length = A[0].length <= 100
A[i][j] == 0 或 A[i][j] == 1

思路：BFS+DFS
接下来上题解区题解：
无

执行用时 :
84 ms
, 在所有 C++ 提交中击败了
46.78%
的用户
内存消耗 :
15.7 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间一般，空间完杀！）

上代码：
class Solution {
public:
    const int INF = 1e8;
    int dirs[4][2] = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
    void paint(vector<vector<int> >& A, int r, int c, int mark) {
        A[r][c] = mark;
        int R = A.size();
        int C = A[0].size();
        for (int i = 0; i < 4; ++i) {
            int nr = r + dirs[i][0];
            int nc = c + dirs[i][1];
            if (nr >= 0 && nr < R && nc >= 0 && nc < C && A[nr][nc] == 1) {
                paint(A, nr, nc, mark);
            }
        }
    }
    int shortestBridge(vector<vector<int>>& A) {
        int R = A.size();
        int C = A[0].size();
        queue<pair<int, int> > q;
        bool has_painted = false;
        for (int i = 0; i < R; ++i) {
            for (int j = 0; j < C; ++j) {
                if (A[i][j] > 0 && !has_painted) {
                    paint(A, i, j, 2);
                    has_painted = true;
                }
                if (A[i][j] == 1) {
                    q.push({i, j});
                    A[i][j] = -1;
                }
            }
        }
        int step = 0;
        while (!q.empty()) {
            int s = q.size();
            for (int k = 0; k < s; ++k) {
                auto p = q.front();
                q.pop();
                int r = p.first;
                int c = p.second;
                for (int i = 0; i < 4; ++i) {
                    int nr = r + dirs[i][0];
                    int nc = c + dirs[i][1];
                    if (nr >= 0 && nr < R && nc >= 0 && nc < C) {
                        if (A[nr][nc] == 2) return step;
                        if (A[nr][nc] == 0) {
                            q.push({nr, nc});
                            A[nr][nc] = -1;
                        }
                    }
                }
            }
            ++step;
        }
        return step;
    }
};