题目难度：HARD

在一个 2 x 3 的板上（board）有 5 块砖瓦，用数字 1~5 来表示, 以及一块空缺用 0 来表示.
一次移动定义为选择 0 与一个相邻的数字（上下左右）进行交换.
最终当板 board 的结果是 [[1,2,3],[4,5,0]] 谜板被解开。
给出一个谜板的初始状态，返回最少可以通过多少次移动解开谜板，如果不能解开谜板，则返回 -1 。
示例：
输入：board = [[1,2,3],[4,0,5]]
输出：1
解释：交换 0 和 5 ，1 步完成
输入：board = [[1,2,3],[5,4,0]]
输出：-1
解释：没有办法完成谜板
输入：board = [[4,1,2],[5,0,3]]
输出：5
解释：
最少完成谜板的最少移动次数是 5 ，
一种移动路径:
尚未移动: [[4,1,2],[5,0,3]]
移动 1 次: [[4,1,2],[0,5,3]]
移动 2 次: [[0,1,2],[4,5,3]]
移动 3 次: [[1,0,2],[4,5,3]]
移动 4 次: [[1,2,0],[4,5,3]]
移动 5 次: [[1,2,3],[4,5,0]]
输入：board = [[3,2,4],[1,5,0]]
输出：14
提示：
board 是一个如上所述的 2 x 3 的数组.
board[i][j] 是一个 [0, 1, 2, 3, 4, 5] 的排列.

思路：BFS+队列+哈希表
接下来上官方题解：
我们可以使用广度优先搜索，找出从初始状态 \textit{board}board 到目标状态 [[1,2,3],[4,5,0]][[1,2,3],[4,5,0]] 的最小交换次数。
具体地，我们在一开始将 (\textit{board}, 0)(board,0) 加入队列，并使用该队列进行广度优先搜索。
在搜索的过程中，设当前搜索到的状态为 \textit{status}status，操作的次数为 \textit{step}step，我们可以枚举 \textit{status}status 通过一次操作得到的状态。
设其中的某个状态为 \textit{next\_status}next_status，如果其没有被搜索过，我们就将 (\textit{next\_status}, \textit{step} + 1)(next_status,step+1) 加入队列。
如果搜索到了 \textit{target}target，我们就返回其对应的操作次数。
在搜索的过程中，我们需要一个哈希表存储所有搜索到的状态，避免重复搜索。
如果搜索完成后，我们仍没有搜索到 [[1,2,3],[4,5,0]][[1,2,3],[4,5,0]]，说明我们无法解开谜板，返回 -1−1。
细节
本题中，搜索的状态 \textit{status}status 是一个 2\times 32×3 的二维数组，在很多语言中，我们无法将数组直接放入哈希表中，可行的解决方案有两种：
自行实现数组的哈希函数；
将数组转换成语言中可以直接进行哈希的类型。
在问题中，我们使用第二种解决方案，将 \textit{status}status 按照行优先的顺序拼接成一个长度为 2\times 3=62×3=6 的字符串。
例如目标状态 [[1,2,3],[4,5,0]][[1,2,3],[4,5,0]] 可以表示为 123450123450。
在确定了解决方案后，我们还需要考虑如何有效地找出 \textit{status}status 通过一次操作得到的所有状态。
根据题目中的规定，每一次操作可以将 \textit{status}status 中的 00 与相邻位置的数字进行交换，因此我们同样可以按照行优先的顺序给 2\times 32×3 的谜板进行编号：
这样一来，我们可以预处理出每一个位置的所有相邻位置，即：
00 的相邻位置是 1, 31,3；
11 的相邻位置是 0, 2, 40,2,4；
22 的相邻位置是 1, 51,5；
33 的相邻位置是 0, 40,4；
44 的相邻位置是 1, 3, 51,3,5；
55 的相邻位置是 2, 42,4。
因此，我们在 \textit{status}status 中找出 00 所在的位置 xx，对于每一个与 xx 相邻的位置 yy，我们将 \textit{status}[x]status[x] 与 \textit{status}[y]status[y] 进行交换，即等同于进行了一次操作。
注意：
这里的 \textit{status}status 是已经拼接完成的字符串。
最后我们还需要注意一个细节：如果 \textit{board}board 就是目标状态 [[1,2,3],[4,5,0]][[1,2,3],[4,5,0]]，那么直接返回答案 00。

执行用时：
8 ms
, 在所有 C++ 提交中击败了
85.13%
的用户
内存消耗：
9.9 MB
, 在所有 C++ 提交中击败了
27.78%
的用户
（时间不错，空间不咋地）

上代码：
class Solution {
private:
    vector<vector<int>> neighbors = {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};

public:
    int slidingPuzzle(vector<vector<int>>& board) {
        // 枚举 status 通过一次交换操作得到的状态
        auto get = [&](string& status) -> vector<string> {
            vector<string> ret;
            int x = status.find('0');
            for (int y: neighbors[x]) {
                swap(status[x], status[y]);
                ret.push_back(status);
                swap(status[x], status[y]);
            }
            return ret;
        };

        string initial;
        for (int i = 0; i < 2; ++i) {
            for (int j = 0; j < 3; ++j) {
                initial += char(board[i][j] + '0');
            }
        }
        if (initial == "123450") {
            return 0;
        }

        queue<pair<string, int>> q;
        q.emplace(initial, 0);
        unordered_set<string> seen = {initial};

        while (!q.empty()) {
            auto [status, step] = q.front();
            q.pop();
            for (auto&& next_status: get(status)) {
                if (!seen.count(next_status)) {
                    if (next_status == "123450") {
                        return step + 1;
                    }
                    q.emplace(next_status, step + 1);
                    seen.insert(move(next_status));
                }
            }
        }

        return -1;
    }
};