题目难度：HARD

你有一块棋盘，棋盘上有一些格子已经坏掉了。

你还有无穷块大小为1 * 2的多米诺骨牌，你想把这些骨牌不重叠地覆盖在完好的格子上，请找出你最多能在棋盘上放多少块骨牌？

这些骨牌可以横着或者竖着放。

 

输入：n, m代表棋盘的大小；broken是一个b * 2的二维数组，其中每个元素代表棋盘上每一个坏掉的格子的位置。

输出：一个整数，代表最多能在棋盘上放的骨牌数。

 

示例 1：

输入：n = 2, m = 3, broken = [[1, 0], [1, 1]]
输出：2
解释：我们最多可以放两块骨牌：[[0, 0], [0, 1]]以及[[0, 2], [1, 2]]。（见下图）


 

示例 2：

输入：n = 3, m = 3, broken = []
输出：4
解释：下图是其中一种可行的摆放方式


 

限制：

1 <= n <= 8
1 <= m <= 8
0 <= b <= n * m

思路：二分+图论
接下来上题解区题解：
本题也可以使用状态压缩 DP 求解。

首先，我们可以对棋盘进行黑白染色，使得任意相邻的两个格子颜色不相同。这意味着将格子看作是节点的话，整个棋盘就是一个二分图。

然后可以发现，一个多米诺骨牌，必然会覆盖到一对相邻的黑白格子。这可以看作是一个多米诺骨牌会占据二分图中的一条边。

发现了这个性质，就可以将整个问题转化为求这个二分图的最大匹配。具体的说，将格子视作点，在没有障碍的格子之间连一条边，然后求最大匹配即可。

这里使用匈牙利算法求解。由于边的数目正比于点的数目，时间复杂度为 O(n^2m^2)O(n 
2
 m 
2
 )。

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
68.42%
的用户
内存消耗 :
9.2 MB
, 在所有 C++ 提交中击败了
57.94%
的用户
（都还行）

上代码：
int mat[105][105], from[105], nn, mm;
bool vis[105];
bool unvisible[10][10];
int match(int x){
    for (int i = 0; i < nn * mm; ++i){
        int dx = i / mm, dy = i % mm;
        if ((dx + dy) & 1) continue;
        if (unvisible[dx][dy]) continue;
        if (!mat[x][i]) continue;
        if (!vis[i]){
            vis[i] = true;
            if (from[i] < 0 || match(from[i])){
                from[i] = x;
                return 1;
            }
        }
    }
    return 0;
}
int Hungary(){
    // 认为 (x 坐标 + y 坐标) 为奇数时格子是黑色，对黑色格子找匹配
    int match_size = 0;
    memset(from, -1, sizeof(from));
    for (int i = 0; i < nn * mm; ++i){
        int dx = i / mm, dy = i % mm;
        if (!((dx + dy) & 1)) continue;
        if (unvisible[dx][dy]) continue;
        memset(vis, 0, sizeof(vis));
        match_size += match(i);
    }
    return match_size;
}
class Solution {
public:
    int domino(int n, int m, vector<vector<int>>& broken) {
        nn = n, mm = m;
        memset(unvisible, 0, sizeof(unvisible));
        for (vector<int>& p: broken)
            unvisible[p[0]][p[1]] = true;
        memset(mat, 0, sizeof(mat));
        for (int i = 0; i < n; ++i){
            for (int j = 0; j < m; ++j){
                if (unvisible[i][j]) continue;
                int id = i * m + j;     // 将节点按照 (x 坐标 * m) + (y 坐标) 编号
                if (j + 1 < m && unvisible[i][j + 1] == false){
                    int iid = i * m + j + 1;
                    mat[id][iid] = mat[iid][id] = 1;
                }
                if (i + 1 < n && unvisible[i + 1][j] == false){
                    int iid = (i + 1) * m + j;
                    mat[id][iid] = mat[iid][id] = 1;
                }
            }
        }
        return Hungary();
    }
};