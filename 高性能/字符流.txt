题目难度：HARD

按下述要求实现 StreamChecker 类：

StreamChecker(words)：构造函数，用给定的字词初始化数据结构。
query(letter)：如果存在某些 k >= 1，可以用查询的最后 k个字符（按从旧到新顺序，包括刚刚查询的字母）拼写出给定字词表中的某一字词时，返回 true。
否则，返回 false。
 

示例：

StreamChecker streamChecker = new StreamChecker(["cd","f","kl"]); // 初始化字典
streamChecker.query('a');          // 返回 false
streamChecker.query('b');          // 返回 false
streamChecker.query('c');          // 返回 false
streamChecker.query('d');          // 返回 true，因为 'cd' 在字词表中
streamChecker.query('e');          // 返回 false
streamChecker.query('f');          // 返回 true，因为 'f' 在字词表中
streamChecker.query('g');          // 返回 false
streamChecker.query('h');          // 返回 false
streamChecker.query('i');          // 返回 false
streamChecker.query('j');          // 返回 false
streamChecker.query('k');          // 返回 false
streamChecker.query('l');          // 返回 true，因为 'kl' 在字词表中。
 

提示：

1 <= words.length <= 2000
1 <= words[i].length <= 2000
字词只包含小写英文字母。
待查项只包含小写英文字母。
待查项最多 40000 个。

思路：设计问题+前缀树/字典树+结构体
接下来上题解区题解：
1，将单词字典中的每个单词翻转初始化字典树
2，字符流从后往前进行查找，进行判断即可

执行用时 :
460 ms
, 在所有 C++ 提交中击败了
26.85%
的用户
内存消耗 :
97.6 MB
, 在所有 C++ 提交中击败了
25.00%
的用户
（时空都不咋地）

上代码：
class StreamChecker {
public:
    struct TrieNode {
        bool flag;
        TrieNode* next[26];
        TrieNode() : flag(false), next({NULL}) {}
    };
    TrieNode* root;
    string s;
    StreamChecker(vector<string>& words) {
        root = new TrieNode();
        for (const auto& w : words) {
            auto node = root;
            for (int i = w.size() - 1; i >= 0; i--) {
                int k = w[i] - 'a';
                if (node->next[k] == NULL) {
                    node->next[k] = new TrieNode();
                }
                node = node->next[k];
            }
            node->flag = true;
        }
    }
    
    bool query(char letter) {
        s += letter;
        auto node = root;
        for (int i = s.size() - 1; i >= 0; --i) {
            int k = s[i] - 'a';
            if (node->next[k] != NULL) {
                node = node->next[k];
                if (node->flag) return true;
            } else {
                return false;
            }
        }
        return false;
    }
};

/**
 * Your StreamChecker object will be instantiated and called as such:
 * StreamChecker* obj = new StreamChecker(words);
 * bool param_1 = obj->query(letter);
 */