题目难度：MEDIUM

给定一个二维的矩阵，包含?'X'?和?'O'（字母 O）。


找到所有被 'X' 围绕的区域，并将这些区域里所有的?'O' 用 'X' 填充。



示例:

X X X X
X O O X
X X O X
X O X X
运行你的函数后，矩阵变为：

X X X X
X X X X
X X X X
X O X X


解释:

被围绕的区间不会存在于边界上，换句话说，任何边界上的?'O'?都不会被填充为?'X'。 
任何不在边界上，或不与边界上的?'O'?相连的?'O'?最终都会被填充为?'X'。
如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。



思路：这题我先用的标准BFS模板，遇见空数据WA一次，之后报了个没见过的错误WA了
之后做了代码调整，成功...超时！！！Σ( ° △ °|||)？
本题思路是BFS+queue实现四象封印。过程十分麻烦
首先做空数据判断，数据比较刁钻，这种BFS题也开始空数据了(*′Д｀*)，空数据直接返回即可
之后BFS改为手动的四次，分别代表四条边开始遍历，注意去除已判的顶点，（去重）
进入BFS――
BFS里设定一个队列，一个pair用来保存两个下标
然后建立一个auto类型函数对边界还需判断是否越界并且是不是‘O’，不是就返回false，是就true即可
之后再建立一个auto类型的函数将四象封印写入pair的type类型的数组中，判断四象
如果第一个auto函数对应下标是true，就放入结果数组中（即与边界连接，可以是‘O’），并赋值为‘+’（第一处去重）
建立一个pair类型存蓄当前判断的两个下标，并带入第一个auto函数
之后针对当前参数下标进行第一个auto函数的true判断，如果true就赋对应值为‘+’（第二处去重），并放入队列中准备递归
最后队列中的递归就是老套路了，取元素进行第二个auto函数四象判断并另当前元素出队，结果用auto类型接收放入队列即可
BFS出来了~~~
最后判断给定二维数组的值是不是‘O’，如果是‘O’就改为‘X’（被包含）
如果是‘+’就改为‘O’（与边界相连（BFS中判断的））即可。。。
死麻烦（X_X）吐血

执行用时 :
40 ms
, 在所有 cpp 提交中击败了
69.81%
的用户
内存消耗 :
16.3 MB
, 在所有 cpp 提交中击败了
9.57%
的用户

上代码：
class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if(board.empty()) return;
        const int m = board.size();
        const int n = board[0].size();
        for(int i = 0; i < n; i++) {
            bfs(board, 0, i);
            bfs(board, m - 1, i);
        }
        for(int j = 1; j < m - 1; j++) {
            bfs(board, j, 0);
            bfs(board, j, n - 1);
        }
        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                if(board[i][j] == 'O')
                    board[i][j] = 'X';
                else if(board[i][j] == '+')
                    board[i][j] = 'O';
    }
private:
    void bfs(vector<vector<char>>& board, int i, int j) {
        typedef pair<int, int> state_t;
        queue<state_t> q;
        const int m = board.size();
        const int n = board[0].size();
        auto is_valid = [&](const state_t &s) {
            const int x = s.first;
            const int y = s.second;
            if(x < 0 || x >= m || y < 0 || y >= n || board[x][y] != 'O')
                return false;
            return true;
        };
        auto state_extend = [&](const state_t &s) {
            vector<state_t> result;
            const int x = s.first;
            const int y = s.second;
            //上下左右
            const state_t new_states[4] = {{x-1,y}, {x+1,y}, {x,y-1}, {x,y+1}};
            for(int k = 0; k < 4; ++k) {
                if(is_valid(new_states[k])) {
                    //既有标记功能又有去重功能
                    board[new_states[k].first][new_states[k].second] = '+';
                    result.push_back(new_states[k]);
                }
            }
            return result;
        };
        state_t start = {i, j};
        if(is_valid(start)) {
            board[i][j] = '+';
            q.push(start);
        }
        while(!q.empty()) {
            auto cur = q.front();
            q.pop();
            auto new_states = state_extend(cur);
            for(auto s: new_states) q.push(s);
        }
    }
};

但是我觉得下面这种写法更好，来自评论区：直接就搜没那些什么花里胡哨的操作。
而且重要的是效率极高，思路同理，见注释不再详说

执行用时 :
28 ms
, 在所有 cpp 提交中击败了
98.62%
的用户
内存消耗 :
13.8 MB
, 在所有 cpp 提交中击败了
96.72%
的用户

上代码：
/*
First, check the four border of the matrix. If there is a element is
'O', alter it and all its nei***or 'O' elements to '1'.

Then ,alter all the 'O' to 'X'

At last,alter all the '1' to 'O'

For example:

         X X X X           X X X X             X X X X
         X X O X  ->       X X O X    ->       X X X X
         X O X X           X 1 X X             X O X X
         X O X X           X 1 X X             X O X X
*/
class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if(board.size()==0){
            return;
        }
        int rows=board.size(),cols=board[0].size();
        for(int i=0;i<rows;i++){
            dfs(board,i,0);
            dfs(board,i,cols-1);
        }
        for(int j=1;j<cols-1;j++){
            dfs(board,0,j);
            dfs(board,rows-1,j);
        }
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(board[i][j]=='1'){
                    board[i][j]='O';
                }
                else{
                    board[i][j]='X';
                }
            }
        }
    }
private:
    void dfs(vector<vector<char>>& board,int i,int j){
        if(i>=0&&i<board.size()&&j>=0&&j<board[0].size()&&board[i][j]=='O'){
            board[i][j]='1';
            dfs(board,i-1,j);
            dfs(board,i+1,j);
            dfs(board,i,j-1);
            dfs(board,i,j+1);
        }
    }
};