题目难度：MEDIUM

超级丑数 是一个正整数，并满足其所有质因数都出现在质数数组 primes 中。
给你一个整数 n 和一个整数数组 primes ，返回第 n 个 超级丑数 。
题目数据保证第 n 个 超级丑数 在 32-bit 带符号整数范围内。
示例 1：
输入：n = 12, primes = [2,7,13,19]
输出：32 
解释：给定长度为 4 的质数数组 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。
示例 2：
输入：n = 1, primes = [2,3,5]
输出：1
解释：1 不含质因数，因此它的所有质因数都在质数数组 primes = [2,3,5] 中。
提示：
1 <= n <= 106
1 <= primes.length <= 100
2 <= primes[i] <= 1000
题目数据 保证 primes[i] 是一个质数
primes 中的所有值都 互不相同 ，且按 递增顺序 排列

思路：哈希表+优先队列
接下来上官方题解：
要得到从小到大的第 nn 个超级丑数，可以使用最小堆实现。
初始时堆为空。首先将最小的超级丑数 11 加入堆。
每次取出堆顶元素 xx，则 xx 是堆中最小的超级丑数。
对于数组 \textit{primes}primes 的任意质数 pp，pxpx 也是超级丑数，因此将数组 \textit{primes}primes 中的每个质数和 xx 的乘积分别加入堆。
上述做法会导致堆中出现重复元素的情况。
为了避免重复元素，可以使用哈希集合去重，避免相同元素多次加入堆。
在排除重复元素的情况下，第 nn 次从最小堆中取出的元素即为第 nn 个超级丑数。

执行用时：
980 ms
, 在所有 C++ 提交中击败了
13.75%
的用户
内存消耗：
132.6 MB
, 在所有 C++ 提交中击败了
5.12%
的用户
（时间不咋地，空间炸了）

上代码：
class Solution {
public:
    int nthSuperUglyNumber(int n, vector<int>& primes) {
        unordered_set<long> seen;
        priority_queue<long, vector<long>, greater<long>> heap;
        seen.insert(1);
        heap.push(1);
        int ugly = 0;
        for (int i = 0; i < n; i++) {
            long curr = heap.top();
            heap.pop();
            ugly = (int)curr;
            for (int prime : primes) {
                long next = curr * prime;
                if (seen.insert(next).second) {
                    heap.push(next);
                }
            }
        }
        return ugly;
    }
};