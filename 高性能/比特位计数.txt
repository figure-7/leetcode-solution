题目难度：MEDIUM

给定一个非负整数 num。
对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。
示例 1:
输入: 2
输出: [0,1,1]
示例 2:
输入: 5
输出: [0,1,1,2,1,2]
进阶:
给出时间复杂度为O(n*sizeof(integer))的解答非常容易。
但你可以在线性时间O(n)内用一趟扫描做到吗？
要求算法的空间复杂度为O(n)。
你能进一步完善解法吗？
要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。

思路：进制+DP（其实打表都可以，但是力扣限制数组数据长度，过长提交不上）
接下来上官方题解：
动态规划——最低设置位
定义正整数 xx 的「最低设置位」为 xx 的二进制表示中的最低的 11 所在位。
例如，1010 的二进制表示是 1010_{(2)}1010
其最低设置位为 22，对应的二进制表示是 10_{(2)}10 
令 y=x \&(x-1)y=x&(x−1)，则 yy 为将 xx 的最低设置位从 11 变成 00 之后的数，显然 0 \le y<x0≤y<x，\textit{bits}[x]=\textit{bits}[y]+1bits[x]=bits[y]+1。
因此对任意正整数 xx，都有 \textit{bits}[x]=\textit{bits}[x \&(x-1)]+1bits[x]=bits[x&(x−1)]+1。
遍历从 11 到 \textit{num}num 的每个正整数 ii，计算 \textit{bits}bits 的值。最终得到的数组 \textit{bits}bits 即为答案。

执行用时：
8 ms
, 在所有 C++ 提交中击败了
61.11%
的用户
内存消耗：
7.8 MB
, 在所有 C++ 提交中击败了
62.75%
的用户
（时空都一般）

上代码：
class Solution {
public:
    vector<int> countBits(int num) {
        vector<int> bits(num + 1);
        for (int i = 1; i <= num; i++) {
            bits[i] = bits[i & (i - 1)] + 1;
        }
        return bits;
    }
};