题目难度：MEIDUM

给定一个整数数组 A，找到 min(B) 的总和，其中 B 的范围为 A 的每个（连续）子数组。

由于答案可能很大，因此返回答案模 10^9 + 7。

 

示例：

输入：[3,1,2,4]
输出：17
解释：
子数组为 [3]，[1]，[2]，[4]，[3,1]，[1,2]，[2,4]，[3,1,2]，[1,2,4]，[3,1,2,4]。 
最小值为 3，1，2，4，1，1，2，1，1，1，和为 17。
 

提示：

1 <= A <= 30000
1 <= A[i] <= 30000

思路：接下来上题解区思路：
1，利用单调栈记录截止到当前下标之前的所有下边界
2，利用sums[i]记录所有以i为终点的区间最小值之和

执行用时 :
80 ms
, 在所有 C++ 提交中击败了
82.16%
的用户
内存消耗 :
15.7 MB
, 在所有 C++ 提交中击败了
24.36%
的用户
（时间很好，空间不咋地）

上代码：
class Solution {
public:
    const long M = 1e9 + 7;
    int sumSubarrayMins(vector<int>& A) {
        int N = A.size();
        stack<int> st;
        vector<long> sums(N, 0);
        for (int i = 0; i < N; ++i) {
            while (!st.empty() && A[st.top()] >= A[i]) {
                st.pop();
            }
            if (st.empty()) {
                sums[i] = A[i] * (i + 1);
            } else {
                sums[i] = sums[st.top()] + A[i] * (i - st.top());
            }
            sums[i] %= M;
            st.push(i);
        }
        long res = 0;
        for (auto x : sums) {
            res += x;
            res %= M;
        }
        return res;
    }
};