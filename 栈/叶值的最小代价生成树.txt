题目难度：MEDIUM

给你一个正整数数组 arr，考虑所有满足以下条件的二叉树：

每个节点都有 0 个或是 2 个子节点。
数组 arr 中的值与树的中序遍历中每个叶节点的值一一对应。
（知识回顾：如果一个节点有 0 个子节点，那么该节点为叶节点。）
每个非叶节点的值等于其左子树和右子树中叶节点的最大值的乘积。
在所有这样的二叉树中，返回每个非叶节点的值的最小可能总和。
这个和的值是一个 32 位整数。

 

示例：

输入：arr = [6,2,4]
输出：32
解释：
有两种可能的树，第一种的非叶节点的总和为 36，第二种非叶节点的总和为 32。

    24            24
   /  \          /  \
  12   4        6    8
 /  \               / \
6    2             2   4
 

提示：

2 <= arr.length <= 40
1 <= arr[i] <= 15
答案保证是一个 32 位带符号整数，即小于 2^31。

思路：单调栈
（其实很简单的一题，但是审题错了...傻了）接下来上题解区题解：
心路历程：做这题的时候，分析了输入是正序和输入是逆序的两种特殊情况，这两种情况可以用单调递减栈解决。
于是猜想这道题得用单调递减栈，验证一般情况下的输入，确实是这样的。

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
86.34%
的用户
内存消耗 :
8.7 MB
, 在所有 C++ 提交中击败了
31.07%
的用户
（时间很好，空间不咋地）

上代码;
class Solution {
public:
    int mctFromLeafValues(vector<int>& arr) {
        int result = 0;
        stack<int> stk;
        stk.push(INT_MAX);
        for (int e : arr) {
            while (e >= stk.top()) {
                int oldTop = stk.top();
                stk.pop();
                result += (oldTop * min(e, stk.top()));
            }
            stk.push(e);
        }
        while (stk.size() > 2) {
            int oldTop = stk.top();
            stk.pop();
            result += (oldTop * stk.top());
        }
        return result;
    }
};