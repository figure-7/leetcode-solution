题目难度：MEDIUM

给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。

示例:

输入:?n = 4, k = 2


输出:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

思路：利用DFS + Backtracking回溯算法。
整体： 建立一个一维数组和一个二维数组，一维数组在DFS遍历中用来保存深度遍历经过的值
当深度到底时，二维数组用来保存一维数组的所有值
每次遍历的时候在for循环中抛出一维数组的首个元素，以便于组合运算
内部： 开始对n个数做DFS，在对n-1个数做DFS......所以一共是对n(n-1)(n-2)...1做DFS
所以时间复杂度O(N!)

执行用时 :
1156 ms
, 在所有C++提交中击败了
7.07%
的用户
内存消耗 :
167 MB
, 在所有C++提交中击败了
11.78%
的用户

上代码：
class Solution {
public:
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>> ret;
        vector<int> curr;
        if(n <= 0) {
            return ret;
        }
        DFS(ret, curr, n, k, 1);
        return ret;
    }
    void DFS(vector<vector<int>>& ret, vector<int> curr, int n, int k, int level) {
        if(curr.size() == k) {
            ret.push_back(curr);
            return;
        }
        if(curr.size() > k) {
            return;
        }
        for(int i = level; i <= n; i++) {
            curr.push_back(i);
            DFS(ret,curr,n,k,i+1);
            curr.pop_back();
        }
    }
};
