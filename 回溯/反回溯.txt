题目难度：MEDIUM

给定一个二维网格和一个单词，找出该单词是否存在于网格中。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

示例:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

给定 word = "ABCCED", 返回 true.
给定 word = "SEE", 返回 true.
给定 word = "ABCB", 返回 false.

思路：一定要先对剪枝的情况进行处理（1.board越界，2.是否访问过，3.字符是否对应相等）
然后进行递归，否则容易出现超时

执行用时 :
44 ms
, 在所有 C++ 提交中击败了
77.58%
的用户
内存消耗 :
10.9 MB
, 在所有 C++ 提交中击败了
79.79%
的用户

上代码：
class Solution {
public:
    bool is_exist(vector<vector<char>>& board, vector<vector<bool>>& is_visited, string& word, int p, int x, int y)
    {
        if( p == word.size())
            return true;
        if(x < 0 || x >=board.size() || y < 0 || y >= board[0].size() || is_visited[x][y] || word[p] != board[x][y])
            return false;
        is_visited[x][y] = true;
        bool res = (is_exist(board, is_visited, word, p+1, x + 1, y)||
            is_exist(board, is_visited, word, p + 1, x - 1, y)||
            is_exist(board, is_visited, word, p + 1, x , y - 1)||
            is_exist(board, is_visited, word, p + 1, x , y + 1));
        is_visited[x][y] = false;

        return res;
    }

    bool exist(vector<vector<char>>& board, string word)
    {
        vector<vector<bool>> is_visited(board.size(), vector<bool>(board[0].size(), false));
        for (int i = 0; i < board.size(); ++i)
        {
            for (int j = 0; j < board[0].size(); ++j)
            {
                if(is_exist(board, is_visited, word, 0, i, j))
                    return true;
            }
        }
        return false;
    }
};