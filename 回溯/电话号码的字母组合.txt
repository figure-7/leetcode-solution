题目难度：MEDIUM

给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。

给出数字到字母的映射如下（与话按键相同）。注意 1 不对应任何字母。

示例:

输入："23"

     输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].


说明:
尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。


思路：还是DFS + BackTracking 回溯算法，注意一下vector使用及其下标使用方式及强制类型转换即可
（没啥难的，就是不会，菜........）

执行用时 :
0 ms
, 在所有C++提交中击败了
100.00%
的用户
内存消耗 :
9.1 MB
, 在所有C++提交中击败了
7.92%
的用户
（还是很快的算法）

上代码：
class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> ret;
        vector<string> dic;
        string tmp;
        if(digits.size()==0) {
            return ret;
        }
        dic.push_back(" ");
        dic.push_back(" ");
        dic.push_back("abc");
        dic.push_back("def");
        dic.push_back("ghi");
        dic.push_back("jkl");
        dic.push_back("mno");
        dic.push_back("pqrs");
        dic.push_back("tuv");
        dic.push_back("wxyz");
        DFS(ret,tmp,digits,dic,0);
        return ret;
    }
    void DFS(vector<string>& ret, string tmp, string digits, vector<string> dic, int level) {
        if(level==digits.size()) {
            ret.push_back(tmp);
            return;
        }
        int index = digits[level]-'0';
        for(int i = 0; i < dic[index].size(); i++) {
            tmp.push_back(dic[index][i]);
            DFS(ret,tmp,digits,dic,level+1);
            tmp.pop_back();
        }
    }
};