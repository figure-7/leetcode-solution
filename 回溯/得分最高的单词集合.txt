题目难度：HARD

你将会得到一份单词表 words，一个字母表 letters （可能会有重复字母），以及每个字母对应的得分情况表 score。

请你帮忙计算玩家在单词拼写游戏中所能获得的「最高得分」：能够由 letters 里的字母拼写出的 任意 属于 words 单词子集中，分数最高的单词集合的得分。

单词拼写游戏的规则概述如下：

玩家需要用字母表 letters 里的字母来拼写单词表 words 中的单词。
可以只使用字母表 letters 中的部分字母，但是每个字母最多被使用一次。
单词表 words 中每个单词只能计分（使用）一次。
根据字母得分情况表score，字母 'a', 'b', 'c', ... , 'z' 对应的得分分别为 score[0], score[1], ..., score[25]。
本场游戏的「得分」是指：玩家所拼写出的单词集合里包含的所有字母的得分之和。
 

示例 1：

输入：words = ["dog","cat","dad","good"], letters = ["a","a","c","d","d","d","g","o","o"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
输出：23
解释：
字母得分为  a=1, c=9, d=5, g=3, o=2
使用给定的字母表 letters，我们可以拼写单词 "dad" (5+1+5)和 "good" (3+2+2+5)，得分为 23 。
而单词 "dad" 和 "dog" 只能得到 21 分。
示例 2：

输入：words = ["xxxz","ax","bx","cx"], letters = ["z","a","b","c","x","x","x"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
输出：27
解释：
字母得分为  a=4, b=4, c=4, x=5, z=10
使用给定的字母表 letters，我们可以组成单词 "ax" (4+5)， "bx" (4+5) 和 "cx" (4+5) ，总得分为 27 。
单词 "xxxz" 的得分仅为 25 。
示例 3：

输入：words = ["leetcode"], letters = ["l","e","t","c","o","d"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
输出：0
解释：
字母 "e" 在字母表 letters 中只出现了一次，所以无法组成单词表 words 中的单词。
 

提示：

1 <= words.length <= 14
1 <= words[i].length <= 15
1 <= letters.length <= 100
letters[i].length == 1
score.length == 26
0 <= score[i] <= 10
words[i] 和 letters[i] 只包含小写的英文字母。

思路：这题数据很弱。所以就利用BackTracking的思路，枚举出所有word组合的情况
依次计算在该方案下能否实现字符全部在letter中取到，能取到就去最大的成绩，不能就break，继续遍历即可
（如果暴力挺简单的一题，因为数据弱。。。所以还是很麻烦的一道题，再所以我第三题BFS太慢了没时间做了，最后所以不可能AK的这辈子。。。）
（还有就是DFS+BackTracking其实更好，因为可以剪枝）

上代码：
class Solution {
public:
    vector<int> cnt;
    int maxScoreWords(vector<string>& words, vector<char>& letters, vector<int>& score) {
        cnt.assign(26,0);
        for(char c:letters)
            cnt[c-'a']++;
        int n=words.size();
        int mask=1<<n;
        int ans=0;
        for(int i=1;i<mask;i++)
        {
            vector<int> ncnt(26,0);
            for(int j=0;j<n;j++)
            {
                if(!((1<<j)&i)) continue;
                for(char c:words[j])
                    ncnt[c-'a']++;
            }
            int nans=0;
            for(int j=0;j<26;j++)
            {
                if(ncnt[j]>cnt[j])
                {
                    nans=0;
                    break;
                }
                nans+=score[j]*ncnt[j];
            }
            ans=max(ans,nans);
        }
        return ans;
    }
};