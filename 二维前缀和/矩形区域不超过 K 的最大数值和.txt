题目难度：HARD

给你一个 m x n 的矩阵 matrix 和一个整数 k ，找出并返回矩阵内部矩形区域的不超过 k 的最大数值和。
题目数据保证总会存在一个数值和不超过 k 的矩形区域。
示例 1：
输入：matrix = [[1,0,1],[0,-2,3]], k = 2
输出：2
解释：蓝色边框圈出来的矩形区域 [[0, 1], [-2, 3]] 的数值和是 2，且 2 是不超过 k 的最大数字（k = 2）。
示例 2：
输入：matrix = [[2,2,-1]], k = 3
输出：3
提示：
m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-100 <= matrix[i][j] <= 100
-105 <= k <= 105
进阶：如果行数远大于列数，该如何设计解决方案？

思路：二位前缀和
接下来上题解区题解：
我们枚举矩形的上下边界，并计算出该边界内每列的元素和，则原问题转换成了如下一维问题：
给定一个整数数组和一个整数 k，计算该数组的最大区间和，要求区间和不超过 k。
定义长度为 n 的数组 a 的前缀和
S 
i
 ={ 
0
a 
0
 +a 
1
 +⋯+a 
i−1
i=0
1≤i≤n
则区间 [l,r) 的区间和 a 
l
 +a 
l+1
 +⋯+a 
r−1
  可以表示为 S 
r
 −S 
l
 。
枚举 r，上述问题的约束 kS 
r
 −S 
l
 ≤k 可以转换为 S 
l
 ≥S 
r
 −k。
 要使 S 
r
 −S 
l
  尽可能大，则需要寻找最小的满足 S 
l
 ≥S 
r
 −k 的 S_lS 
l
 。
 我们可以在枚举 r 的同时维护一个存储 S 
i
  (i<r) 的有序集合，则可以在O(logn) 的时间内二分找到符合要求的 S 
l

执行用时：
1128 ms
, 在所有 C++ 提交中击败了
37.46%
的用户
内存消耗：
286.4 MB
, 在所有 C++ 提交中击败了
20.60%
的用户
（时空都不咋地）

上代码：
class Solution {
public:
    int maxSumSubmatrix(vector<vector<int>> &matrix, int k) {
        int ans = INT_MIN;
        int m = matrix.size(), n = matrix[0].size();
        for (int i = 0; i < m; ++i) { // 枚举上边界
            vector<int> sum(n);
            for (int j = i; j < m; ++j) { // 枚举下边界
                for (int c = 0; c < n; ++c) {
                    sum[c] += matrix[j][c]; // 更新每列的元素和
                }
                set<int> sumSet{0};
                int s = 0;
                for (int v : sum) {
                    s += v;
                    auto lb = sumSet.lower_bound(s - k);
                    if (lb != sumSet.end()) {
                        ans = max(ans, s - *lb);
                    }
                    sumSet.insert(s);
                }
            }
        }
        return ans;
    }
};
