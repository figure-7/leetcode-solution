题目难度：HARD

对于给定的整数 n, 如果n的k（k>=2）进制数的所有数位全为1，则称 k（k>=2）是 n 的一个好进制。
以字符串的形式给出 n, 以字符串的形式返回 n 的最小好进制。
示例 1：
输入："13"
输出："3"
解释：13 的 3 进制是 111。
示例 2：
输入："4681"
输出："8"
解释：4681 的 8 进制是 11111。
示例 3：
输入："1000000000000000000"
输出："999999999999999999"
解释：1000000000000000000 的 999999999999999999 进制是 11。
提示：
n的取值范围是 [3, 10^18]。
输入总是有效且没有前导 0。

思路：模拟
接下来上官方题解：
假设正整数 nn 在 k~(k \geq 2)k (k≥2) 进制下的所有数位都为 11，且位数为 m + 1m+1，那么有：
n = k^0 + k^1 + k^2 + \dots + k^m\tag{1}
n=k 
0
 +k 
1
 +k 
2
 +⋯+k 
m
 (1)
我们首先讨论两种特殊情况：
m=0m=0，此时 n=1n=1，而题目保证 n \geq 3n≥3，所以本题中 m>0m>0。
m=1m=1，此时 n=(11)_kn=(11) 
k	
 ，即 k=n-1\geq 2k=n−1≥2，这保证了本题有解。
然后我们分别证明一般情况下的两个结论，以帮助解决本题。
结论一：m < \log_k nm<log 
k	
 n
注意到 (1)(1) 式右侧是一个首项为 11、公比为 kk 的等比数列，利用等比数列求和公式，我们可以得到：
n = \frac{1 - k^{m+1}}{1 - k}
n= 
1−k
1−k 
m+1
对公式进行变换可得：
k^{m+1} = kn - n + 1 < kn
k 
m+1
 =kn−n+1<kn
移项并化简可得：
m < \log_k n
m<log 
k
​n
这个结论帮助我们限制了 mm 的范围，本题中 3 \leq n \leq 10^{18}3≤n≤10 
18
  且 k \geq 2k≥2，所以 m < \log_2 10^{18} < 60m<log 
2	
 10 
18
 <60。
结论二：k = \lfloor \sqrt[m]{n} \rfloork=⌊ 
m 
n	
 ⌋
依据 (1)(1) 式，可知：
n = k^0 + k^1 + k^2 + \dots + k^m > k^m \tag{2}
n=k 
0
 +k 
1
 +k 
2
 +⋯+k 
m
 >k 
m
 (2)
依据二项式定理可知：
(k+1)^m = \binom{m}{0}k^0 + \binom{m}{1}k^1 + \binom{m}{2}k^2 + \dots + \binom{m}{m}k^m
(k+1) 
m
 =( 
0
m	
 )k 
0
 +( 
1
m	
 )k 
1
 +( 
2
m	
 )k 
2
 +⋯+( 
m
m	
 )k 
m
因为当 m>1m>1 时，\forall i \in [1,m-1], \dbinom{m}{i} > 1∀i∈[1,m−1],( 
i
m	
 )>1，所以有：
\begin{aligned} (k+1)^m &= \binom{m}{0}k^0 + \binom{m}{1}k^1 + \binom{m}{2}k^2 + \dots + \binom{m}{m}k^m \\ &> k^0 + k^1 + k^2 + \dots + k^m = n \tag{3} \end{aligned}
(k+1) 
m 
=( 
0
m	
 )k 
0
 +( 
1
m	
 )k 
1
 +( 
2
m	
 )k 
2
 +⋯+( 
m
m	
 )k 
m
>k 
0
 +k 
1
 +k 
2
 +⋯+k 
m
 =n	
 (3)
结合 (2)(3)(2)(3) 两式可知，当 m>1m>1 时，有 k^m < n < (k+1)^mk 
m
 <n<(k+1) 
m
 。两边同时开方得：
k < \sqrt[m]{n} < k+1
k< 
m
n	
 <k+1
依据这个公式我们知道，\sqrt[m]{n} 
m 
n	
  必然为一个小数，且 kk 为 \sqrt[m]{n} 
m 
n	
  的整数部分，即 k = \lfloor \sqrt[m]{n} \rfloork=⌊ 
m 
n	
 ⌋。
这个结论帮助我们在 nn 和 mm 已知的情况下快速确定 kk 的值。
综合上述两个结论，依据结论一，我们知道 mm 的取值范围为 [1,\log_k n)[1,log 
k	
 n)，且 m = 1m=1 时必然有解。
因为随着 mm 的增大，kk 不断减小，所以我们只需要从大到小检查每一个 mm 可能的取值，利用结论二快速算出对应的 kk 值，然后校验计算出的 kk 值是否有效即可。
如果 kk 值有效，我们即可返回结果。
在实际代码中，我们首先算出 mm 取值的上界 \textit{mMax}mMax，然后从上界开始向下枚举 mm 值，如果当前 mm 值对应的 kk 合法，那么我们即可返回当前的 kk 值。
如果我们一直检查到 m=2m=2 都没能找到答案，那么此时即可直接返回 m=1m=1 对应的 kk 值：
n-1n−1。

执行用时：
4 ms
, 在所有 C++ 提交中击败了
58.49%
的用户
内存消耗：
6 MB
, 在所有 C++ 提交中击败了
82.08%
的用户
（时间一般，空间不错）

上代码：
class Solution {
public:
    string smallestGoodBase(string n) {
        long nVal = stol(n);
        int mMax = floor(log(nVal) / log(2));
        for (int m = mMax; m > 1; m--) {
            int k = pow(nVal, 1.0 / m);
            long mul = 1, sum = 1;
            for (int i = 0; i < m; i++) {
                mul *= k;
                sum += mul;
            }
            if (sum == nVal) {
                return to_string(k);
            }
        }
        return to_string(nVal - 1);
    }
};