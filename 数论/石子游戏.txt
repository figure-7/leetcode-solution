题目难度：MEDIUM

亚历克斯和李用几堆石子在做游戏。
偶数堆石子排成一行，每堆都有正整数颗石子 piles[i] 。
游戏以谁手中的石子最多来决出胜负。
石子的总数是奇数，所以没有平局。
亚历克斯和李轮流进行，亚历克斯先开始。 
每回合，玩家从行的开始或结束处取走整堆石头。 
这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。
假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回 true ，当李赢得比赛时返回 false 。
示例：
输入：[5,3,4,5]
输出：true
解释：
亚历克斯先开始，只能拿前 5 颗或后 5 颗石子 。
假设他取了前 5 颗，这一行就变成了 [3,4,5] 。
如果李拿走前 3 颗，那么剩下的是 [4,5]，亚历克斯拿走后 5 颗赢得 10 分。
如果李拿走后 5 颗，那么剩下的是 [3,4]，亚历克斯拿走后 4 颗赢得 9 分。
这表明，取前 5 颗石子对亚历克斯来说是一个胜利的举动，所以我们返回 true 。
提示：
2 <= piles.length <= 500
piles.length 是偶数。
1 <= piles[i] <= 500
sum(piles) 是奇数。

思路：数论
接下来上题解区题解：
假设有 nn 堆石子，nn 是偶数，则每堆石子的下标从 00 到 n-1n−1。
根据下标将 nn 堆石子分成两组，每组有 \frac{n}{2} 
2
n	
  堆石子，下标为偶数的石子堆属于第一组，下标为奇数的石子堆属于第二组。
初始时，行的开始处的石子堆位于下标 00，属于第一组，行的结束处的石子堆位于下标 n-1n−1，属于第二组，因此作为先手的 \text{Alex}Alex 可以自由选择取走第一组的一堆石子或者第二组的一堆石子。
如果 \text{Alex}Alex 取走第一组的一堆石子，则剩下的部分在行的开始处和结束处的石子堆都属于第二组，因此 \text{Lee}Lee 只能取走第二组的一堆石子。
如果 \text{Alex}Alex 取走第二组的一堆石子，则剩下的部分在行的开始处和结束处的石子堆都属于第一组，因此 \text{Lee}Lee 只能取走第一组的一堆石子。
无论 \text{Lee}Lee 取走的是开始处还是结束处的一堆石子，剩下的部分在行的开始处和结束处的石子堆一定是属于不同组的，因此轮到 \text{Alex}Alex 取走石子时，\text{Alex}Alex 又可以在两组石子之间进行自由选择。
根据上述分析可知，作为先手的 \text{Alex}Alex 可以在第一次取走石子时就决定取走哪一组的石子，并全程取走同一组的石子。
既然如此，\text{Alex}Alex 是否有必胜策略？
答案是肯定的。
将石子分成两组之后，可以计算出每一组的石子数量，同时知道哪一组的石子数量更多。
\text{Alex}Alex 只要选择取走数量更多的一组石子即可。
因此，\text{Alex}Alex 总是可以赢得比赛。

执行用时：
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗：
7.4 MB
, 在所有 C++ 提交中击败了
57.32%
的用户
（时间完杀！！！空间一般）

上代码：
class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        return true;
    }
};