题目难度：MEDIUM

给你两个整数 left 和 right ，表示区间 [left, right] ，返回此区间内所有数字 按位与 的结果（包含 left 、right 端点）。
示例 1：
输入：left = 5, right = 7
输出：4
示例 2：
输入：left = 0, right = 0
输出：0
示例 3：
输入：left = 1, right = 2147483647
输出：0
提示：
0 <= left <= right <= 231 - 1

思路：数论
接下来上题解区题解：
有一个位移相关的算法叫做「Brian Kernighan 算法」，它用于清除二进制串中最右边的 1。
Brian Kernighan 算法的关键在于我们每次对 number 和 number−1 之间进行按位与运算后，number 中最右边的 1 会被抹去变成 0。
基于上述技巧，我们可以用它来计算两个二进制字符串的公共前缀。
其思想是，对于给定的范围 [m,n]（m<n），我们可以对数字 n 迭代地应用上述技巧，清除最右边的 1，直到它小于或等于 m，此时非公共前缀部分的 1 均被消去。
因此最后我们返回 n 即可。
在上图所示的示例（m=9,n=12）中，公共前缀是 00001。
在对数字 n 应用 Brian Kernighan 算法后，后面三位都将变为零，最后我们返回 n 即可。

执行用时：
4 ms
, 在所有 C++ 提交中击败了
91.99%
的用户
内存消耗：
5.8 MB
, 在所有 C++ 提交中击败了
82.44%
的用户
（时空都不错）

上代码：
class Solution {
public:
    int rangeBitwiseAnd(int left, int right) {
        while(left < right) right = right & (right - 1);
        return right;
    }
};
