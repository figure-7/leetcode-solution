题目难度：MEDIUM

给定一个表示分数加减运算的字符串 expression ，你需要返回一个字符串形式的计算结果。 
这个结果应该是不可约分的分数，即最简分数。 
如果最终结果是一个整数，例如 2，你需要将它转换成分数形式，其分母为 1。
所以在上述例子中, 2 应该被转换为 2/1。
示例 1:
输入: expression = "-1/2+1/2"
输出: "0/1"
 示例 2:
输入: expression = "-1/2+1/2+1/3"
输出: "1/3"
示例 3:
输入: expression = "1/3-1/2"
输出: "-1/6"
提示:
输入和输出字符串只包含 '0' 到 '9' 的数字，以及 '/', '+' 和 '-'。 
输入和输出分数格式均为 ±分子/分母。
如果输入的第一个分数或者输出的分数是正数，则 '+' 会被省略掉。
输入只包含合法的最简分数，每个分数的分子与分母的范围是  [1,10]。 
如果分母是1，意味着这个分数实际上是一个整数。
输入的分数个数范围是 [1,10]。
最终结果的分子与分母保证是 32 位整数范围内的有效整数。

思路：数论（太麻烦了，我懒得写.）
接下来上题解区题解：
对于两个分数 \dfrac{x_1}{y_1} 和 \dfrac{x_2}{y_2} 
y 
1
x 
1
 和 
y 
2
x 
2
 ，它们相加的结果为：
{y_1 \times y_2}
y 
1
 ×y 
2
x 
1
 ×y 
2
 +x 
2
 ×y 
1
初始分数的分子为 denominator=0，分母为 numerator=1。
我们不断从字符串中获取下一个分数，它的分子为 denominator 
1
 ，分母为 \textit{numerator}_1numerator 
1
 ，将它加到初始分数上，有：
\begin{cases} \textit{denominator} = \textit{denominator} \times \textit{numerator}_1 + \textit{denominator}_1 \times \textit{numerator} \\ \textit{numerator} = \textit{numerator} \times \textit{numerator}_1 \end{cases}
{ 
denominator=denominator×numerator 
1
 +denominator 
1
 ×numerator
numerator=numerator×numerator 
1
最后如果 denominator=0，说明结果为零，直接返回 "0/1"；否则计算分子分母的最大公约数，返回约简后分数的字符串表示。

上代码：
class Solution {
public:
    string fractionAddition(string expression) {
        long long denominator = 0, numerator = 1; // 分子，分母
        int index = 0, n = expression.size();
        while (index < n) {
            // 读取分子
            long long denominator1 = 0, sign = 1;
            if (expression[index] == '-' || expression[index] == '+') {
                sign = expression[index] == '-' ? -1 : 1;
                index++;
            }
            while (index < n && isdigit(expression[index])) {
                denominator1 = denominator1 * 10 + expression[index] - '0';
                index++;
            }
            denominator1 = sign * denominator1;
            index++;

            // 读取分母
            long long numerator1 = 0;
            while (index < n && isdigit(expression[index])) {
                numerator1 = numerator1 * 10 + expression[index] - '0';
                index++;
            }

            denominator = denominator * numerator1 + denominator1 * numerator;
            numerator *= numerator1;
        }
        if (denominator == 0) {
            return "0/1";
        }
        long long g = gcd(abs(denominator), numerator); // 获取最大公约数
        return to_string(denominator / g) + "/" + to_string(numerator / g);
    }
};
