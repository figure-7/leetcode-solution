题目难度：MEDIUM

在一个 N × N 的方形网格中，每个单元格有两种状态：空（0）或者阻塞（1）。

一条从左上角到右下角、长度为 k 的畅通路径，由满足下述条件的单元格 C_1, C_2, ..., C_k 组成：

相邻单元格 C_i 和 C_{i+1} 在八个方向之一上连通（此时，C_i 和 C_{i+1} 不同且共享边或角）
C_1 位于 (0, 0)（即，值为 grid[0][0]）
C_k 位于 (N-1, N-1)（即，值为 grid[N-1][N-1]）
如果 C_i 位于 (r, c)，则 grid[r][c] 为空（即，grid[r][c] == 0）
返回这条从左上角到右下角的最短畅通路径的长度。如果不存在这样的路径，返回 -1 。

 

示例 1：

输入：[[0,1],[1,0]]

输出：2

示例 2：

输入：[[0,0,0],[1,1,0],[1,1,0]]

输出：4

 

提示：

1 <= grid.length == grid[0].length <= 100
grid[i][j] 为 0 或 1

思路：先定义一个结构体类型，分别存放两个下标和路过路径总和值
然后设置一个队列，负责对结构体三个值储存，先对队列赋初值（0，0，1）
先判断给定数组00下标对应值，若为1就返回-1
然后判断对于改下标的对应周围一圈的值，如果是左侧以计算过的就continue
剩下没计算过的如果是0就放进队列中，并把其值改为1
当两个下标都到达最大值时返回结构体最后一个数对应的值即可
（好乱，难。。。）

上代码：
struct Node{
    int x, y, d;
};
class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>> G=grid;
        queue<Node> q;
        q.push({0, 0, 1});
        if(G[0][0]==1) return -1;
        G[0][0]=1;
        while(!q.empty()) {
            Node u = q.front();
            q.pop();
            //printf("%d %d %d\n", u.x, u.y, u.d);
            if(u.x==n-1&&u.y==n-1) return u.d;
            for(int i=-1; i<=1; ++i) {
                for(int j=-1; j<=1; ++j) {
                    int x = u.x-i;
                    int y = u.y-j;
                    if(x<0||y<0||x>=n||y>=n) continue;
                    if(G[x][y]==0) {
                        G[x][y]=1;
                        q.push({x, y, u.d+1});
                    } 
                }
            }
        }
        return -1;
    }
};