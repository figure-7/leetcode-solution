题目难度：MEDIUM

给你一个 m x n 的网格 grid。网格里的每个单元都代表一条街道。

grid[i][j] 的街道可以是：

1 表示连接左单元格和右单元格的街道。
2 表示连接上单元格和下单元格的街道。
3 表示连接左单元格和下单元格的街道。
4 表示连接右单元格和下单元格的街道。
5 表示连接左单元格和上单元格的街道。
6 表示连接右单元格和上单元格的街道。


你最开始从左上角的单元格 (0,0) 开始出发，网格中的「有效路径」是指从左上方的单元格 (0,0) 开始、

一直到右下方的 (m-1,n-1) 结束的路径。

该路径必须只沿着街道走。

注意：你 不能 变更街道。

如果网格中存在有效的路径，则返回 true，否则返回 false 。

 

示例 1：



输入：grid = [[2,4,3],[6,5,2]]
输出：true
解释：如图所示，你可以从 (0, 0) 开始，访问网格中的所有单元格并到达 (m - 1, n - 1) 。
示例 2：



输入：grid = [[1,2,1],[1,2,1]]
输出：false
解释：如图所示，单元格 (0, 0) 上的街道没有与任何其他单元格上的街道相连，你只会停在 (0, 0) 处。
示例 3：

输入：grid = [[1,1,2]]
输出：false
解释：你会停在 (0, 1)，而且无法到达 (0, 2) 。
示例 4：

输入：grid = [[1,1,1,1,1,1,3]]
输出：true
示例 5：

输入：grid = [[2],[2],[2],[2],[2],[2],[6]]
输出：true
 

提示：

m == grid.length
n == grid[i].length
1 <= m, n <= 300
1 <= grid[i][j] <= 6

思路：周赛第三题，BFS
玛德真麻烦，就是没写完，全是BUG，就干写转移
每次判断往哪里走，然后如果到终点返回true，否则如果走到之前走过的位置或出界就返回false即可

上代码：
const int MAXN = 300 + 50;
bool vis[MAXN][MAXN];
queue<pair<int,int> > que;

bool check(int v, vector<int> arr){
    for (auto x: arr) if (x == v) return true; 
    return false; 
}

void dfs(int, int, int, int, vector<vector<int>>&);
void todirect(int x, int y, int n, int m, vector<vector<int>>& grid, int k){
    if (k == 0)
        if (y > 0 && check(grid[x][y - 1], {1, 4, 6}))
            if (!vis[x][y - 1]) que.push(make_pair(x, y-1)), vis[x][y-1]=true;
    if (k == 1)
        if (y + 1 < m && check(grid[x][y + 1], {1, 3, 5}))
            if (!vis[x][y + 1]) que.push(make_pair(x, y+1)), vis[x][y+1]=true;
    if (k == 2)
        if (x > 0 && check(grid[x - 1][y], {2, 3, 4}))
            if (!vis[x - 1][y]) que.push(make_pair(x-1, y)), vis[x-1][y]=true;
    if (k == 3)
        if (x + 1 < n && check(grid[x + 1][y], {2, 5, 6}))
            if (!vis[x + 1][y]) que.push(make_pair(x+1, y)), vis[x+1][y]=true;
    
}

class Solution {
public:
    bool hasValidPath(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        // printf("%d %d\n", n, m);
        memset(vis, false, sizeof(vis));
        
        while(!que.empty()) que.pop();
        que.push(make_pair(0, 0)); vis[0][0] = true;
        
        while(!que.empty()){
            int x = que.front().first, y = que.front().second; que.pop();
            int v = grid[x][y];
            if (v == 1){
                todirect(x, y, n, m, grid, 0);
                todirect(x, y, n, m, grid, 1);
            }
            if (v == 2){
                todirect(x, y, n, m, grid, 2);
                todirect(x, y, n, m, grid, 3);
            }
            if (v == 3){
                todirect(x, y, n, m, grid, 0);
                todirect(x, y, n, m, grid, 3);
            }
            if (v == 4){
                todirect(x, y, n, m, grid, 1);
                todirect(x, y, n, m, grid, 3);
            }
            if (v == 5){
                todirect(x, y, n, m, grid, 0);
                todirect(x, y, n, m, grid, 2);
            }
            if (v == 6){
                todirect(x, y, n, m, grid, 1);
                todirect(x, y, n, m, grid, 2);
            }
        }
        
        return vis[n - 1][m - 1];
    }
};
