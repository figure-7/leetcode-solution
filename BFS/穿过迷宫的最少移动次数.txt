题目难度：HARD

你还记得那条风靡全球的贪吃蛇吗？

我们在一个 n*n 的网格上构建了新的迷宫地图，蛇的长度为 2，也就是说它会占去两个单元格。蛇会从左上角（(0, 0) 和 (0, 1)）开始移动。我们用 0 表示空单元格，用 1 表示障碍物。蛇需要移动到迷宫的右下角（(n-1, n-2) 和 (n-1, n-1)）。

每次移动，蛇可以这样走：

如果没有障碍，则向右移动一个单元格。并仍然保持身体的水平／竖直状态。
如果没有障碍，则向下移动一个单元格。并仍然保持身体的水平／竖直状态。
如果它处于水平状态并且其下面的两个单元都是空的，就顺时针旋转 90 度。蛇从（(r, c)、(r, c+1)）移动到 （(r, c)、(r+1, c)）。

如果它处于竖直状态并且其右面的两个单元都是空的，就逆时针旋转 90 度。蛇从（(r, c)、(r+1, c)）移动到（(r, c)、(r, c+1)）。

返回蛇抵达目的地所需的最少移动次数。

如果无法到达目的地，请返回 -1。

 

示例 1：



输入：grid = [[0,0,0,0,0,1],
               [1,1,0,0,1,0],
               [0,0,0,0,1,1],
               [0,0,1,0,1,0],
               [0,1,1,0,0,0],
               [0,1,1,0,0,0]]
输出：11
解释：
一种可能的解决方案是 [右, 右, 顺时针旋转, 右, 下, 下, 下, 下, 逆时针旋转, 右, 下]。
示例 2：

输入：grid = [[0,0,1,1,1,1],
               [0,0,0,0,1,1],
               [1,1,0,0,0,1],
               [1,1,1,0,0,1],
               [1,1,1,0,0,1],
               [1,1,1,0,0,0]]
输出：9
 

提示：

2 <= n <= 100
0 <= grid[i][j] <= 1
蛇保证从空单元格开始出发。

思路：BFS二向封印，先设置三个数组，两个用来保存边界，剩下一个三维数组下标分别用前两个表示蛇尾巴的位置，最后一个下标表示蛇的状态
然后先进行是否能翻转身体的判断，然后BFS向右侧或者下侧移动
两个步骤都需要进行越界判断和障碍判断以及步数递增
注意这两步不能反着写，否则先移动可能会导致移动后无法转身，而之前却可以
最后返回下标对应[i-1][j-2][k]即可，也就是蛇尾巴的位置

上代码：
const int MAXN=1e2+50;
bool block[MAXN][MAXN];

int dist[MAXN][MAXN][5];
int dx[2]={0, 1};
int dy[2]={1, 0};

class Solution {
public:
    int minimumMoves(vector<vector<int>>& grid) {
        int n=grid.size();
        
        for (int i=0; i<n; i++){
            for (int j=0; j<n; j++){
                block[i][j]=false;
                dist[i][j][0]=dist[i][j][1]=-1;
                if (grid[i][j]==1) block[i][j]=true;
            }
        }
        
        dist[0][0][0]=0;
        for (int i=0; i<n; i++){
            for (int j=0; j<n; j++){
                // Rotate
                for (int k=0; k<2; k++){
                    if (dist[i][j][k]==-1) continue;
                    if (i+1>=n || j+1>=n) continue;
                    if (k==0){
                        if (block[i+1][j]==false && block[i+1][j+1]==false){
                            if (dist[i][j][1-k]==-1 || dist[i][j][1-k]>dist[i][j][k]+1)
                                dist[i][j][1-k]=dist[i][j][k]+1;
                        }
                    }else{
                         if (block[i][j+1]==false && block[i+1][j+1]==false){
                            if (dist[i][j][1-k]==-1 || dist[i][j][1-k]>dist[i][j][k]+1)
                                dist[i][j][1-k]=dist[i][j][k]+1;
                        }
                    }
                }
                
                // Move
                for (int k=0; k<2; k++){
                    if (dist[i][j][k]==-1) continue;
                    for (int w=0; w<2; w++){
                        int nx[2], ny[2]; bool flag=true;
                        nx[0]=i; nx[1]=i+dx[k];
                        ny[0]=j; ny[1]=j+dy[k];
                        for (int idx=0; idx<2; idx++){
                            nx[idx]+=dx[w]; ny[idx]+=dy[w];
                            if (0<=nx[idx] && nx[idx]<n && 0<=ny[idx] && ny[idx]<n){
                                // Pass
                            }else flag=false;
                            if (block[nx[idx]][ny[idx]]) flag=false;
                        }
                        if (flag==false) continue;
                        if (dist[nx[0]][ny[0]][k]==-1 || dist[nx[0]][ny[0]][k]>dist[i][j][k]+1){
                            dist[nx[0]][ny[0]][k]=dist[i][j][k]+1;
                        }
                        
                    }
                }
            }
        }
        
        return dist[n-1][n-2][0];
    }
};