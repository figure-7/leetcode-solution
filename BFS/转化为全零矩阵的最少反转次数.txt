题目难度：HARD

给你一个?m x n?的二进制矩阵?mat。

每一步，你可以选择一个单元格并将它反转（反转表示 0 变 1 ，1 变 0 ）。
如果存在和它相邻的单元格，那么这些相邻的单元格也会被反转。（
注：相邻的两个单元格共享同一条边。）


请你返回将矩阵?mat 转化为全零矩阵的最少反转次数，如果无法转化为全零矩阵，请返回?-1?。


二进制矩阵的每一个格子要么是 0 要么是 1 。

全零矩阵是所有格子都为 0 的矩阵。

?



示例?1：



输入：mat = [[0,0],[0,1]]

输出：3

解释：一个可能的解是反转 (1, 0)，然后 (0, 1) ，最后是 (1, 1) 。


示例 2：

输入：mat = [[0]]

输出：0

解释：给出的矩阵是全零矩阵，所以你不需要改变它。


示例 3：

输入：mat = [[1,1,1],[1,0,1],[0,0,0]]

输出：6


示例 4：

输入：mat = [[1,0,0],[1,0,0]]

输出：-1

解释：该矩阵无法转变成全零矩阵
?

提示：

m ==?mat.length
	n ==?mat[0].length
	1 <= m?<= 3
	1 <= n?<= 3	
mat[i][j]?是 0 或 1 。



思路：周赛第四题，利用BFS四象封印解即可
先初始化次数为最大值
遍历所有情况，从0到2的m乘n次方（一共这些种情况）
反转次数先重置为0.先将数组拷贝出来，如果是1则需要翻转
对应第j个格子的行号为j/m，列号为j%m，然后四象翻转即可
如此往复，直到全部值都为0即可记录次数
遍历结束取最小值即可

上代码：
class Solution {
public:
    int minFlips(vector<vector<int>>& a) {
        int dir1[] = {-1,1,0,0};
        int dir2[] = {0,0,-1,1};
        int n = a.size(), m = a[0].size();
        int sz = n*m;
        int ret = 1e9;
        
        for(int i=0;i<1<<sz;++i) {
            vector<vector<int>> tmp(n,vector<int>(m));
            for(int i=0;i<n;++i) for(int j=0;j<m;++j) tmp[i][j] = a[i][j];
            for(int j=0;j<sz;++j) {
                if(i&(1<<j)) {
                    int x=j/m,y=j%m;
                    tmp[x][y] = 1-tmp[x][y];
                    for(int k=0;k<4;++k) {
                        int xx=x+dir1[k],yy=y+dir2[k];
                        if(xx<0||yy<0||xx>=n||yy>=m) continue;
                        tmp[xx][yy] = 1-tmp[xx][yy];
                    }
                }
            }
            int ok=1;
            for(int i=0;i<n;++i) for(int j=0;j<m;++j) if(tmp[i][j]) ok=0;
            if(ok) ret=min(ret,__builtin_popcount(i));
        }
        if(ret > 1000) return -1;
        return ret;
    }
};