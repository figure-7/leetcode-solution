题目难度：MEDIUM

在一个 8x8 的棋盘上，放置着若干「黑皇后」和一个「白国王」。

「黑皇后」在棋盘上的位置分布用整数坐标数组 queens 表示，「白国王」的坐标用数组 king 表示。

「黑皇后」的行棋规定是：横、直、斜都可以走，步数不受限制，但是，不能越子行棋。

请你返回可以直接攻击到「白国王」的所有「黑皇后」的坐标（任意顺序）。

 

示例 1：



输入：queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]
输出：[[0,1],[1,0],[3,3]]
解释： 
[0,1] 的皇后可以攻击到国王，因为他们在同一行上。 
[1,0] 的皇后可以攻击到国王，因为他们在同一列上。 
[3,3] 的皇后可以攻击到国王，因为他们在同一条对角线上。 
[0,4] 的皇后无法攻击到国王，因为她被位于 [0,1] 的皇后挡住了。 
[4,0] 的皇后无法攻击到国王，因为她被位于 [1,0] 的皇后挡住了。 
[2,4] 的皇后无法攻击到国王，因为她和国王不在同一行/列/对角线上。
示例 2：



输入：queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]
输出：[[2,2],[3,4],[4,4]]
示例 3：



输入：queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]
输出：[[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]

思路：直接搜，queens两个值当做下标就玩了，哈希表查不了pair，卡了半天不知道想的什么......

上代码：
class Solution {
public:
    vector<vector<int>> queensAttacktheKing(vector<vector<int>>& queens, vector<int>& king) {
        vector<vector<int>> ans;
        vector<vector<int>> b(8, vector<int>(8, 0));
        int i = 0, j = 0;
        for (i = 0; i < queens.size(); i++) {
            vector<int> &q = queens[i];
            b[q[0]][q[1]] = 1;
        }
        b[king[0]][king[1]] = 2;
        int x = king[0], y = king[1];
        for (i = x - 1; i >= 0; i--) {
            if (b[i][y] == 1) {
                ans.push_back(vector<int>{i, y});
                break;
            }
        }
        for (i = x + 1; i < 8; i++) {
            if (b[i][y] == 1) {
                ans.push_back(vector<int>{i, y});
                break;
            }
        }
        for (i = y - 1; i >= 0; i--) {
            if (b[x][i] == 1) {
                ans.push_back(vector<int>{x, i});
                break;
            }
        }
        for (i = y + 1; i < 8; i++) {
            if (b[x][i] == 1) {
                ans.push_back(vector<int>{x, i});
                break;
            }
        }
        for (i = x+1, j = y+1;i < 8 && j < 8; i++, j++) {
            if (b[i][j] == 1) {
                ans.push_back(vector<int>{i, j});
                break;
            }
        }
        for (i = x-1, j = y-1;i >= 0 && j >= 0; i--, j--) {
            if (b[i][j] == 1) {
                ans.push_back(vector<int>{i, j});
                break;
            }
        }
        for (i = x+1, j = y-1;i < 8 && j >= 0; i++, j--) {
            if (b[i][j] == 1) {
                ans.push_back(vector<int>{i, j});
                break;
            }
        }
        for (i = x-1, j = y+1;i >= 0 && j < 8; i--, j++) {
            if (b[i][j] == 1) {
                ans.push_back(vector<int>{i, j});
                break;
            }
        }
        
        return ans;
    }
};