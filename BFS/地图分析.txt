题目难度：MEDIUM

你现在手里有一份大小为 N x N 的『地图』（网格） grid，上面的每个『区域』（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，你知道距离陆地区域最远的海洋区域是是哪一个吗？请返回该海洋区域到离它最近的陆地区域的距离。

我们这里说的距离是『曼哈顿距离』（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。

如果我们的地图上只有陆地或者海洋，请返回 -1。

 

示例 1：



输入：[[1,0,1],[0,0,0],[1,0,1]]
输出：2
解释： 
海洋区域 (1, 1) 和所有陆地区域之间的距离都达到最大，最大距离为 2。
示例 2：



输入：[[1,0,0],[0,0,0],[0,0,0]]
输出：4
解释： 
海洋区域 (2, 2) 和所有陆地区域之间的距离都达到最大，最大距离为 4。
 

提示：

1 <= grid.length == grid[0].length <= 100
grid[i][j] 不是 0 就是 1

思路：BFS 遍历，依次将每一个海洋(值为 0 的点)作为起点开始遍历，直到找到最近的陆地(值为 1 的点)终止，记录下遍历的深度即为距离，所有海洋的点遍历完后，返回遍历深度最大的值，这个思路复杂度太高，会存在大量的重复计算。
我们可以转为以每一个陆地作为起点遍历，每遇到一个海洋将其标记记录下来，直到所有海洋均被标记时，此时的遍历深度即为所求最大距离。


如案例一：
101
000
101

111
101
111
res=1

111
111
111
res=2
如案例二：
100
000
000

110
100
000
res=1

111
110
100
res=2

111
111
110
res=3

111
111
111
res=4

上代码：
class Solution {
public:
    const int directions[5] = {0, 1, 0, -1, 0};
    int maxDistance(vector<vector<int>>& grid) {
        int ret = 0;
        int N = grid.size();
        
        queue<pair<int, int>> q;
        // 将陆地(值为 1)的点入队
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (grid[i][j] == 1) {
                    q.push({i, j});
                }
            }
        }
        
        // 全是海洋或全是陆地
        if (q.size() == 0 || q.size() == N * N)
            return -1;

        while (!q.empty()) {
            int s = q.size();
            int r = 0;
            while (s != 0) {
                pair<int, int> front = q.front();
                q.pop();
                // 4 个方向遍历
                for (int i = 0; i < 4; i++) {
                    int nx = front.first + directions[i];
                    int ny = front.second + directions[i + 1];
                    if (nx >= N || ny >= N || nx < 0 || ny < 0 || grid[nx][ny] == 1)
                        continue;
                    r++;
                    // 这里没有新开二位数组做记录，而是直接在原数组上做标记
                    grid[nx][ny] = 1;
                    q.push({nx, ny});
                }
                s--;
            }
            if (r > 0)
                ret++;
        }
        
        return ret;
    }
};