题目难度：MEDIUM

n 座城市，从 0 到 n-1 编号，其间共有 n-1 条路线。

因此，要想在两座不同城市之间旅行只有唯一一条路线可供选择（路线网形成一颗树）。

去年，交通运输部决定重新规划路线，以改变交通拥堵的状况。

路线用 connections 表示，其中 connections[i] = [a, b] 表示从城市 a 到 b 的一条有向路线。

今年，城市 0 将会举办一场大型比赛，很多游客都想前往城市 0 。

请你帮助重新规划路线方向，使每个城市都可以访问城市 0 。

返回需要变更方向的最小路线数。

题目数据 保证 每个城市在重新规划路线方向后都能到达城市 0 。

 

示例 1：



输入：n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]
输出：3
解释：更改以红色显示的路线的方向，使每个城市都可以到达城市 0 。
示例 2：



输入：n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]
输出：2
解释：更改以红色显示的路线的方向，使每个城市都可以到达城市 0 。
示例 3：

输入：n = 3, connections = [[1,0],[2,0]]
输出：0
 

提示：

2 <= n <= 5 * 10^4
connections.length == n-1
connections[i].length == 2
0 <= connections[i][0], connections[i][1] <= n-1
connections[i][0] != connections[i][1]

思路：周赛第三题，BFS
建立一个pair数组保存边点及边权，顺着走边权为1，逆着走边权为0
然后从0顺序遍历BFS遍历边，套带布尔数组的队列形式BFS板子
枚举当前点的边，结果值（初值0）加上当前边权
最后返回结果值即可

上代码：
#define MP(x, y) make_pair(x, y)
const int MAXN = 5e4 + 50;
vector<pair<int, int> > edge[MAXN];
bool vis[MAXN];
queue<int> que;

class Solution {
public:
    int minReorder(int n, vector<vector<int>>& connections) {
        for (int i = 0; i <= n; i++){
            edge[i].clear();
            vis[i] = false;
        }
        
        for (auto e: connections){
            int u = e[0], v = e[1];
            edge[u].push_back(MP(v, 1));
            edge[v].push_back(MP(u, 0));
        }
        
        int ans = 0;
        while(!que.empty()) que.pop();
        vis[0] = true; que.push(0);
        
        while(!que.empty()){
            int x = que.front(); que.pop();
            for (auto e: edge[x]){
                int v = e.first, w = e.second;
                if (vis[v]) continue;
                ans += w;
                vis[v] = true; que.push(v);
            }
        }
        
        return ans;
    }
};
