题目难度：EASY

在 N * N 的网格上，我们放置一些 1 * 1 * 1  的立方体。

每个值 v = grid[i][j] 表示 v 个正方体叠放在对应单元格 (i, j) 上。

请你返回最终形体的表面积。

 

示例 1：

输入：[[2]]
输出：10
示例 2：

输入：[[1,2],[3,4]]
输出：34
示例 3：

输入：[[1,0],[0,2]]
输出：16
示例 4：

输入：[[1,1,1],[1,0,1],[1,1,1]]
输出：32
示例 5：

输入：[[2,2,2],[2,1,2],[2,2,2]]
输出：46
 

提示：

1 <= N <= 50
0 <= grid[i][j] <= 50

思路：BFS
接下来上题解区题解：
每个块的表面积为 6, 设总块数为n，那么总面积为 sum = 6*n。
设最终答案为 anw， 初始时 anw = sum。
然后枚举相邻的情况，每有两块相邻，anw 就会减 2 。
相邻可以分两种情况讨论：
第一种：顶面和底面相邻的，即堆在一起的。
设每堆的块数为H_iH 
i
​	
 ，那么有anw -= \sum max(0, H_i-1)*2anw−=∑max(0,H 
i
​	
 −1)∗2

第二种：前面和后面 或者 左面和右面相邻的。这种可以按堆相邻计算。
枚举堆的，设当前堆的高度为H_xH 
x
​	
 ，与其某个面相邻的堆的高度为H_yH 
y
​	
 
，那么有anw -= min(H_x, H_y)anw−=min(H 
x
​	
 ,H 
y
​	
 )。

执行用时 :
20 ms
, 在所有 C++ 提交中击败了
38.94%
的用户
内存消耗 :
8.9 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间不咋地，空间完杀！）

上代码：
class Solution {
public:
    int surfaceArea(vector<vector<int>>& grid) {
        int sum = 0;
        
        int dx[] = { 0,  0, -1,  1};
        int dy[] = {-1,  1,  0,  0};

        for(int i = 0, n = grid.size(); i < n; ++i) {
            for(int k = 0, m = grid[i].size(); k < m; ++k) {
                if(grid[i][k] <= 0 ) {
                    continue;
                }
                sum += grid[i][k]*4 + 2;
                for(int j = 0; j < 4; j++) {
                    int tx = i + dx[j], ty = k+dy[j];
                    if(0 <= tx && tx < n && 0 <= ty && ty < m) {
                        sum -= min(grid[i][k], grid[tx][ty]);
                    }
                }
            }
        }
        return sum;
    }
};