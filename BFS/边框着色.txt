题目难度：MEDIUM

给出一个二维整数网格 grid，网格中的每个值表示该位置处的网格块的颜色。

只有当两个网格块的颜色相同，而且在四个方向中任意一个方向上相邻时，它们属于同一连通分量。

连通分量的边界是指连通分量中的所有与不在分量中的正方形相邻（四个方向上）的所有正方形，或者在网格的边界上（第一行/列或最后一行/列）的所有正方形。

给出位于 (r0, c0) 的网格块和颜色 color，使用指定颜色 color 为所给网格块的连通分量的边界进行着色，并返回最终的网格 grid 。

 

示例 1：

输入：grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3
输出：[[3, 3], [3, 2]]
示例 2：

输入：grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3
输出：[[1, 3, 3], [2, 3, 3]]
示例 3：

输入：grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2
输出：[[2, 2, 2], [2, 1, 2], [2, 2, 2]]
 

提示：

1 <= grid.length <= 50
1 <= grid[0].length <= 50
1 <= grid[i][j] <= 1000
0 <= r0 < grid.length
0 <= c0 < grid[0].length
1 <= color <= 1000

思路：BFS
读不懂题...接下来上题解区题解：
(floodFill) `时间：O(n) & 空间：O(n)
本题相当于时间photoshop中的魔棒效果，把图像的边界抠出来。
边界特性：首先值等于初始值origin；四个方向至少有一个方向的元素不等于origin（或是边界）。
对于搜索到的位置，检查该点是否是边界，如果是边界则将其置为color。

执行用时 :
12 ms
, 在所有 C++ 提交中击败了
98.00%
的用户
内存消耗 :
15.4 MB
, 在所有 C++ 提交中击败了
6.67%
的用户
（时间绝杀！空间炸了）

上代码：
class Solution {
public:
    int n, m;
    int dx[4] = {0, 1, 0, -1};
    int dy[4] = {1, 0, -1, 0};
    
    vector<vector<bool>> used;
    
    bool inArea(int x, int y) {
        return x >= 0 && x < n && y >= 0 && y < m;
    }
    
  	// 返回1 代表这个方向的值是等于origin， 否则返回 0
    int dfs(vector<vector<int>>& grid, int x, int y, int origin, int color) {
        if (!inArea(x, y)) return 0;
        if (used[x][y]) return 1;
        if (grid[x][y] != origin) return 0;
        
        used[x][y] = true;
        int cnt = 0;
        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i], ny = y + dy[i];
            cnt += dfs(grid, nx, ny, origin, color);
        }
        if (cnt < 4) grid[x][y] = color;
        
        return 1;
    }
    
    vector<vector<int>> colorBorder(vector<vector<int>>& grid, int r0, int c0, int color) {
        n = grid.size();
        m = grid[0].size();
        used.resize(n, vector<bool>(m));
        dfs(grid, r0, c0, grid[r0][c0], color);
        return grid;
    }
};