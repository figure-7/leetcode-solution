题目难度：MEDIUM

你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' 。每个拨轮可以自由旋转：例如把 '9' 变为  '0'，'0' 变为 '9' 。每次旋转都只能旋转一个拨轮的一位数字。

锁的初始数字为 '0000' ，一个代表四个拨轮的数字的字符串。

列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。

字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。

 

示例 1:

输入：deadends = ["0201","0101","0102","1212","2002"], target = "0202"
输出：6
解释：
可能的移动序列为 "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202"。
注意 "0000" -> "0001" -> "0002" -> "0102" -> "0202" 这样的序列是不能解锁的，
因为当拨动到 "0102" 时这个锁就会被锁定。
示例 2:

输入: deadends = ["8888"], target = "0009"
输出：1
解释：
把最后一位反向旋转一次即可 "0000" -> "0009"。
示例 3:

输入: deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"
输出：-1
解释：
无法旋转到目标数字且不被锁定。
示例 4:

输入: deadends = ["0000"], target = "8888"
输出：-1
 

提示：

死亡列表 deadends 的长度范围为 [1, 500]。
目标数字 target 不会在 deadends 之中。
每个 deadends 和 target 中的字符串的数字会在 10,000 个可能的情况 '0000' 到 '9999' 中产生。

思路：BFS广搜
在进行封印转换时比较麻烦，没来得及写,大概也不会
具体思路见评论区代码注释

执行用时 :
196 ms
, 在所有 cpp 提交中击败了
76.55%
的用户
内存消耗 :
33.6 MB
, 在所有 cpp 提交中击败了
50.82%
的用户
（时间还行，空间一般）

上代码：
class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        unordered_set<string> deadlocks(deadends.begin(),deadends.end());  //所有锁定码存入哈希表，便于用count查找是否在其中
        if(deadlocks.count(target)!=0 || deadlocks.count("0000")!=0)  //目标为锁或者初始码为锁 直接跳出
            return -1;
        queue<string> q;   //队列q用于存放字符串
        q.push("0000");    
        unordered_set<string> visited;   //用于存放已经尝试过的值
        visited.insert("0000");
        vector<int> directs={-1,1};    //用于尝试 +1还是-1
        int res=0;       //存放旋转次数
        while(!q.empty()){    //判断队列是否为空
            int size=q.size();    //记录队列当前大小
            while(size-->0){
                auto t=q.front();  //t 出队一个元素
                q.pop();
                if(t==target) return res;  //如果找到目标 返回res
                for(int i=0;i<t.size();i++){  //尝试各各位数
                    for(auto direct:directs){   //+1 -1 两次尝试
                        string newWord=t;     //newWord用于尝试 +1 -1 
                        newWord[i]=(newWord[i]-'0'+10+direct)%10+'0';  
                        if(visited.count(newWord) || deadlocks.count(newWord)) continue;  //是否已经试过或者为锁码。是的话跳出本次循环
                        q.push(newWord);        //新值入队
                        visited.insert(newWord);    //标记已读
                    }
                }
            }
            res++;    //拨动次数加一
        }
        return -1;
    }
};