有 n 个城市，按从 0 到 n-1 编号。

给你一个边数组 edges，其中 edges[i] = [fromi, toi, weighti] 代表 fromi 和 toi 两个城市之间的双向加权边，距离阈值是一个整数 distanceThreshold。

返回能通过某些路径到达其他城市数目最少、且路径距离 最大 为 distanceThreshold 的城市。

如果有多个这样的城市，则返回编号最大的城市。

注意，连接城市 i 和 j 的路径的距离等于沿该路径的所有边的权重之和。

 

示例 1：



输入：n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
输出：3
解释：城市分布图如上。
每个城市阈值距离 distanceThreshold = 4 内的邻居城市分别是：
城市 0 -> [城市 1, 城市 2] 
城市 1 -> [城市 0, 城市 2, 城市 3] 
城市 2 -> [城市 0, 城市 1, 城市 3] 
城市 3 -> [城市 1, 城市 2] 
城市 0 和 3 在阈值距离 4 以内都有 2 个邻居城市，但是我们必须返回城市 3，因为它的编号最大。
示例 2：



输入：n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2
输出：0
解释：城市分布图如上。 
每个城市阈值距离 distanceThreshold = 2 内的邻居城市分别是：
城市 0 -> [城市 1] 
城市 1 -> [城市 0, 城市 4] 
城市 2 -> [城市 3, 城市 4] 
城市 3 -> [城市 2, 城市 4]
城市 4 -> [城市 1, 城市 2, 城市 3] 
城市 0 在阈值距离 4 以内只有 1 个邻居城市。
 

提示：

2 <= n <= 100
1 <= edges.length <= n * (n - 1) / 2
edges[i].length == 3
0 <= fromi < toi < n
1 <= weighti, distanceThreshold <= 10^4
所有 (fromi, toi) 都是不同的。

思路：周四第三题，BFS+SPFA（单源最短路径）
（没时间了。。。）
先把边放到边数组里，然后利用遍历点的数目次BFS函数内部SPFA算出所有点到其他点的单源最短路径
然后BFS最后把小于阈值的点的个数返回
之后看是否点的个数最小，小于等于就更新点（等于时返回编号大的）即可
最后返回得到的点即可

上代码：
class Solution {
public:
    queue<int> que;
    int dist[150], inQue[150];
    vector<pair<int, int> > edge[150];
    
    int bfs(int s, int threshold, int n){
        while(!que.empty()) que.pop();
        memset(inQue, 0, sizeof(inQue));
        memset(dist, -1, sizeof(dist));
        
        dist[s] = 0; inQue[s] = 1; que.push(s);
        
        while(!que.empty()){
            int x = que.front(); que.pop();
            for (auto e: edge[x]){
                int t = e.first, w = e.second;
                if (dist[t] == -1 || dist[t] > dist[x] + w){
                    dist[t] = dist[x] + w;
                    if (!inQue[t]){
                        inQue[t] = 1; 
                        que.push(t);
                    }
                }
            }
            inQue[x] = 0;
        }
        
        int ret = 0;
        for (int i = 0; i < n; i++){
            if (dist[i] == -1) continue;
            if (dist[i] <= threshold) ++ret;
        }
        
        return ret;
    }
    
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        for (int i = 0; i <= n; i++) edge[i].clear();
        for (auto e: edges){
            edge[e[0]].push_back(make_pair(e[1], e[2]));
            edge[e[1]].push_back(make_pair(e[0], e[2]));
        }
        
        int ans = -1, rec = n + 1;
        for (int i = 0; i < n; i++){
            int ret = bfs(i, distanceThreshold, n);
            if (ret <= rec) ans = i, rec = ret;
        }
        
        return ans;
    }
};
