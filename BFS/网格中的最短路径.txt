题目难度：HARD

给你一个 m * n 的网格，其中每个单元格不是 0（空）就是 1（障碍物）。
每一步，您都可以在空白单元格中上、下、左、右移动。

如果您 最多 可以消除 k 个障碍物，请找出从左上角 (0, 0) 到右下角 (m-1, n-1) 的最短路径，并返回通过该路径所需的步数。
如果找不到这样的路径，则返回 -1。

 

示例 1：

输入： 
grid = 
[[0,0,0],
 [1,1,0],
 [0,0,0],
 [0,1,1],
 [0,0,0]], 
k = 1
输出：6
解释：
不消除任何障碍的最短路径是 10。
消除位置 (3,2) 处的障碍后，最短路径是 6 。该路径是 (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2).
 

示例 2：

输入：
grid = 
[[0,1,1],
 [1,1,1],
 [1,0,0]], 
k = 1
输出：-1
解释：
我们至少需要消除两个障碍才能找到这样的路径。
 

提示：

grid.length == m
grid[0].length == n
1 <= m, n <= 40
1 <= k <= m*n
grid[i][j] == 0 or 1
grid[0][0] == grid[m-1][n-1] == 0


思路：周赛第四题 ，利用BFS四象封印来解（有点像dp）
首先针对障碍，再加一维变为三维数组，代表走到的i行j列障碍有k个的情况
初始化dp[0][0][0]为0（没走）
先把000放进队列，然后针对四象三种情况
1：该点走过了，不进行运算（这里也就是我常用的bool数组判定），代码里直接用函数值判定了
2：该点是障碍，将第三个值加一（障碍数加一），然后将数组值加一
3：该点不是障碍，将数组值加一
然后针对障碍数，遍历符合范围内到终点的数组值（即dist[n - 1][m - 1][i]，i变）取最小的值返回即可

上代码：
#define MP(x, y, z) make_pair(make_pair(x, y), z)

int dx[4] = {0, -1, 0, 1};
int dy[4] = {1, 0, -1, 0};
int dist[50][50][2000];
queue<pair<pair<int, int>, int>> que;

class Solution {
public:
    int shortestPath(vector<vector<int>>& grid, int k) {
        int n = grid.size(), m = grid[0].size();
        
        while(!que.empty()) que.pop();
        memset(dist, -1, sizeof(dist));
        dist[0][0][0] = 0;
        que.push(MP(0, 0, 0));
        
        while(!que.empty()){
            int x = que.front().first.first, y = que.front().first.second, p = que.front().second;
            que.pop();
            
            for (int kk = 0; kk < 4; kk++){
                int tx = x + dx[kk], ty = y + dy[kk];
                if (tx < 0 || tx >= n || ty < 0 || ty >= m) continue;
                int tp = p + grid[tx][ty];
                if (tp <= k && dist[tx][ty][tp] == -1){
                    dist[tx][ty][tp] = dist[x][y][p] + 1;
                    que.push(MP(tx, ty, tp));
                }
            }
        }
        
        // for (int i = 0; i < n; i++){
        //     for (int j = 0; j < m; j++){
        //         printf("%d/%d/%d ", dist[i][j][0], dist[i][j][1], dist[i][j][2]);
        //     }
        //     printf("\n");
        // }
        
        int ans = -1;
        for (int i = 0; i <= k; i++){
            if (dist[n - 1][m - 1][i] != -1){
                if (ans == -1 || ans > dist[n - 1][m - 1][i]) ans = dist[n - 1][m - 1][i];
            }
        }
        
        return ans;
    }
};