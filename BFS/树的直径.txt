题目难度：MEDIUM

给你这棵「无向树」，请你测算并返回它的「直径」：这棵树上最长简单路径的 边数。

我们用一个由所有「边」组成的数组 edges 来表示一棵无向树，其中 edges[i] = [u, v] 表示节点 u 和 v 之间的双向边。

树上的节点都已经用 {0, 1, ..., edges.length} 中的数做了标记，每个节点上的标记都是独一无二的。

 

示例 1：



输入：edges = [[0,1],[0,2]]
输出：2
解释：
这棵树上最长的路径是 1 - 0 - 2，边数为 2。
示例 2：



输入：edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]
输出：4
解释： 
这棵树上最长的路径是 3 - 2 - 1 - 4 - 5，边数为 4。
 

提示：

0 <= edges.length < 10^4
edges[i][0] != edges[i][1]
0 <= edges[i][j] <= edges.length
edges 会形成一棵无向树

思路：两边bfs，先从0节点开始搜索，搜索到一个最远的路径
然后最远的节点开始搜索，搜索到一个最短的路径就是结果了
利用二维数组保存想相连的节点，一个作为下标，另一个作为值保存

上代码：
class Solution {
public:
    vector<vector<int> > g;
    int node;
    int ans;
    void bfs(int u, int fa, int d) {
        if(d>ans) {
            ans = d;
            node = u;
        }
        for(int v:g[u]) {
            if(v==fa) continue;
            bfs(v,u,d+1);
        }
    }
    int treeDiameter(vector<vector<int>>& edges) {
        int n = edges.size()+1;
        g.assign(n,vector<int>());
        for(auto e:edges) {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        ans=0;
        bfs(0,-1,0);
        ans=0;
        bfs(node,-1,0);
        return ans;
    }
};