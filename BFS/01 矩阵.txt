题目难度：MEDIUM

思路：BFS+预处理或DP
首先我用BFS暴力四象封印结果超时，（看了数据范围其实就能知道），然后就不太会了
接下来上官方题解（C++的了，难得）：

方法 2：广度优先搜索
想法

一种更好的暴力：

搜寻整个矩阵太过于浪费，因此我们使用广度优先搜索去限制搜索空间。
只要 0 出现在广度优先搜索时，我们就知道这个 0 是最近的。
因此，只需要考虑下一个 1。

再次考虑：

但在这种方法中，我们只能够更新一个 1 的距离，这可能在某种程度上，更大程度提高方法 1 的复杂度。
但是，如果我们从 0 开始广度优先搜索并且更新路径上所有的 1，这会优化我们的算法。

算法

对于广度优先搜索，保存一个队列 q 维护下一个需要检查的点。

我们将所有的 0 放入 q 中。

初始地，对于每个为 0 的节点距离都是 1，对于所有的 1 都是 INT_MAX，会根据广搜的结果更新。

弹出队列中的元素，检查它的邻居。
如果对于邻居 {i,j} 新计算的距离更小，将 {i,j} 加入队列 q 中同时更新距离 dist[i][j]。

C++
vector<vector<int> > updateMatrix(vector<vector<int> >& matrix)
{
    int rows = matrix.size();
    if (rows == 0)
        return matrix;
    int cols = matrix[0].size();
    vector<vector<int> > dist(rows, vector<int>(cols, INT_MAX));
    queue<pair<int, int> > q;
    for (int i = 0; i < rows; i++)
        for (int j = 0; j < cols; j++)
            if (matrix[i][j] == 0) {
                dist[i][j] = 0;
                q.push({ i, j }); //Put all 0s in the queue.
            }

    int dir[4][2] = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };
    while (!q.empty()) {
        pair<int, int> curr = q.front();
        q.pop();
        for (int i = 0; i < 4; i++) {
            int new_r = curr.first + dir[i][0], new_c = curr.second + dir[i][1];
            if (new_r >= 0 && new_c >= 0 && new_r < rows && new_c < cols) {
                if (dist[new_r][new_c] > dist[curr.first][curr.second] + 1) {
                    dist[new_r][new_c] = dist[curr.first][curr.second] + 1;
                    q.push({ new_r, new_c });
                }
            }
        }
    }
    return dist;
}

（边界控制好巧妙啊）

复杂度分析

时间复杂度：O(r \cdot c)O(r⋅c)，因为每个节点只会加入队列一次，不会多次加入。
空间复杂度：O(r \cdot c)O(r⋅c)，比方法 1 需要多一个队列开销。

方法 3：动态规划
想法

对于一个节点来说，它到 0 的距离可以通过邻居的最近距离计算，在这种情况下最近距离是邻居的距离 + 1。
因此，这就让我们想到了动态规划！

对于每个 1，到 0 的最短路径可能从任意方向。
所以我们需要检查所有 4 个方向。
在从上到下的迭代中，我们需要检查左边和上方的最短路径；
我们还需要另一个从下往上的循环，检查右边和下方的方向。

算法

从上至下、从左至右迭代整个矩阵：

更新

\text{dist}[i][j]=\min(\text{dist}[i][j],\min(\text{dist}[i][j-1],\text{dist}[i-1][j])+1)dist[i][j]=min(dist[i][j],min(dist[i][j−1],dist[i−1][j])+1)

最近距离考虑上方邻居和左侧邻居距离 + 1，这在前面的迭代中已经计算完成。

从下到上、从右至左迭代整个矩阵：

更新

\text{dist}[i][j]=\min(\text{dist}[i][j],\min(\text{dist}[i][j+1],\text{dist}[i+1][j])+1)dist[i][j]=min(dist[i][j],min(dist[i][j+1],dist[i+1][j])+1)

最近距离考虑下方邻居和右侧邻居距离 + 1，这在前面的迭代中已经计算完成。

C++
vector<vector<int> > updateMatrix(vector<vector<int> >& matrix)
{
    int rows = matrix.size();
    if (rows == 0)
        return matrix;
    int cols = matrix[0].size();
    vector<vector<int> > dist(rows, vector<int>(cols, INT_MAX - 100000));

    //First pass: check for left and top
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (matrix[i][j] == 0)
                dist[i][j] = 0;
            else {
                if (i > 0)
                    dist[i][j] = min(dist[i][j], dist[i - 1][j] + 1);
                if (j > 0)
                    dist[i][j] = min(dist[i][j], dist[i][j - 1] + 1);
            }
        }
    }

    //Second pass: check for bottom and right
    for (int i = rows - 1; i >= 0; i--) {
        for (int j = cols - 1; j >= 0; j--) {
            if (i < rows - 1)
                dist[i][j] = min(dist[i][j], dist[i + 1][j] + 1);
            if (j < cols - 1)
                dist[i][j] = min(dist[i][j], dist[i][j + 1] + 1);
        }
    }

    return dist;
}

复杂度分析

时间复杂度：O(r \cdot c)O(r⋅c)，两边扫描各为 r \cdot cr⋅c。
空间复杂度：O(r \cdot c)O(r⋅c)，除了 dist vector<vector<int> > 无需额外空间。

BFS
执行用时 :
228 ms
, 在所有 cpp 提交中击败了
77.03%
的用户
内存消耗 :
23.4 MB
, 在所有 cpp 提交中击败了
60.39%
的用户
（时空都不错）

上代码BFS：
class Solution {
public:
    vector<vector<int> > updateMatrix(vector<vector<int> >& matrix)
    {
        int rows = matrix.size();
        if (rows == 0)
            return matrix;
        int cols = matrix[0].size();
        vector<vector<int> > dist(rows, vector<int>(cols, INT_MAX));
        queue<pair<int, int> > q;
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                if (matrix[i][j] == 0) {
                    dist[i][j] = 0;
                    q.push({ i, j }); //Put all 0s in the queue.
                }

        int dir[4][2] = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };
        while (!q.empty()) {
            pair<int, int> curr = q.front();
            q.pop();
            for (int i = 0; i < 4; i++) {
                int new_r = curr.first + dir[i][0], new_c = curr.second + dir[i][1];
                if (new_r >= 0 && new_c >= 0 && new_r < rows && new_c < cols) {
                    if (dist[new_r][new_c] > dist[curr.first][curr.second] + 1) {
                        dist[new_r][new_c] = dist[curr.first][curr.second] + 1;
                        q.push({ new_r, new_c });
                    }
                }
            }
        }
        return dist;
    }
};

DP
执行用时 :
212 ms
, 在所有 cpp 提交中击败了
95.35%
的用户
内存消耗 :
20.8 MB
, 在所有 cpp 提交中击败了
94.23%
的用户
（双杀了）

上代码DP：
class Solution {
public:
    vector<vector<int> > updateMatrix(vector<vector<int> >& matrix)
    {
        int rows = matrix.size();
        if (rows == 0)
            return matrix;
        int cols = matrix[0].size();
        vector<vector<int> > dist(rows, vector<int>(cols, INT_MAX - 100000));

        //First pass: check for left and top
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] == 0)
                    dist[i][j] = 0;
                else {
                    if (i > 0)
                        dist[i][j] = min(dist[i][j], dist[i - 1][j] + 1);
                    if (j > 0)
                        dist[i][j] = min(dist[i][j], dist[i][j - 1] + 1);
                }
            }
        }

        //Second pass: check for bottom and right
        for (int i = rows - 1; i >= 0; i--) {
            for (int j = cols - 1; j >= 0; j--) {
                if (i < rows - 1)
                    dist[i][j] = min(dist[i][j], dist[i + 1][j] + 1);
                if (j < cols - 1)
                    dist[i][j] = min(dist[i][j], dist[i][j + 1] + 1);
            }
        }

        return dist;
    }
};