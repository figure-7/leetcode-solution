题目难度：HARD

给你一个 m * n 的矩阵 mat，以及一个整数 k ，矩阵中的每一行都以非递减的顺序排列。

你可以从每一行中选出 1 个元素形成一个数组。

返回所有可能数组中的第 k 个 最小 数组和。

 

示例 1：

输入：mat = [[1,3,11],[2,4,6]], k = 5
输出：7
解释：从每一行中选出一个元素，前 k 个和最小的数组分别是：
[1,2], [1,4], [3,2], [3,4], [1,6]。
其中第 5 个的和是 7 。  
示例 2：

输入：mat = [[1,3,11],[2,4,6]], k = 9
输出：17
示例 3：

输入：mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7
输出：9
解释：从每一行中选出一个元素，前 k 个和最小的数组分别是：
[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]。
其中第 7 个的和是 9 。 
示例 4：

输入：mat = [[1,1,10],[2,2,9]], k = 7
输出：12
 

提示：

m == mat.length
n == mat.length[i]
1 <= m, n <= 40
1 <= k <= min(200, n ^ m)
1 <= mat[i][j] <= 5000
mat[i] 是一个非递减数组

思路：周赛第四题，BFS+优先队列+结构体+哈希表
初始化指针再每行的首位值，然后每次取一个当前值最小的
用哈希表检查当前节点是否生成后继节点
如果没有生成就计数，到第K个就返回
否则让该节点生成后继状态

上代码：
const int INF = 1e9;
int n, m;
vector<vector<int>> mat;
struct Node{
    int cur[41], sum = 0;
    
    Node(){
        sum = 0;
        for (int i = 0; i < n; i++)
            sum = sum + mat[i][cur[i] = 0];
    }
    
    Node getNext(int k){
        Node ret;
        for (int i = 0; i < n; i++) ret.cur[i] = cur[i];
        ret.cur[k]++; ret.sum = 0;
        for (int i = 0; i < n; i++) ret.sum += mat[i][ret.cur[i]];
        return ret;
    }
    
    string i2s(int x){
        string ret = "";
        while(x){
            ret += (char)(x % 10 + '0');
            x /= 10;
        }
        return ret;
    }
    
    string getString(){
        string ret = "";
        for (int i = 0; i < n; i++)
            ret += "#" + i2s(cur[i]);
        return ret;
    }
    
    friend bool operator < (const Node &a, const Node &b){
        return a.sum > b.sum;
    }
};

set<string> hash_que;
priority_queue<Node> que;

class Solution {
public:
    int kthSmallest(vector<vector<int>>& v, int k) {
        mat = v; n = mat.size(); m = mat[0].size();
            
        while(!que.empty()) que.pop();
        que.push(Node()); hash_que.clear();
        
        int cnt = 0;
        while(!que.empty()){
            Node x = que.top(); que.pop();
            if (hash_que.insert(x.getString()).second){
                ++cnt;
                // printf("%d\n", x.sum);
                if (cnt == k) return x.sum;
                for (int i = 0; i < n; i++)
                    if (x.cur[i] + 1 < m) que.push(x.getNext(i));
            }
        }
        
        return 0;
    }
};