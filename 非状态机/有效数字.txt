题目难度：HARD

验证给定的字符串是否可以解释为十进制数字。


例如:

"0"?=>?true
" 
0.1 "?=>?true

"abc"?=>?false

"1 a"?=>?false

"2e10"?=>?true

" -90e3? ?"?=>?true

" 1e"?=>?false

"e3"?=>?false

" 6e-1"?=>?true

" 99e2.5?"?=>?false

"53.5e93"?=>?true

" --6 "?=>?false

"-+3"?=>?false

"95a54e53"?=>?false



说明:?我们有意将问题陈述地比较模糊。
在实现代码之前，你应当事先思考所有可能的情况。
这里给出一份可能存在于有效十进制数字中的字符列表：

数字 0-9
指数 - "e"
正/负号 - "+"/"-"
小数点 - "."
当然，在输入中，这些字符的上下文也很重要。



更新于 2015-02-10:
C++函数的形式已经更新了。如果你仍然看见你的函数接收?const char * 类型的参数，请点击重载按钮重置你的代码。

思路：本题可以采用《编译原理》里面的确定的有限状态机（DFA）解决。
构造一个DFA并实现，构造方法可以先写正则表达式，然后转为 DFA，也可以直接写，我就是直接写的，虽然大概率不会是最简结构（具体请参考《编译器原理》图灵出版社），不过不影响解题。
DFA 作为确定的有限状态机，比 NFA 更加实用，因为对于每一个状态接收的下一个字符，DFA 能确定唯一一条转换路径，所以使用简单的表驱动的一些方法就可以实现，并且只需要读一遍输入流，比起 NFA 需要回读在速度上会有所提升。
构建出来的状态机如封面图片所示（红色为 终止状态，蓝色为 中间状态）。
根据《编译原理》的解释，DFA 从状态 0 接受串 s 作为输入。
当s耗尽的时候如果当前状态处于中间状态，则拒绝；
如果到达终止状态，则接受。
然后，根据 DFA 列出如下的状态跳转表，之后我们就可以采用 表驱动法 进行编程实现了。
需要注意的是，这里面多了一个状态 8，是用于处理串后面的若干个多余空格的。
所以，所有的终止态都要跟上一个状态 8。
其中，有一些状态标识为-1，是表示遇到了一些意外的字符，可以直接停止后续的计算。
状态跳转表如下：

state	blank	+/-	0-9	.	e	other
0	0	1	6	2	-1	-1
1	-1	-1	6	2	-1	-1
2	-1	-1	3	-1	-1	-1
3	8	-1	3	-1	4	-1
4	-1	7	5	-1	-1	-1
5	8	-1	5	-1	-1	-1
6	8	-1	6	3	4	-1
7	-1	-1	5	-1	-1	-1
8	8	-1	-1	-1	-1	-1
状态图：

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
88.22%
的用户
内存消耗 :
8.1 MB
, 在所有 C++ 提交中击败了
90.77%
的用户

上代码：
class Solution {
public:
    bool isNumber(string s) {
        bool has_dot = false;
        bool has_e = false;
        bool has_front_num = false;
        int i = 0;
        // skip front space
        while (s[i] == ' ') ++i;
        // check first char
        if (s[i] == '.') {
            has_dot = true;
        } else if (s[i] >= '0' && s[i] <= '9') {
            has_front_num = true;
        } else if (s[i] != '+' && s[i] != '-') {
            return false;
        }
        ++i;
        // check char before 'e'
        while (i < s.size() && ((s[i] >= '0' && s[i] <= '9') || 
                (has_front_num && !has_e && s[i] == 'e') ||
                (!has_e && !has_dot && s[i] == '.'))) {
            if (s[i] == 'e') {
                has_e = true;
                ++i;
                break;
            } else if (s[i] == '.') {
                has_dot = true;
            } else {
                has_front_num = true; 
            }
            ++i;
        }
        // check after 'e'
        if (has_e) {
            if (i >= s.size())
                return false;
            bool has_tail_num = false;
            if (s[i] >= '0' && s[i] <= '9') {
                has_tail_num = true;
            } else if (s[i] != '-' && s[i] != '+') {
                return false;
            }
            ++i;
            while (i < s.size() && s[i] >= '0' && s[i] <= '9') {
                has_tail_num = true;
                ++i;
            }
            if (!has_tail_num)
                return false;
        }
        // skip tail space
        while (i < s.size() && s[i] == ' ') ++i;
        // final result
        return has_front_num && i >= s.size();
    }
};