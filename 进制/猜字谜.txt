题目难度：HARD

外国友人仿照中国字谜设计了一个英文版猜字谜小游戏，请你来猜猜看吧。

字谜的迷面 puzzle 按字符串形式给出，如果一个单词 word 符合下面两个条件，那么它就可以算作谜底：

单词 word 中包含谜面 puzzle 的第一个字母。
单词 word 中的每一个字母都可以在谜面 puzzle 中找到。
例如，如果字谜的谜面是 "abcdefg"，那么可以作为谜底的单词有 "faced", "cabbage", 和 "baggage"；
而 "beefed"（不含字母 "a"）以及 "based"（其中的 "s" 没有出现在谜面中）。
返回一个答案数组 answer，数组中的每个元素 answer[i] 是在给出的单词列表 words 中可以作为字谜迷面 puzzles[i] 所对应的谜底的单词数目。

 

示例：

输入：
words = ["aaaa","asas","able","ability","actt","actor","access"], 
puzzles = ["aboveyz","abrodyz","abslute","absoryz","actresz","gaswxyz"]
输出：[1,1,3,2,4,0]
解释：
1 个单词可以作为 "aboveyz" 的谜底 : "aaaa" 
1 个单词可以作为 "abrodyz" 的谜底 : "aaaa"
3 个单词可以作为 "abslute" 的谜底 : "aaaa", "asas", "able"
2 个单词可以作为 "absoryz" 的谜底 : "aaaa", "asas"
4 个单词可以作为 "actresz" 的谜底 : "aaaa", "asas", "actt", "access"
没有单词可以作为 "gaswxyz" 的谜底，因为列表中的单词都不含字母 'g'。
 

提示：

1 <= words.length <= 10^5
4 <= words[i].length <= 50
1 <= puzzles.length <= 10^4
puzzles[i].length == 7
words[i][j], puzzles[i][j] 都是小写英文字母。
每个 puzzles[i] 所包含的字符都不重复。

思路：位运算+哈希表
接下来上题解区题解：
第 152 次周赛第四题，比赛时没做出来，看了一下第一名大佬的代码，%%%，同时分享下思路。

首先看这道题，最普通的思路是对每个 puzzle，都对 words 遍历一遍，方法很直观，但一定超时。words.length * puzzles.length 会达到 10^910 
9
 。

那么问题主要是，用怎么样的一种方法可以大大缩短时间？

其实我们可以发现一些规律和 题目给我们的暗示：

对于 word，其实每个 word 代表了一种模式，abc 和 aaaaabbbccc 是等价的。 
我们需要提取出这种模式(位运算)
对于一个 puzzle，有两种遍历谜底的思路。 一是遍历 words，另一种是遍历自己的模式子集。
题目给我们的暗示是 puzzles[i].length == 7。这就意味着一个 puzzle 的模式，子集不会超过 2^72 
7
 ，2^7=1282 
7
 =128，因此我们遍历 puzzle 模式的子集，采用 map 映射的方式统计谜底个数。
那么，如何将一个字符串转化为他所对应的模式? 
这就可以巧妙地用到位运算，字母只有26个，因此可以很轻松的将每个字符串转化为一个 int 型数据。
同样，每个 puzzle 字符串也可以转化为这样的模式。

接下来的问题是，如何遍历 puzzle 模式的子集?
大佬用了一种极其巧妙的方式。 (其中k为一个 puzzle 的模式数)
for (int j = k; j; j = (j - 1)&k) {}

这样遍历的数值就是，比如 k = 0101k=0101，也就是 55，那么遍历的数据会是 01010101，01000100，00010001，遍历出了它的子集，然后判断这些子集是否字谜条件，如果满足，就做和。

当然，这道题的这个思路也可以不用位运算来实现，但位运算使得算法(或者说代码)优美了很多。

分析时间复杂度，我们知道 puzzle 的子集个数不到 128128 个，因此把他作为常数的话，此算法的 时间复杂度为 O(n\ log\ n)O(n log n)。nn 为 max(words.length, puzzles.length)

执行用时 :
352 ms
, 在所有 C++ 提交中击败了
62.03%
的用户
内存消耗 :
42.8 MB
, 在所有 C++ 提交中击败了
34.88%
的用户
（时间一般，空间不咋地）

上代码：
class Solution {
public:
    vector<int> ans;  // 存储答案
    map<int, int> bit2cnt;  // "字符串word转化为一个数(位运算): 该模式出现的次数"  的映射
        
    vector<int> findNumOfValidWords(vector<string>& words, vector<string>& puzzles) {
        // 统计每个word模式的数量, map形式保存, 位运算进行操作
        for (int i = 0; i < words.size(); ++i) {
            int k = 0;
            for (int j = 0; j < words[i].size(); ++j) {
                k |= (1 << (words[i][j] - 'a'));
            }
            bit2cnt[k] += 1;
        }
        
        for (int i = 0; i < puzzles.size(); ++i) {
            ans.push_back(0);
            int k = 0;
            for (int j = 0; j < puzzles[i].size(); ++j) {  // 将puzzles的字符串转化为一个 数字
                k |= (1 << (puzzles[i][j] - 'a'));
            }
            for (int j = k; j; j = (j - 1)&k) {  // 遍历 该数字 出现1 的子集, 比如0101 遍历到 0101, 0100, 0001. 再判断首字母.
                if ((1 << (puzzles[i][0] - 'a')) & j) ans[i] += bit2cnt[j];
            }
        }
        return ans;
    }
};