题目难度：MEDIUM

给出基数为 -2 的两个数 arr1 和 arr2，返回两数相加的结果。

数字以 数组形式 给出：数组由若干 0 和 1 组成，按最高有效位到最低有效位的顺序排列。例如，arr = [1,1,0,1] 表示数字 (-2)^3 + (-2)^2 + (-2)^0 = -3。数组形式 的数字也同样不含前导零：以 arr 为例，这意味着要么 arr == [0]，要么 arr[0] == 1。

返回相同表示形式的 arr1 和 arr2 相加的结果。两数的表示形式为：不含前导零、由若干 0 和 1 组成的数组。

 

示例：

输入：arr1 = [1,1,1,1,1], arr2 = [1,0,1]
输出：[1,0,0,0,0]
解释：arr1 表示 11，arr2 表示 5，输出表示 16 。
 

提示：

1 <= arr1.length <= 1000
1 <= arr2.length <= 1000
arr1 和 arr2 都不含前导零
arr1[i] 为 0 或 1
arr2[i] 为 0 或 1

思路：先将两数组反转，从后向前判断
值都为2无借位，两值和为1有借位
最后将结果放入数组arr3中，把尾部0全部去掉
反转即可

代码：
class Solution {
public:
  vector<int> addNegabinary(vector<int>& arr1, vector<int>& arr2) {
    vector<int> arr3;
    reverse(arr1.begin(), arr1.end());
    reverse(arr2.begin(), arr2.end());
    int carry = 0;                      //保存进位
    for (int i = 0; i < max(arr1.size(), arr2.size()) || carry != 0; i++) {
      int a1 = i < arr1.size()? arr1[i]: 0;
      int a2 = i < arr2.size()? arr2[i]: 0;
      int a3 = a1 + a2 + carry;
      carry = a3 / (-2);
      a3 %= -2;
      if (a3 < 0) carry++, a3 = -a3;
      arr3.push_back(a3);
    }
    while (arr3.size() > 1 && arr3.back() == 0) arr3.pop_back();    //判断尾数字是否为0，为0就舍去
    return arr3;
  }
};