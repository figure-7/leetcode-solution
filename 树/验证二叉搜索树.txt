题目难度：MEDIUM
给定一个二叉树，判断其是否是一个有效的二叉搜索树。

假设一个二叉搜索树具有如下特征：

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。
示例 1:

输入:
    2
   / \
  1   3
输出: true
示例 2:

输入:
    5
   / \
  1   4
     / \
    3   6
输出: false
解释: 输入为: [5,1,4,null,null,3,6]。
     根节点的值为 5 ，但是其右子节点值为 4 。

思路：二叉搜索树性质：中序遍历为从小到大有序序列！！！！
后面就不详细说了，（看到这句话后自己编的，我要是早点知道该多好wa~）
执行用时 : 20 ms, 在Validate Binary Search Tree的C++提交中击败了97.19% 的用户
内存消耗 : 20.8 MB, 在Validate Binary Search Tree的C++提交中击败了33.15% 的用户
上代码：

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> aim;
    bool isValidBST(TreeNode* root) {
        if(root==NULL) {
            return true;
        }
        DFS(root,aim);
        for(int i=0; i<aim.size()-1; i++) {
            if(aim[i] >= aim[i+1]) {
                return false;
            }
        }
        return true;
    }
    void DFS(TreeNode* r, vector<int>& a) {
        if(r->left) {
            DFS(r->left,a);
        }
        a.push_back(r->val);
        if(r->right) {
            DFS(r->right,a);
        }
    }
};