题目难度：MEDIUM

有两位极客玩家参与了一场「二叉树着色」的游戏。游戏中，给出二叉树的根节点 root，树上总共有 n 个节点，且 n 为奇数，其中每个节点上的值从 1 到 n 各不相同。

 

游戏从「一号」玩家开始（「一号」玩家为红色，「二号」玩家为蓝色），最开始时，

「一号」玩家从 [1, n] 中取一个值 x（1 <= x <= n）；

「二号」玩家也从 [1, n] 中取一个值 y（1 <= y <= n）且 y != x。

「一号」玩家给值为 x 的节点染上红色，而「二号」玩家给值为 y 的节点染上蓝色。

 

之后两位玩家轮流进行操作，每一回合，玩家选择一个他之前涂好颜色的节点，将所选节点一个 未着色 的邻节点（即左右子节点、或父节点）进行染色。

如果当前玩家无法找到这样的节点来染色时，他的回合就会被跳过。

若两个玩家都没有可以染色的节点时，游戏结束。着色节点最多的那位玩家获得胜利 ??。

 

现在，假设你是「二号」玩家，根据所给出的输入，假如存在一个 y 值可以确保你赢得这场游戏，则返回 true；若无法获胜，就请返回 false。

 

示例：



输入：root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3
输出：True
解释：第二个玩家可以选择值为 2 的节点。
 

提示：

二叉树的根节点为 root，树上由 n 个节点，节点上的值从 1 到 n 各不相同。
n 为奇数。
1 <= x <= n <= 100

思路：方法就是用两层DFS实现，先计算第一个人下第一个值的节点位置，这是一层DFS。
找到之后调用第二层DFS，计算出该枚棋子的左右子节点数目和，因为只能相邻着下。
此外还有除该节点及其左右节点和，即向父亲节点搜索包括另一边的
第二个人能获得棋子最大值肯定在这三者之间
最后只要统计出所得到的左子节点和，与右子节点和，以及除该节点及其左右节点和，的所有节点中的最大值即可，与第一个玩家的棋子数比较。
第一个玩家的棋子数只要一减去打一个玩家的最大值剩下的就是了
这里下面的代码是通过计算n>>1，即n/2,跟一半比，也一样，挺秀的~~~

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int work(TreeNode* root)
    {
        if(!root)return 0;
        return work(root->left)+work(root->right)+1;
    }
    void dfs(TreeNode* root,int x,int &ls,int &rs)
    {
        if(!root)return;
        if(root->val==x)
        {
            ls=work(root->left);
            rs=work(root->right);
        }
        else
        {
            dfs(root->left,x,ls,rs);
            dfs(root->right,x,ls,rs);
        }
    }
    bool btreeGameWinningMove(TreeNode* root, int n, int x) {
        int ls,rs;
        dfs(root,x,ls,rs);
        printf("%d",n>>1);
        return max(max(ls,rs),n-ls-rs-1)>(n>>1);
    }
};