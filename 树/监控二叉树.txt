题目难度：HARD

给定一个二叉树，我们在树的节点上安装摄像头。

节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。

计算监控树的所有节点所需的最小摄像头数量。

 

示例 1：



输入：[0,0,null,0,0]
输出：1
解释：如图所示，一台摄像头足以监控所有节点。
示例 2：



输入：[0,0,null,0,null,0,null,null,0]
输出：2
解释：需要至少两个摄像头来监视树的所有节点。 
上图显示了摄像头放置的有效位置之一。

提示：

给定树的节点数的范围是 [1, 1000]。
每个节点的值都是 0。

思路：树+DFS+贪心
接下来上题解区题解：
**一共有三种状态分别为:
状态一:安装了摄像头;状态二:被监视;状态三:未被监视

每一个节点必然处于三种状态之一**

1、空节点无需监管，默认返回状态2
2、叶子节点处于树的边界，从贪心算法的角度必定不会安装摄像头，默认返回状态3
3、非叶节点需要考虑左孩子节点的状态与右孩子节点的状态，两两组合一共有9种状态分别为
l:1 r:1 ; l:1 r:2 ; l:1 r:3 ; l:2 r:1 ; l:2 r:2 ; l:2 r:3 ; l:3 r:1; l:3 r:2 ; l:3 r:3 (其中有几个状态可以合并，此处不讲)
当某一个节点安了摄像机时，则返回状态一，全局num++;即可解决问题

执行用时 :
16 ms
, 在所有 C++ 提交中击败了
62.40%
的用户
内存消耗 :
21.3 MB
, 在所有 C++ 提交中击败了
10.00%
的用户
（时间一般，空间炸了）

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int num=0;
    int tanxin(TreeNode* root)
    {
        if(root)
        {
            if(root->left==NULL&&root->right==NULL)
                return 3;
            else
            {
                int left=tanxin(root->left);
                int right=tanxin(root->right);
                if(left==1&&right==1)
                {
                    return 2;
                }
                else if(left==1&&right==2)
                {
                    return 2;
                }
                else if(left==2&&right==1)
                {
                    return 2;
                }
                else if(left==2&&right==2)
                {
                    return 3;
                }
                else if(left==2&&right==3)
                {
                    ++num;return 1;
                }
                else if(left==3&&right==2)
                {
                    ++num;return 1;
                }
                else if(left==1&&right==3)
                {
                    ++num;return 1;
                }
                else if(left==3&&right==1)
                {
                    ++num;return 1;
                }
                else if(left=3&&right==3)
                {
                    ++num;return 1;
                }
            }   
        }
        return 2;
    }
    int minCameraCover(TreeNode* root) {
        if(tanxin(root)==3)
            return num+1;
        return num;
    }
};