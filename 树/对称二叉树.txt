题目难度：EASY
给定一个二叉树，检查它是否是镜像对称的。

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3
但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3
思路：先从头开始，判断有无左右子节点，都没有就返回true;
		只有一个就返回false;
都有就在向下判断，1.左叶子的左侧和右叶子的右侧;
		2.左叶子的右侧和右叶子的左侧;
		3.该位置左右孩子的值是否相等。
自己写用的数组，结果越界严重（是真的严重：死神界限DEAD...）
上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(!root) {
            return true;
        }
        return Helper(root->left, root->right);
    }
    bool Helper(TreeNode* left, TreeNode* right) {
        if(left == NULL&&right == NULL) {
            return true;
        }
        else if(left == NULL||right == NULL) {
            return false;
        }
        bool cond1 = left->val == right->val;
        bool cond2 = Helper(left->left, right->right);
        bool cond3 = Helper(left->right, right->left);
        return cond1&&cond2&&cond3;
    }
};