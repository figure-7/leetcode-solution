题目难度：MEDIUM
二叉树的中序遍历
给定一个二叉树，返回它的中序 遍历。

示例:

输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]
进阶: 递归算法很简单，你可以通过迭代算法完成吗？
思路：先不断向左遍历节点，
不为空就进栈，
若为空取栈顶的节点，看有没有右节点，有就进栈，
同时栈顶的节点放入数组里
重复循环直至结束。

之前按照自己思路试了多遍也没出来，，WWWW~~~

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> vals;
        if(root==NULL) {
            return vals;
        }
        vector<TreeNode*> nodes;
        TreeNode* p = root;
        while(p || !nodes.empty()){
            while(p) {
                nodes.push_back(p);
                p = p->left;
            }
            if(!nodes.empty()) {
                p = nodes.back();
                vals.push_back(p->val);
                nodes.pop_back();
                p = p->right;
            }  
        }
        return vals;
    }
};