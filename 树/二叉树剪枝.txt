题目难度：MEDIUM

给你二叉树的根结点 root，此外树的每个结点的值要么是 0 ，要么是 1 。
返回移除了所有不包含 1 的子树的原二叉树。
节点 node 的子树为 node 本身加上所有 node 的后代。
示例 1：
输入：root = [1,null,0,0,1]
输出：[1,null,0,null,1]
解释：
只有红色节点满足条件“所有不包含 1 的子树”。 右图为返回的答案。
示例 2：
输入：root = [1,0,1,0,0,0,1]
输出：[1,null,1,null,1]
示例 3：
输入：root = [1,1,0,1,1,0,1,0]
输出：[1,1,0,1,1,null,1]
提示：
树中节点的数目在范围 [1, 200] 内
Node.val 为 0 或 1

思路：树
接下来上题解区题解：
树相关的题目首先考虑用递归解决。
首先确定边界条件，当输入为空时，即可返回空。
然后对左子树和右子树分别递归进行 pruneTree 操作。
递归完成后，当这三个条件：
左子树为空，右子树为空，当前节点的值为 0，同时满足时，才表示以当前节点为根的原二叉树的所有节点都为 0，需要将这棵子树移除，返回空。
有任一条件不满足时，当前节点不应该移除，返回当前节点。

执行用时：
4 ms
, 在所有 C++ 提交中击败了
50.61%
的用户
内存消耗：
8.5 MB
, 在所有 C++ 提交中击败了
39.18%
的用户
(时间一般，空间不咋地)

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* pruneTree(TreeNode* root) {
        if (!root) {
            return nullptr;
        }
        root->left = pruneTree(root->left);
        root->right = pruneTree(root->right);
        if (!root->left && !root->right && !root->val) {
            return nullptr;
        }
        return root;
    }   
};
