题目难度：MEDIUM

给你一棵有 n 个节点的无向树，节点编号为 0 到 n-1 ，它们中有一些节点有苹果。

通过树上的一条边，需要花费 1 秒钟。

你从 节点 0 出发，请你返回最少需要多少秒，可以收集到所有苹果，并回到节点 0 。

无向树的边由 edges 给出，其中 edges[i] = [fromi, toi] ，表示有一条边连接 from 和 toi 。

除此以外，还有一个布尔数组 hasApple ，其中 hasApple[i] = true 代表节点 i 有一个苹果，否则，节点 i 没有苹果。

 

示例 1：



输入：n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]
输出：8 
解释：上图展示了给定的树，其中红色节点表示有苹果。
一个能收集到所有苹果的最优方案由绿色箭头表示。
示例 2：



输入：n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]
输出：6
解释：上图展示了给定的树，其中红色节点表示有苹果。
一个能收集到所有苹果的最优方案由绿色箭头表示。
示例 3：

输入：n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]
输出：0
 

提示：

1 <= n <= 10^5
edges.length == n-1
edges[i].length == 2
0 <= fromi, toi <= n-1
fromi < toi
hasApple.length == n

思路：周赛第三题，树+DFS
先建立邻接表（构树）
DFS从底部往根节点跑，遍历内部DFS，遇见当前是苹果或者子树有苹果就加二
最后返回结果减二（根节点多了判断）与0的最大值即可

上代码：
class Solution {
public:
    vector<vector<int>> g;
    vector<bool> ap;
    int dfs(int u)
    {
        int ans=0;
        for(int v:g[u])
            ans+=dfs(v);
        if(ap[u]||ans) ans+=2;
        //cout<<u<<" "<<ans<<endl;
        return ans;
    }
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        g.assign(n,vector<int>());
        ap=hasApple;
        for(auto e:edges)
            g[e[0]].push_back(e[1]);
        int ans=dfs(0);
        return ans?ans-2:0;
    }
};