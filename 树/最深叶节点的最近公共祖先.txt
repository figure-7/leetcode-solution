题目难度：MEIDUM

给你一个有根节点的二叉树，找到它最深的叶节点的最近公共祖先。

回想一下：

叶节点 是二叉树中没有子节点的节点
树的根节点的 深度 为 0，如果某一节点的深度为 d，那它的子节点的深度就是 d+1
如果我们假定 A 是一组节点 S 的 最近公共祖先，S 中的每个节点都在以 A 为根节点的子树中，且 A 的深度达到此条件下可能的最大值。
 

示例 1：

输入：root = [1,2,3]
输出：[1,2,3]
示例 2：

输入：root = [1,2,3,4]
输出：[4]
示例 3：

输入：root = [1,2,3,4,5]
输出：[2,4,5]
 

提示：

给你的树中将有 1 到 1000 个节点。
树中每个节点的值都在 1 到 1000 之间。

思路：树+DFS
（看不懂题...）接下来上题解区题解：
递归函数 getDeep(root) # 返回 root节点下的最大深度dep，与 最近公共祖先fa 
L，R 分别是root左右子节点的 getDeep返回值
递归的设计思路：

在L.dep==R.dep情况， root.dep=L.dep+1, root.fa=root
在L.dep<R.dep情况， root.dep=R.dep+1, root.fa=R.fa
在L.dep>R.dep情况， root.dep=L.dep+1, root.fa=L.fa

执行用时 :
16 ms
, 在所有 C++ 提交中击败了
86.08%
的用户
内存消耗 :
19.9 MB
, 在所有 C++ 提交中击败了
13.95%
的用户
（时间很好，空间不咋地）

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 struct info{
    int dep;
    TreeNode* fa;
 };
class Solution {
public:
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        info res = getDeep(root);
        return res.fa;
    }
    info getDeep(TreeNode* root){
        info res{0,NULL};
        if (!root) return res;
        else{
            info l,r;
            l = getDeep(root->left);
            r = getDeep(root->right);
            if (l.dep==r.dep){
                res.dep = l.dep + 1;
                res.fa = root;
            }else{
                res.dep = max(l.dep,r.dep)+1;
                if (l.dep<r.dep){
                    res.fa = r.fa;
                }else res.fa = l.fa;
            }
        }
        return res;
    }
};