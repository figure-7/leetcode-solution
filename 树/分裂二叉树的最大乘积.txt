题目难度：MEDIUM

给你一棵二叉树，它的根为 root 。请你删除 1 条边，使二叉树分裂成两棵子树，且它们子树和的乘积尽可能大。

由于答案可能会很大，请你将结果对 10^9 + 7 取模后再返回。

 

示例 1：



输入：root = [1,2,3,4,5,6]
输出：110
解释：删除红色的边，得到 2 棵子树，和分别为 11 和 10 。
它们的乘积是 110 （11*10）
示例 2：



输入：root = [1,null,2,3,4,null,null,5,6]
输出：90
解释：移除红色的边，得到 2 棵子树，和分别是 15 和 6 。
它们的乘积为 90 （15*6）
示例 3：

输入：root = [2,3,9,10,7,8,6,5,4,11,1]
输出：1025
示例 4：

输入：root = [1,1]
输出：1
 

提示：

每棵树最多有 50000 个节点，且至少有 2 个节点。
每个节点的值在 [1, 10000] 之间。

思路：周赛第三题，树
（以后再提前取模我就剁手！！！大数据报错，此外还会超时。。。算了）
先DFS一次计算出节点总和
然后枚举DFS遍历子树，求出子树和然后再DFS最后进行当前子树节点值总和与根节点总和减去当前子树节点值总和的成乘积的最大值
最后返回最大值即可

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
const long long MOD = 1e9 + 7;
class Solution {
public:
    long long sum = 0, ans = 0;
    void dfs_sum(TreeNode* rt){
        if (rt == NULL) return;
        sum += rt->val;
        dfs_sum(rt->left);
        dfs_sum(rt->right);
    }
    
    long long dfs_tree(TreeNode* rt){
        if (rt == NULL) return 0;
        long long ret = rt->val;
        ret += dfs_tree(rt->left);
        ret += dfs_tree(rt->right);
        if (ans < ret * (sum - ret)) ans = ret * (sum - ret);
        return ret;
    }
    
    int maxProduct(TreeNode* root) {
        sum = ans = 0;
        dfs_sum(root);
        dfs_tree(root);
        
        return ans % MOD;
    }
};