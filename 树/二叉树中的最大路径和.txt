题目难度：HARD

给定一个非空二叉树，返回其最大路径和。


本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。
该路径至少包含一个节点，且不一定经过根节点。



示例 1:

输入: [1,2,3]

       
  1
      
 / \
     
2   3


输出: 6


示例?2:输入: [-10,9,20,null,null,15,7]

?  
   -10
? ?
   / \
?
  9 ?20
? ?
     / ?\
? ?
    15 ? 7


输出: 42


思路：反向DFS实现，从叶子结点开始向根节点遍历，同时计算根节点及左侧累加值和根节点及右侧累加值
都大于0的话就返回两个的累加值
一个大于0话也是返回累加值，因为之前每一步都取了最大值，出现小于最大值的也就舍去了
都小于0就返回根节点的值，后续判断时候就去掉了

执行用时 :
32 ms
, 在所有 cpp 提交中击败了
92.05%
的用户
内存消耗 :
24.4 MB
, 在所有 cpp 提交中击败了
80.03%
的用户

上代码:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxPathSum(TreeNode* root) {
        max_sum = INT_MIN;
        dfs(root);
        return max_sum;
    }
private:
    int max_sum;
    int dfs(const TreeNode *root) {
        if(root == nullptr) return 0;
        int l = dfs(root->left);
        int r = dfs(root->right);
        int sum = root->val;
        if(l > 0) sum += l;
        if(r > 0) sum += r;
        max_sum = max(max_sum, sum);
        return max(r, l) > 0 ? max(r, l) + root->val : root->val;
    }
};