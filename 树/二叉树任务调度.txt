题目难度：HARD

任务调度优化是计算机性能优化的关键任务之一。

在任务众多时，不同的调度策略可能会得到不同的总体执行时间，因此寻求一个最优的调度方案是非常有必要的。

通常任务之间是存在依赖关系的，即对于某个任务，你需要先完成他的前导任务（如果非空），才能开始执行该任务。

我们保证任务的依赖关系是一棵二叉树，其中 root 为根任务，root.left 和 root.right 为他的两个前导任务（可能为空），root.val 为其自身的执行时间。

在一个 CPU 核执行某个任务时，我们可以在任何时刻暂停当前任务的执行，并保留当前执行进度。

在下次继续执行该任务时，会从之前停留的进度开始继续执行。

暂停的时间可以不是整数。

现在，系统有两个 CPU 核，即我们可以同时执行两个任务，但是同一个任务不能同时在两个核上执行。

给定这颗任务树，请求出所有任务执行完毕的最小时间。

示例 1：



输入：root = [47, 74, 31]

输出：121

解释：根节点的左右节点可以并行执行31分钟，剩下的43+47分钟只能串行执行，因此总体执行时间是121分钟。

示例 2：



输入：root = [15, 21, null, 24, null, 27, 26]

输出：87

示例 3：



输入：root = [1,3,2,null,null,4,4]

输出：7.5

限制：

1 <= 节点数量 <= 1000
1 <= 单节点执行时间 <= 1000

思路：力扣春季赛第五题：树+DFS
用两个变量分别表示子树只能串行的时间和总时间和
先DFS构造节点值信息，两个值都加上当前节点的值
然后合并左右子树，总时间和值就为左子树的时间和右子树的时间和
串行时间就根据左右子树：
左子树串行时间大于右子树总时间和就把值改为两者的差值，右子树同理
最后中的串行时间除二加上总和时间除二就是结果了
最后返回结果即可


上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
struct Node{
    double sum, single;
    Node(){ sum = 0; single = 0; }
    Node operator + (const Node &b) const{
        Node ret;
        Node left = *this, right = b;
        
        ret.sum = left.sum + right.sum;
        
        if (left.single > right.sum){
            ret.single = left.single - right.sum;
            return ret;
        }
        
        if (right.single > left.sum){
            ret.single = right.single - left.sum;
            return ret;
        }
        
        return ret;
    }
    
    double calc(){
        return 1.0 * sum / 2.0 + 1.0 * single / 2.0;
    }
};

class Solution {
public:
    
    Node dfs(TreeNode* rt){
        if (rt == NULL) return Node();
        Node ret = dfs(rt->left) + dfs(rt->right);
        ret.sum += rt->val;
        ret.single += rt->val;
        return ret;
    }
    
    double minimalExecTime(TreeNode* root) {
        return dfs(root).calc();
    }
};