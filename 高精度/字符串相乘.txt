题目难度：MEDIUM

给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。

示例 1:

输入: num1 = "2", num2 = "3"
输出: "6"
示例 2:

输入: num1 = "123", num2 = "456"
输出: "56088"
说明：

num1 和 num2 的长度小于110。
num1 和 num2 只包含数字 0-9。
num1 和 num2 均不以零开头，除非是数字 0 本身。
不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。

思路：这道题利用高精度乘法解，（感觉难度虚低，属实应该HARD上位，我一点思路没有）
思路写的书上的，还是比较容易理解的，总的来说就是省空间
常见的做法是将字符转化为一个int，一一对应，形成一个int数组。
但是这样很浪费空间，一个int32的最大值是2^31-1=2147483647，可以与9个字符对应
由于有乘法，减半，则至少可以与4个字符一一对应
一个int64可以与9个字符对应

上代码：（书本上的猎奇代码，无法通过，，，提示乘法函数参数必须是0或1个，我感觉书上两个数没问题，因为两个数才有乘法，但是不知道它啥意思。。。）
class Solution {
public:
    typedef vector<int> bigint;
    
    bigint make_bigint(string const& repr) {
        bigint n;
        transform(repr.begin(), repr.end(), back_inserter(n), [](char c) {return c - '0'; });
        return n;
    }
    
    string to_string(bigint const& n) {
        string str;
        transform(find_if(n.rbegin(), prev(n.rend()), [](char c) {return c > '\0'; }), n.rend(), back_inserter(str), [](char c) {return c + '0'; });
        return str;
    }
    
    bigint operator*(bigint const& x, bigint const& y) {
        bigint z(x.size() + y.size());
        
        for(size_t i = 0; i < x.size(); ++i) {
            for(size_t j = 0; j < y.size(); ++j) {
                z[i + j] = x[i] * y[i];
                z[i + j + 1] += z[i + j] / 10;
                z[i + j] %= 10;
            }
        }
        
        return z;
    }
    
    string multiply(string num1, string num2) {
        return to_string(make_bigint(num1) * make_bigint(num));
    }
};

执行用时 :
12 ms
, 在所有 cpp 提交中击败了
50.73%
的用户
内存消耗 :
8.7 MB
, 在所有 cpp 提交中击败了
89.71%
的用户

题解区代码：
class Solution {
public:
    string multiply(string num1, string num2) {
        int n1=num1.size();
        int n2=num2.size();
        string res(n1+n2,'0');
        for(int i=n2-1;i>=0;i--){
            for(int j=n1-1;j>=0;j--){
                int temp=(res[i+j+1]-'0')+(num1[j]-'0')*(num2[i]-'0');
                res[i+j+1]=temp%10+'0';//当前位
                res[i+j]+=temp/10; //前一位加上进位，res[i+j]已经初始化为'0'，加上int类型自动转化为char，所以此处不加'0'
            }
        }
        
//去除首位'0'
        for(int i=0;i<n1+n2;i++){
            if(res[i]!='0')
                return res.substr(i);
        }
        return "0";
       
        
    }
};
