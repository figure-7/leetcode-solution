题目难度：HARD

给定一个二维平面，平面上有 n 个点，求最多有多少个点在同一条直线上。

示例 1:

输入: [[1,1],[2,2],[3,3]]
输出: 3
解释:
^
|
|        o
|     o
|  o  
+------------->
0  1  2  3  4
示例 2:

输入: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
输出: 4
解释:
^
|
|  o
|     o        o
|        o
|  o        o
+------------------->
0  1  2  3  4  5  6

思路：刚开始想的挺简单，结果多种情况直接WA到怀疑人生，本题采用高精度结构体实现，属实不易
接下来换别人的思路：
构建直线的数据结构，数据结构记录如下信息即可：
1，直线某个点
2，直线最初构建时的两点在x轴,y轴上的差值
3，该直线经过的点的下标集合
由于不涉及到浮点数，因此无精度损失问题
然后就可以直观的进行计算了

执行用时 :
64 ms
, 在所有 cpp 提交中击败了
19.09%
的用户
内存消耗 :
13.4 MB
, 在所有 cpp 提交中击败了
9.85%
的用户
（这效率，，，是个问题呢）

上代码：
class Solution {
public:
    struct Line {
        int x, y, dx, dy;
        int count;
        vector<int> node_indices;
        Line(int _x, int _y, int _dx, int _dy, int _count) 
            : x(_x), y(_y), dx(_dx), dy(_dy), count(_count) {}
    };
    // 以下方式计算可以兼容直线垂直、水平的情况，用long防止int溢出
    bool onLine(const Line& line, vector<int>& p) {
        return (long)(p[1] - line.y) * (long)line.dx == (long)(p[0] - line.x) * (long)line.dy;
    }
    Line create(const vector<int>& p1, const vector<int>& p2,
            map<vector<int>, int>& point_counts) {
        return Line(p1[0], p1[1], p2[0] - p1[0], p2[1] - p1[1], 
                point_counts[p1] + point_counts[p2]);
    }
    int maxPoints(vector<vector<int>>& ori_points) {
        map<vector<int>, int> point_counts;
        for (auto& point : ori_points) ++point_counts[point];
        vector<vector<int> > points;
        for (auto& p : point_counts) points.push_back(p.first);
        int N = points.size();
        if (N <= 2) {
            int count = 0;
            for(auto& p : point_counts) count += p.second;
            return count;
        }
        vector<Line> lines;
        lines.push_back(create(points[0], points[1], point_counts));
        lines[0].node_indices.push_back(0);
        lines[0].node_indices.push_back(1);
        for (int i = 2; i < N; ++i) {
            vector<bool> seen(i, false);
            auto p = points[i];
            int s = lines.size();
            for (int j = 0; j < s; ++j) {
                if (onLine(lines[j], p)) {
                    lines[j].count += point_counts[p];
                    lines[j].node_indices.push_back(i);
                } else {
                    for (auto k : lines[j].node_indices) {
                        if (!seen[k]) {
                            lines.push_back(create(p, points[k], point_counts));
                            lines.back().node_indices.push_back(i);
                            lines.back().node_indices.push_back(k);
                            seen[k] = true;
                        }
                    }
                }
            }
        }
        int res = 2;
        for (auto& line : lines) {
            res = max(res, line.count);
        }
        return res;
    }
};