题目难度：MEDIUM

设计链表的实现。
您可以选择使用单链表或双链表。
单链表中的节点应该具有两个属性：val 和 next。
val 是当前节点的值，next 是指向下一个节点的指针/引用。
如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。
假设链表中的所有节点都是 0-index 的。

在链表类中实现这些功能：

get(index)：获取链表中第 index 个节点的值。
如果索引无效，则返回-1。
addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。
插入后，新节点将成为链表的第一个节点。
addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。
addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。
如果 index 等于链表的长度，则该节点将附加到链表的末尾。
如果 index 大于链表长度，则不会插入节点。
如果index小于0，则在头部插入节点。
deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。
 

示例：

MyLinkedList linkedList = new MyLinkedList();
linkedList.addAtHead(1);
linkedList.addAtTail(3);
linkedList.addAtIndex(1,2);   //链表变为1-> 2-> 3
linkedList.get(1);            //返回2
linkedList.deleteAtIndex(1);  //现在链表是1-> 3
linkedList.get(1);            //返回3
 

提示：

所有val值都在 [1, 1000] 之内。
操作次数将在  [1, 1000] 之内。
请不要使用内置的 LinkedList 库。

思路：解决问题+链表+结构体
来造轮子了，我不会...下面上题解区大佬题解：
本题设计链表功能主要有三种类型，1、根据索引得到相应位置上节点的值。2、插入节点。3、删除节点。
三个功能都涉及到查找，因此我可以实现一个查找接口findpre，根据题目要求，这个函数返回索引位置的前一个位置。
实现功能1：利用findpre接口找到当前位置的前一个时直接调用next引用。
实现功能2：引入m_head以及m_tail两个对外不可见节点，方便将边界情况统一为一般情况。
实现功能3：与功能1类似。

执行用时 :
44 ms
, 在所有 cpp 提交中击败了
96.59%
的用户
内存消耗 :
19.2 MB
, 在所有 cpp 提交中击败了
76.57%
的用户
（都不错）

上代码：
struct MyListNode
{
	int data;
	MyListNode* next;
	MyListNode(int left=-1, MyListNode* right=nullptr):data(left), next(right){}
};


class MyLinkedList {
public:
	MyLinkedList():m_size(0){
		m_head=new MyListNode;
		m_tail=new MyListNode;
		m_head->next=m_tail;//初始化外部不可见节点，后续节点插入头尾之间
	}
	/**析构函数
	~MyLinkedList()
	{
		MyListNode* p=m_head->next;
		for(int i=0; i<m_size; i++)
		{
			MyListNode* p2=p;
			p=p->next;
			delete p2;
		}
		delete m_head;
		delete m_tail;
	}*/
    int get(int index) {
		if(index<0||index>m_size-1)//入口参数合法性检验
			return -1;
		MyListNode* p=findpre(index);
		return p->next->data;
    }
    
    void addAtHead(int val) {
		insert(0,val);//三个插入接口统一成一般形式
    }
    
    void addAtTail(int val) {
		insert(m_size,val);
    }
    
    void addAtIndex(int index, int val) {
		if(index>m_size)    //入口参数调整取值0~链表长度
			return;
		if(index<0)
			index=0;
        insert(index, val);
    }
    
    void deleteAtIndex(int index) {
        if(index<0||index>m_size-1) return;	//入口参数合法性检验
		MyListNode* p=findpre(index);
		MyListNode* curNode=p->next;
		p->next=p->next->next;
        m_size--;
		delete curNode;
	}
private:
	MyListNode* findpre(int index)
	{
		MyListNode* p=m_head;
		while (index!=0)
		{
			p=p->next;
			index--;
		}
		return p;
	}
	void insert(int index, int val)
	{
		MyListNode* preNode=findpre(index);
		MyListNode* afterNode=preNode->next;
		MyListNode* currNode= new MyListNode;
		preNode->next=currNode;
		currNode->next=afterNode;
		currNode->data=val;
		m_size++;
	}
	MyListNode* m_head; 
	MyListNode* m_tail;
	int m_size;
};
/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList* obj = new MyLinkedList();
 * int param_1 = obj->get(index);
 * obj->addAtHead(val);
 * obj->addAtTail(val);
 * obj->addAtIndex(index,val);
 * obj->deleteAtIndex(index);
 */