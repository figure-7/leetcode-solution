题目难度：MEDIUM

编写一个可以从 1 到 n 输出代表这个数字的字符串的程序，但是：

如果这个数字可以被 3 整除，输出 "fizz"。
如果这个数字可以被 5 整除，输出 "buzz"。
如果这个数字可以同时被 3 和 5 整除，输出 "fizzbuzz"。
例如，当 n = 15，输出： 1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz。

假设有这么一个类：

class FizzBuzz {
  public FizzBuzz(int n) { ... }               // constructor
  public void fizz(printFizz) { ... }          // only output "fizz"
  public void buzz(printBuzz) { ... }          // only output "buzz"
  public void fizzbuzz(printFizzBuzz) { ... }  // only output "fizzbuzz"
  public void number(printNumber) { ... }      // only output the numbers
}
请你实现一个有四个线程的多线程版  FizzBuzz， 同一个 FizzBuzz 实例会被如下四个线程使用：

线程A将调用 fizz() 来判断是否能被 3 整除，如果可以，则输出 fizz。
线程B将调用 buzz() 来判断是否能被 5 整除，如果可以，则输出 buzz。
线程C将调用 fizzbuzz() 来判断是否同时能被 3 和 5 整除，如果可以，则输出 fizzbuzz。
线程D将调用 number() 来实现输出既不能被 3 整除也不能被 5 整除的数字。

思路：解决问题+锁+多线程
（看评论区说的这题不怎么样，正常不会这么搞...解法也很多样）接下来上题解区题解：
还是使用condition_variable，注意要让所有的线程在执行完之后顺利推出。
否则会时间超限。

执行用时 :
12 ms
, 在所有 C++ 提交中击败了
93.17%
的用户
内存消耗 :
9.4 MB
, 在所有 C++ 提交中击败了
5.51%
的用户
（时间很好，空间炸了）

上代码：
class FizzBuzz {
private:
    int n;
    int num;
    condition_variable cv;
    mutex m;
public:
    FizzBuzz(int n) {
        this->n = n;
        num = 1;
    }

    // printFizz() outputs "fizz".
    void fizz(function<void()> printFizz) {
        unique_lock<mutex> lk(m);
        for ( ; num <= n ; )
        {
            if (num % 3 == 0 && num % 5 != 0)
            {
                printFizz();
                ++num;
                cv.notify_all();
            }
            cv.wait(lk, [this] {return (num > n) || num % 3 == 0 && num % 5 != 0; });
        }
    }

    // printBuzz() outputs "buzz".
    void buzz(function<void()> printBuzz) {
        unique_lock<mutex> lk(m);
        for (; num <= n;)
        {
            if (num % 5 == 0 && num % 3 != 0)
            {
                printBuzz();
                ++num;
                cv.notify_all();
            }
            cv.wait(lk, [this] {return (num > n) || num % 5 == 0 && num % 3 != 0; });
        }
    }

    // printFizzBuzz() outputs "fizzbuzz".
    void fizzbuzz(function<void()> printFizzBuzz) {
        unique_lock<mutex> lk(m);
        for (; num <= n;)
        {
            if (num % 3 == 0 && num % 5 == 0)
            {
                printFizzBuzz();
                ++num;
                cv.notify_all();
            }
            cv.wait(lk, [this] {return (num > n) || num % 3 == 0 && num % 5 == 0; });
        }
    }

    // printNumber(x) outputs "x", where x is an integer.
    void number(function<void(int)> printNumber) {
        unique_lock<mutex> lk(m);
        for (; num <= n;)
        {
            if (num % 3 != 0 && num % 5 != 0)
            {
                printNumber(num);
                ++num;
                if (num > n)
                {
                    cv.notify_all();
                    break;
                }
                if (num % 3 != 0 && num % 5 != 0)
                {
                    continue;
                }
                else
                {
                    cv.notify_all();
                }
            }
            cv.wait(lk, [this] {return (num > n) || num % 3 != 0 && num % 5 != 0; });
        }
    }
};