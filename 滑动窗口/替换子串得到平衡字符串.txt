题目难度：MEDIUM

有一个只含有 'Q', 'W', 'E', 'R' 四种字符，且长度为 n 的字符串。

假如在该字符串中，这四个字符都恰好出现 n/4 次，那么它就是一个「平衡字符串」。

 

给你一个这样的字符串 s，请通过「替换子串」的方式，使原字符串 s 变成一个「平衡字符串」。

你可以用和「待替换子串」长度相同的 任何 其他字符串来完成替换。

请返回待替换子串的最小可能长度。

如果原字符串自身就是一个平衡字符串，则返回 0。

 

示例 1：

输入：s = "QWER"
输出：0
解释：s 已经是平衡的了。
示例 2：

输入：s = "QQWE"
输出：1
解释：我们需要把一个 'Q' 替换成 'R'，这样得到的 "RQWE" (或 "QRWE") 是平衡的。
示例 3：

输入：s = "QQQW"
输出：2
解释：我们可以把前面的 "QQ" 替换成 "ER"。 
示例 4：

输入：s = "QQQQ"
输出：3
解释：我们可以替换后 3 个 'Q'，使 s = "QWER"。
 

提示：

1 <= s.length <= 10^5
s.length 是 4 的倍数
s 中只含有 'Q', 'W', 'E', 'R' 四种字符

思路：先统计每个字符的个数，然后双指针滑动窗口
先判断四个字符是否符合条件，符合就直接返回0
不符合就把左右指针都设为0，然后外循环右指针开始遍历，同时该指针的字符数量减一
之后判断剩下字符是否符合条件，如果符合（ok）就取一下窗口最小长度
内部循环继续将左指针遍历，同时该指针的字符数量加一
之后还是判断剩下字符是否符合条件，如果不符合（！ok）就取一下窗口最小长度
之后退出内循环，如此往复，直至遍历结束

上代码：
class Solution {
    public int balancedString(String s) {
        int[] cnt = new int[26];
        for (int i = 0; i < s.length(); i++) {
            cnt[s.charAt(i) - 'A'] ++;
        }

        int l = 0;
        int r = 0;
        int n = s.length();
        boolean ok = true;
        for (int i = 0; i < 26; i++) {
            if (cnt[i] > n / 4) ok = false;
        }
        if (ok) return 0;
        int res = n;
        for (; r < s.length(); r++) {
            cnt[s.charAt(r) - 'A']--;
            ok = true;
            for (int i = 0; i < 26; i++) {
                if (cnt[i] > n / 4) ok = false;
            }
            while (ok) {
                res = Math.min(res, r - l + 1);
                cnt[s.charAt(l) - 'A'] ++;
                if (cnt[s.charAt(l) - 'A'] > n / 4) ok = false;
                l++;
            }
        }
        return res;
    }
}