题目难度：HARD

给定一个正整数数组 A，如果 A 的某个子数组中不同整数的个数恰好为 K，则称 A 的这个连续、不一定独立的子数组为好子数组。

（例如，[1,2,3,1,2] 中有 3 个不同的整数：1，2，以及 3。）

返回 A 中好子数组的数目。

 

示例 1：

输出：A = [1,2,1,2,3], K = 2
输入：7
解释：恰好由 2 个不同整数组成的子数组：[1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].
示例 2：

输入：A = [1,2,1,3,4], K = 3
输出：3
解释：恰好由 3 个不同整数组成的子数组：[1,2,1,3], [2,1,3], [1,3,4].
 

提示：

1 <= A.length <= 20000
1 <= A[i] <= A.length
1 <= K <= A.length

思路：SlidingWindows
接下来上题解区题解：
1，双指针，l指向左端，i作为右端不断往右滑动
2，一旦可以凑出正好K个整数，则尝试滑动l找到当前情况下的所有可能，并记得复原状态

执行用时 :
52 ms
, 在所有 C++ 提交中击败了
91.02%
的用户
内存消耗 :
33.5 MB
, 在所有 C++ 提交中击败了
10.42%
的用户
（时间很好，空间一般）

上代码：
class Solution {
public:
    int subarraysWithKDistinct(vector<int>& A, int K) {
        int N = A.size();
        vector<int> counts(N + 1, 0);
        int l = 0;
        int c = 0;
        int res = 0;
        for (int i = 0; i < N; ++i) {
            if (counts[A[i]]++ == 0) ++c;
            while (c > K) {
                if (--counts[A[l]] == 0) --c;
                ++l;
            }
            int t = l;
            if (c == K) {
                // count res
                while (c == K) {
                    if (--counts[A[t]] == 0) --c;
                    ++t;
                    ++res;
                }
                // recover counts
                for (int j = l; j < t; ++j) {
                    if (counts[A[j]]++ == 0) ++c;
                }
            }
        }
        return res;
    }
};