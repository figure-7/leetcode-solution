题目难度：MEDIUM

给你一个数组 events，其中 events[i] = [startDayi, endDayi] ，表示会议 i 开始于 startDayi ，结束于 endDayi 。

你可以在满足 startDayi <= d <= endDayi 中的任意一天 d 参加会议 i 。

注意，一天只能参加一个会议。

请你返回你可以参加的 最大 会议数目。

 

示例 1：



输入：events = [[1,2],[2,3],[3,4]]
输出：3
解释：你可以参加所有的三个会议。
安排会议的一种方案如上图。
第 1 天参加第一个会议。
第 2 天参加第二个会议。
第 3 天参加第三个会议。
示例 2：

输入：events= [[1,2],[2,3],[3,4],[1,2]]
输出：4
示例 3：

输入：events = [[1,4],[4,4],[2,2],[3,4],[1,1]]
输出：4
示例 4：

输入：events = [[1,100000]]
输出：1
示例 5：

输入：events = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]
输出：7
 

提示：

1 <= events.length <= 10^5
events[i].length == 2
1 <= events[i][0] <= events[i][1] <= 10^5

思路：周赛第三题，贪心+SlidingWindows
先按照开始时间把会议排序，之后遍历然后把第i天能参加的会议放入优先队列
先把时间结束的会议去掉，
然后找一个最紧急的（结束时间早的（也就是小根堆队列的堆顶元素））参加，堆顶元素出队

上代码：
const int MAXN = 1e5 + 50;
struct Event{
    int start, end;
    Event(){}
    Event(int s0, int e0){
        start = s0;
        end = e0;
    }
    bool operator < (const Event &b)const{
        return end > b.end;
    }
}event[MAXN];
priority_queue<Event> que;
inline bool cmp(const Event &a, const Event &b){
    return a.start < b.start;
}

class Solution {
public:
    
    
    int maxEvents(vector<vector<int>>& events) {
        int n = events.size(), ans = 0;
        int mi = events[0][0], mx = events[0][1];
        
        for (int i = 0; i < n; i++){
            event[i] = Event(events[i][0], events[i][1]);
            mi = min(mi, events[i][0]);
            mx = max(mx, events[i][1]);
        }
        
        sort(event + 0, event + n, cmp);
        
        while(!que.empty()) {
            que.pop();
        }
        for (int i = mi, j = 0; i <= mx; i++){
            // printf("Day %d\n", i);
            while(j < n && event[j].start <= i){
                que.push(event[j]);
                // printf("+ %d %d\n", event[j].start, event[j].end);
                j++;
            }
            while(!que.empty() && que.top().end < i) {
                // printf("- %d %d\n", que.top().start, que.top().end);
                que.pop();
            }
            if (!que.empty()) {
                ++ans;
                // printf("%d %d\n", que.top().start, que.top().end);
                que.pop();
                
            }
        }
        
        return ans;
    }
};