题目难度：MEDIUM

节点间通路。
给定有向图，设计一个算法，找出两个节点之间是否存在一条路径。
示例1:
输入：n = 3, graph = [[0, 1], [0, 2], [1, 2], [1, 2]], start = 0, target = 2
输出：true
示例2:
输入：n = 5, graph = [[0, 1], [0, 2], [0, 4], [0, 4], [0, 1], [1, 3], [1, 4], [1, 3], [2, 3], [3, 4]], start = 0, target = 4
输出 true
提示：
节点数量n在[0, 1e5]范围内。
节点编号大于等于 0 小于 n。
图中可能存在自环和平行边。

思路：散列表
接下来上题解区题解：
注意这道题是有向图，因此不能用并查集。

时间334ms
击败43%
空间96.8MB
击败22%
（时间一般，空间炸了）

上代码：
class Solution {
public:
    vector<unordered_set<int>> edge;
    unordered_set<int> visited;
    bool dfs(int cur, int target) {
        if(visited.count(cur)) return false;
        visited.insert(cur);
        if(cur == target) return true;
        for(auto v : edge[cur]) {
            if(dfs(v, target))
                return true;
        }
        return false;
    }

    bool findWhetherExistsPath(int n, vector<vector<int>>& graph, int start, int target) {
        edge.resize(n);
        for(auto &e : graph) edge[e[0]].insert(e[1]);
        return dfs(start, target);
    }
};
