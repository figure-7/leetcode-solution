题目难度：MEDIUM

给你一个在 X-Y 平面上的点构成的数据流。设计一个满足下述要求的算法：
添加 一个在数据流中的新点到某个数据结构中。
可以添加 重复 的点，并会视作不同的点进行处理。
给你一个查询点，请你从数据结构中选出三个点，使这三个点和查询点一同构成一个 面积为正 的 轴对齐正方形 ，统计 满足该要求的方案数目。
轴对齐正方形 是一个正方形，除四条边长度相同外，还满足每条边都与 x-轴 或 y-轴 平行或垂直。
实现 DetectSquares 类：
DetectSquares() 使用空数据结构初始化对象
void add(int[] point) 向数据结构添加一个新的点 point = [x, y]
int count(int[] point) 统计按上述方式与点 point = [x, y] 共同构造 轴对齐正方形 的方案数。
示例：
输入：
["DetectSquares", "add", "add", "add", "count", "count", "add", "count"]
[[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]
输出：
[null, null, null, null, 1, 0, null, 2]
解释：
DetectSquares detectSquares = new DetectSquares();
detectSquares.add([3, 10]);
detectSquares.add([11, 2]);
detectSquares.add([3, 2]);
detectSquares.count([11, 10]); // 返回 1 。你可以选择：
                               //   - 第一个，第二个，和第三个点
detectSquares.count([14, 8]);  // 返回 0 。查询点无法与数据结构中的这些点构成正方形。
detectSquares.add([11, 2]);    // 允许添加重复的点。
detectSquares.count([11, 10]); // 返回 2 。你可以选择：
                               //   - 第一个，第二个，和第三个点
                               //   - 第一个，第三个，和第四个点
提示：
point.length == 2
0 <= x, y <= 1000
调用 add 和 count 的 总次数 最多为 5000

思路：散列表
接下来上题解区题解：
先考虑如何实现 int count(int[] point)，记输入的 \textit{point}point 的横纵坐标分别为 xx 和 yy。
则形成的正方形的上下两条边中，其中一条边的纵坐标为 yy， 我们枚举另一条边的纵坐标为 colcol，则正方形的边长 dd 为 |y - col|∣y−col∣ 且大于 00。
有了其中一个点的坐标 (x, y)(x,y) 和一条横边的纵坐标 colcol，我们可以得到正方形的四个点的坐标分别为 (x, y)(x,y)，(x, col)(x,col)，(x+d, y)(x+d,y)，(x+d, col)(x+d,col) 或 (x, y)(x,y)，(x, col)(x,col)，(x-d, y)(x−d,y)，(x-d, col)(x−d,col)。
据此，我们可以用一个哈希表来存储 void add(int[] point) 函数中加入的点。
先把点按照行来划分，键为行的纵坐标，值为另一个哈希表，其中键为该行中的点的横坐标，值为这样的点的个数。
因为点会重复出现，所以计算正方形的个数时需要把另外三个坐标出现的次数相乘。

执行用时：
264 ms
, 在所有 C++ 提交中击败了
69.89%
的用户
内存消耗：
91.8 MB
, 在所有 C++ 提交中击败了
46.02%
的用户
（时间一般，空间一般）

上代码：
class DetectSquares {
public:
    // 使用哈希表嵌套,{y,{x,{点(x,y)的个数}}}
    unordered_map<int,unordered_map<int,int>> cnt;
    DetectSquares() {

    }
    
    void add(vector<int> p) {
        int x=p[0],y=p[1];
        cnt[y][x]++;
    }
    
    int count(vector<int> p) {
        int res=0;
        int x=p[0],y=p[1];
        if(!cnt.count(y))return 0;
        // 获得点(x,y)的点y的x的个数
        unordered_map<int,int> y_cnt=cnt[y];
        // 遍历寻找x行的非y列的所有点，即(x,ny)
        for(auto &[ny,ny_cnt]:cnt){
            if(ny==y)continue;
            int len=ny-y;
            for(int nx:{x-len,x+len}){
                // (nx,y) * (x,ny) * (nx,ny)
                // y_cnt表示y点，ny_cnt表示ny点，然后再y点的集合中选nx的点，再ny的集合中选nx，x的点，也就是固定一个点，剩下三个点数量的乘积
                res+=(y_cnt.count(nx)?y_cnt[nx]:0)*(ny_cnt.count(x)?ny_cnt[x]:0)*(ny_cnt.count(nx)?ny_cnt[nx]:0);
            }
        }
        return res;
    }
};