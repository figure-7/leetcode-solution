题目难度：HARD

公司有编号为 1 到 n 的 n 个工程师，给你两个数组 speed 和 efficiency ，其中 speed[i] 和 efficiency[i] 分别代表第 i 位工程师的速度和效率。

请你返回由最多 k 个工程师组成的 ​​​​​​最大团队表现值 ，由于答案可能很大，请你返回结果对 10^9 + 7 取余后的结果。

团队表现值 的定义为：一个团队中「所有工程师速度的和」乘以他们「效率值中的最小值」。

 

示例 1：

输入：n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2
输出：60
解释：
我们选择工程师 2（speed=10 且 efficiency=4）和工程师 5（speed=5 且 efficiency=7）。
他们的团队表现值为 performance = (10 + 5) * min(4, 7) = 60 。
示例 2：

输入：n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3
输出：68
解释：
此示例与第一个示例相同，除了 k = 3 。我们可以选择工程师 1 ，工程师 2 和工程师 5 得到最大的团队表现值。
表现值为 performance = (2 + 10 + 5) * min(5, 4, 7) = 68 。
示例 3：

输入：n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4
输出：72
 

提示：

1 <= n <= 10^5
speed.length == n
efficiency.length == n
1 <= speed[i] <= 10^5
1 <= efficiency[i] <= 10^8
1 <= k <= n

思路：周赛第四题，优先队列+结构体
先把给定数组数据放入结构体然后按照效率值高到低排序
然后按效率值从高到低遍历，然后利用优先队列遍历找topK个人对应的结果与结果取最大值
当比当前效率高的人大于K个，就把速度慢的出队，后面的（速度快的）入队再计算
最后返回结果即可

上代码：
const int MAXN = 1e5 + 50;
struct Engineer{
    long long s, e;
}p[MAXN];
const long long MOD = 1e9 + 7;
inline bool cmp(const Engineer &a, const Engineer &b){ return a.e > b.e; }

priority_queue<long long> que;

class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        for (int i = 0; i < n; i++){
            p[i].s = speed[i];
            p[i].e = efficiency[i];
        }
        sort(p, p + n, cmp);
        
        while(!que.empty()) que.pop();
        
        long long sum = 0;
        long long ans = 0;
        for (int i = 0; i < n; i++){
            sum += p[i].s;
            que.push(-p[i].s);
            
            while(que.size() > k){
                sum += que.top(); que.pop();
            }
            
            ans = max(ans, sum * p[i].e);
        }
        
        return ans % MOD;
    }
};