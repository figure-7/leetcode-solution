题目难度：HARD

给你一棵树，树上有 n 个节点，按从 0 到 n-1 编号。

树以父节点数组的形式给出，其中 parent[i] 是节点 i 的父节点。

树的根节点是编号为 0 的节点。

请你设计并实现 getKthAncestor(int node, int k) 函数，函数返回节点 node 的第 k 个祖先节点。

如果不存在这样的祖先节点，返回 -1 。

树节点的第 k 个祖先节点是从该节点到根节点路径上的第 k 个节点。

 

示例：



输入：
["TreeAncestor","getKthAncestor","getKthAncestor","getKthAncestor"]
[[7,[-1,0,0,1,1,2,2]],[3,1],[5,2],[6,3]]

输出：
[null,1,0,-1]

解释：
TreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);

treeAncestor.getKthAncestor(3, 1);  // 返回 1 ，它是 3 的父节点
treeAncestor.getKthAncestor(5, 2);  // 返回 0 ，它是 5 的祖父节点
treeAncestor.getKthAncestor(6, 3);  // 返回 -1 因为不存在满足要求的祖先节点
 

提示：

1 <= k <= n <= 5*10^4
parent[0] == -1 表示编号为 0 的节点是根节点。
对于所有的 0 < i < n ，0 <= parent[i] < n 总成立
0 <= node < n
至多查询 5*10^4 次

思路：周赛第四题，倍增
假如是28个祖先节点，那么就是2^4+2^3+2^2,计算三次
存储每个节点的2^i个祖先节点，记为father[node][i]
边界条件：father[node][0] = parent[node]
递推公式：father[node][i] = father[node`][i - 1] where node` = father[node][i - 1]
（例：一个节点的32祖先节点就是他的16祖先节点的16祖先节点）
待查询节点node第K个祖先进行拆分，不断向上找即可

上代码：
class TreeAncestor {
private:
    vector<vector<int>> fa;
    
public:
    TreeAncestor(int n, vector<int>& parent) {
        fa.resize(n, vector<int>(16));
        for (int i = 0; i < n; ++i) {
            fa[i][0] = parent[i];
        }
        for (int j = 1; j < 16; ++j) {
            for (int i = 0; i < n; ++i) {
                if (fa[i][j - 1] == -1) {
                    fa[i][j] = -1;
                }
                else {
                    fa[i][j] = fa[fa[i][j - 1]][j - 1];
                }
            }
        }
    }
    
    int getKthAncestor(int node, int k) {
        for (int i = 15; i >= 0; --i) {
            if (node != -1 && k >= (1 << i)) {
                node = fa[node][i];
                k -= (1 << i);
            }
        }
        return node;
    }
};

/**
 * Your TreeAncestor object will be instantiated and called as such:
 * TreeAncestor* obj = new TreeAncestor(n, parent);
 * int param_1 = obj->getKthAncestor(node,k);
 */