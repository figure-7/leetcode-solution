题目难度：HARD

给你两个整数数组 arr1 和 arr2，返回使 arr1 严格递增所需要的最小「操作」数（可能为 0）。

每一步「操作」中，你可以分别从 arr1 和 arr2 中各选出一个索引，分别为 i 和 j，0 <= i < arr1.length 和 0 <= j < arr2.length，然后进行赋值运算 arr1[i] = arr2[j]。

如果无法让 arr1 严格递增，请返回 -1。

 

示例 1：

输入：arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]
输出：1
解释：用 2 来替换 5，之后 arr1 = [1, 2, 3, 6, 7]。
示例 2：

输入：arr1 = [1,5,3,6,7], arr2 = [4,3,1]
输出：2
解释：用 3 来替换 5，然后用 4 来替换 3，得到 arr1 = [1, 3, 4, 6, 7]。
示例 3：

输入：arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]
输出：-1
解释：无法使 arr1 严格递增。
 

提示：

1 <= arr1.length, arr2.length <= 2000
0 <= arr1[i], arr2[i] <= 10^9

思路：DP
接下来上题解去区题解：
国际版上看到的解法,虽然不是最快的解法，但我认为是非常容易理解的解法：
国际版解法参考

dp[i][j]表示，将数组arr1的前j个元素通过i次替换后变为严格递增序列时，序列中最后一个元素的最小值,第j个元素的最小值。

求dp[i][j+1]时，递推如下：当arr[j+1] > dp[i][j] 时，即前j个元素已经严格递增，这时arr[j+1]大于严格递增序列的最大值时，arr[j+1],直接加在序列末尾，即这时的序列应该严格递增，且此时的序列进行替换的次数仍然为i次。

另一种选择，或者选择将arr[j+1]进行元素替换，此时，我们应当在数组arr2中找到第一个比dp[i-1][j]大的数，dp[i-1][j]即前j个元素进行i-1替换后的序列的最大值，我们使用二分查找即可在O(lgn)时间复杂度内找到该值,此时我们仍然保证前j+1个元素进行了i次替换。

递推公式如下:

dp[i][j+1] = min\left\{ \begin{array}{rcl} arr1[j+1] & & {if \: arr1[j+1] > dp[i][j]} \\ & & \\ arr2.upperbound(dp[i-1][j]) & &{if \: arr2.upperbound(dp[i-1][j]) \: \: exisit} \\ \end{array} \right.
dp[i][j+1]=min 
⎩
⎨
⎧
​	
  
arr1[j+1]
arr2.upperbound(dp[i−1][j])
​	
  
​	
  
ifarr1[j+1]>dp[i][j]
ifarr2.upperbound(dp[i−1][j])exisit
​	
 

我们只需要找到最小转换次数的i，能够使得满足前n个元素成为严格递增序列即可。

执行用时 :
280 ms
, 在所有 C++ 提交中击败了
29.73%
的用户
内存消耗 :
37.5 MB
, 在所有 C++ 提交中击败了
47.17%
的用户
（时间不咋地，空间一般）

上代码：
class Solution {
public:
    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        int n = arr1.size();
        std::vector<vector<int>> dp(n+1,vector<int>(n+1,INT_MAX));
        
        /*intial*/
        dp[0][0] = -1;
        sort(arr2.begin(),arr2.end());
        
        for(int i = 1; i <= n; ++i){
            for(int j = 0;j <= i; ++j){
                if(arr1[i-1] > dp[j][i-1]){
                    dp[j][i] = arr1[i-1];
                }
                
                if(j > 0){
                    auto it = upper_bound(arr2.begin(),arr2.end(),dp[j-1][i-1]);
                    if(it != arr2.end()){
                        dp[j][i] = min(dp[j][i],*it);
                    }
                }
                if( i == n && dp[j][i] != INT_MAX){
                    return j;
                }
            }
        }
        
        return -1;
    }
};