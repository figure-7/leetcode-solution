题目难度：HARD

给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。

当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。

请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。

说明:
不允许旋转信封。

示例:

输入: envelopes = [[5,4],[6,4],[6,7],[2,3]]
输出: 3 
解释: 最多信封的个数为 3, 组合为: [2,3] => [5,4] => [6,7]。

思路：动态规划+方法重写
（我审错题了，一维说明意思是不能排序。。。）接下来上题解区题解：
代码中朴素写法，单纯的求最大递增子序列的长度可以用二分优化

上代码：
class Solution {
public:
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        // 二维最长递增子序列，w从小到大排序，w相等时，h从大到小排序，防止，w相同时，结果出现多个h的问题
        if (envelopes.size() < 1) return 0;
        sort(envelopes.begin(), envelopes.end(), [](const vector<int> &a, const vector<int> &b){
            if (a[0] == b[0]) return a[1] > b[1];
            return a[0] < b[0];
        });
        
        int res = 1;
        vector<int> dp(envelopes.size(), 1);
        for (int i = 1; i < envelopes.size(); i++) {
            for (int j = 0; j < i; j++) {
                if (envelopes[j][1] < envelopes[i][1]) dp[i] = max(dp[i], dp[j] + 1);
            }
            res = max(res, dp[i]);
        }
        return res;
    }
};