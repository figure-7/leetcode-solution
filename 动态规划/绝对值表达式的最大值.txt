题目难度：MEDIUM

给你两个长度相等的整数数组，返回下面表达式的最大值：

|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|

其中下标 i，j 满足 0 <= i, j < arr1.length。

 

示例 1：

输入：arr1 = [1,2,3,4], arr2 = [-1,4,5,6]
输出：13
示例 2：

输入：arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]
输出：20
 

提示：

2 <= arr1.length == arr2.length <= 40000
-10^6 <= arr1[i], arr2[i] <= 10^6

思路：DP（曼哈顿距离）
接下来上题解区题解：
题解 时间复杂度O(n)

看一眼时间复杂度，用暴力肯定超时，仔细想想可以把这个题抽象为求三维曼哈顿距离的最大值

dist = |x_i - x_j| + |y_i - y_j| + |z_i - z_j|
dist=∣x 
i
​	
 −x 
j
​	
 ∣+∣y 
i
​	
 −y 
j
​	
 ∣+∣z 
i
​	
 −z 
j
​	
 ∣

分析：

dist这个表达式去绝对值后，x_i，y_i，z_ix 
i
​	
 ，y 
i
​	
 ，z 
i
​	
 只可能有八种情况
1：x_i + y_i + z_i，2：x_i + y_i - z_i, ...，8：-x_i - y_i - z_i1：x 
i
​	
 +y 
i
​	
 +z 
i
​	
 ，2：x 
i
​	
 +y 
i
​	
 −z 
i
​	
 ,...，8：−x 
i
​	
 −y 
i
​	
 −z 
i
​	
 
可以发现每一种情况对应的x_j, y_j, z_jx 
j
​	
 ,y 
j
​	
 ,z 
j
​	
 , 一定也能被确定下来（对应符号相反），比如：x_i + y_i - z_ix 
i
​	
 +y 
i
​	
 −z 
i
​	
 这种情况，一定是dist = (x_i + y_i - z_i)+(-x_j - y_j + z_j)dist=(x 
i
​	
 +y 
i
​	
 −z 
i
​	
 )+(−x 
j
​	
 −y 
j
​	
 +z 
j
​	
 )
所以我们只需要先用O(n)O(n)的复杂度求出点ii的八种情况分别对应的最大值maxv[k], k=0,..8maxv[k],k=0,..8，然后再用O(n)O(n)的复杂度枚举每一种去绝对值的组合，取八种组合中的最大值即为最终结果
进一步可以求d维的曼哈顿距离，情况有2^d2 
d
 种，时间复杂度为O(2^d n)O(2 
d
 n)

执行用时 :
76 ms
, 在所有 C++ 提交中击败了
44.36%
的用户
内存消耗 :
12.4 MB
, 在所有 C++ 提交中击败了
46.27%
的用户
（时空都一般）

上代码：
class Solution {
public:
    // 八种情况，用1表示正号，-1表示负号
    int d[8][3] = {{1, 1, 1}, {1, 1, -1}, {1, -1, 1}, {-1, 1, 1}, {1, -1, -1}, {-1, -1, 1}, {-1, 1, -1}, {-1, -1, -1}};
    int maxv[8];

    int maxAbsValExpr(vector<int> &arr1, vector<int> &arr2) {
        int n = arr1.size();
        memset(maxv, 0x80, sizeof maxv);

        // 求出点i的8种组合的最大值
        for (int k = 0; k < 8; k ++)
            for (int i = 0; i < n; i ++)
                maxv[k] = max(maxv[k], i * d[k][0] + arr1[i] * d[k][1] + arr2[i] * d[k][2]);

        int res = 0;
        for (int k = 0; k < 8; k ++)
            for (int j = 0; j < n; j ++)
                res = max(res, maxv[k] - j * d[k][0] - arr1[j] * d[k][1] - arr2[j] * d[k][2]);

        return res;
    }
};