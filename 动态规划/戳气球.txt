题目难度：HARD

有 n 个气球，编号为0 到 n-1，每个气球上都标有一个数字，这些数字存在数组 nums 中。

现在要求你戳破所有的气球。

每当你戳破一个气球 i 时，你可以获得 nums[left] * nums[i] * nums[right] 个硬币。 

这里的 left 和 right 代表和 i 相邻的两个气球的序号。

注意当你戳破了气球 i 后，气球 left 和气球 right 就变成了相邻的气球。

求所能获得硬币的最大数量。

说明:

你可以假设 nums[-1] = nums[n] = 1，但注意它们不是真实存在的所以并不能被戳破。
0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100
示例:

输入: [3,1,5,8]
输出: 167 
解释: nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []
     coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167

思路：DP
接下来上题解区题解：
解法一 回溯法（超时）
容易想出这样的思路。选择任一个球先爆掉，剩下的球再构成一个序列。再任选一个球爆掉。这样直到球全部爆掉。

例如：[3,1,5,8]

先选5爆掉，剩下[3,1,8]。得金币40.

再选1爆掉，剩下[3,8].得金币24.

再选3爆掉，剩下[8]. 金币24

最后爆掉8.金币8

这种选择爆的金币容易算出。

但是其实第一个球有4种选择，第二个球有3种选择，第三个球有2种选择，第四个球只剩一种选择。

那么这种思路，时间复杂度是O(n!)。一般AC，n到10，就过不了.

也可以看出，序列可能存在重复。可以通过序列去重，加速计算。

整体思路：

A:序列；
hash<序列，值>:序列去重;
A前后加个1，方便计算。
dfs(A,hash){
    if(hash 有 A) 返回hash[A];
    if(A.length < 3) 此时只有两端得1，返回0;
    for(k in [1,..,A.length-2]){
        序列v = A[0,...,k-1] + A[k+1,...,A.length-1];
        t = A[k-1]*A[k]*A[k+1];
        r = dfs(v,hash);
        取t+r的最大值为A的结果;
    }
}
完整代码：

    int N;
    int maxCoins(vector<int>& nums) {
        map<vector<int>,int> dedup;
        N = nums.size();
        nums.insert(nums.begin(),1);
        nums.push_back(1);
        const int len = nums.size();
        int r = dfs(nums,dedup);
        return r;
    }
    
    int dfs(vector<int>& A,map<vector<int>,int>& dedup){
        if(dedup.count(A)) return dedup[A];
        int ans = 0;
        if(A.size() < 3){
            return ans = 0;
        }
        for(int x = 1;x <= A.size()-2; ++x){
            int t = A[x-1] * A[x] * A[x+1];
            int r = -1;
            int a = A[x];
            vector<int> v(A.begin(),A.begin()+x);
            for(int j=x+1;j < A.size() ;++j){
                v.push_back(A[j]);
            }
            r = dfs(v,dedup);
            ans = max(ans,t+r);
        }
        dedup[A] = ans;
        return ans;
    }
解法二 回溯法
再分析解法一的过程。

例如：[3,1,5,8]

先选5爆掉，剩下[3,1,8]。得金币40.

这里，为什么要将剩下的3,1,8再拼新序列？

因为，[3,1,5,8] 中5被爆掉，1和8如果不相邻，在爆掉1和8时，就无法正确计算金币。

同样，[3，1，8]中爆掉1后，3和8必须相邻。

这样，在爆掉一个球后，剩下的左和右两个部分必须相关联，才能得出正确解。

如此，每递归一层只能少一个球，复杂度为O(n!)。

如果，能在爆一个球时，将序列分成相独立的两部分，并得出正确的解。就能大幅降低时间复杂度。

再看， [3,1,5,8] 中，如果5没有被爆掉，那么[3,1]和[8]就独立了，它们都只与5有关了。

到这里，改进的思路，就很清晰了。

选择任一个球B，但是不爆，等其分割的左右部分爆完后，最后爆球B。

例如 [3,1,5,8]

选5，先爆[3,1]，也用同样的方式.

再爆[8]，

最后爆5.

与解法一的区别，任选一个球，解法一最先爆，解法二最后爆。

实际上，这样的思路转变，并不容易想到。有时就这么尴尬，自己想不出，一看题解秒懂，总会有一层窗户纸隔着。

这里产生一个问题，最后爆的金币怎么计算？

其实，要爆的区间边界是清楚的。计算金币也就很容易。

还有些区间会重复计算，用记忆化的方式去重;

思路：

A序列;
[i,j]区间;
d[i][j]:记忆化去重;
dfs(A,i,j){
    if([i,j]已经算过) 返回d[i][j];
    if(i > j) 返回0;
    for(k in [i,j]){
        r = A[i-1] * A[k] * A[j+1] + dfs(A,i,k-1) + dfs(A,k+1,j);
        取r的最大值;
    }
}
完整代码：

    int N;
    int maxCoins(vector<int>& nums) {
        N = nums.size();
        nums.insert(nums.begin(),1);
        nums.push_back(1);
        const int len = nums.size();
        vector<vector<int>> d(len,vector<int>(len,-1));
        int r;
        r = dfs(d,nums,1,N);
        return r;
    }
    
    int dfs(vector<vector<int>>& d,const vector<int>& A,int i,int j){
        int& ans = d[i][j];
        if(ans > -1) return ans;
        if(i>j) return ans = 0;
        for(int k = i;k <= j;++k){
            ans = max(ans,A[i-1]*A[k]*A[j+1]+dfs(d,A,i,k-1)+dfs(d,A,k+1,j));
        }
        return ans;
    }
解法三 动态规划
在解法二的基础上再进一步。

大区间能分解出独立的小区间，并先爆小区间。

我们可以先算小区间，并组合出大区间。

例如：[3,1,5,8]

第一步，算长度为1的区间。

先算3,1,5,8。

第2步，算长度为2的区间。

再算3,1 ; 1,5 ; 5,8。

对于3,1。3最后爆，1已经算出；同样1最后爆，3已经算出。

对于1,5。1最后爆，5已经算出；同样5最后爆，1已经算出。

对于5,8。5最后爆，8已经算出；同样8最后爆，5已经算出。

第3步，算长度为3的区间。

再算3,1,5 ; 1,5,8。

对于3,1,5。3最后爆，1,5已经算出；1最后爆，3和5已经算出。 5最后爆，3,1已经算出。

对于1,5,8。1最后爆，5,8已经算出；5最后爆，1和8已经算出。 8最后爆，1,5已经算出。

第4步，算3，1，5，8.

3最后爆，1，5，8已经算出。1最后爆,3和5，8已经算出。5最后爆，3，1和8已经算出。8最后爆，3，1，5已经算出。

执行用时 :
16 ms
, 在所有 C++ 提交中击败了
99.62%
的用户
内存消耗 :
9.6 MB
, 在所有 C++ 提交中击败了
5.08%
的用户
（时间绝杀，空间炸了）

上代码：
class Solution {
public:
    int N;
    int maxCoins(vector<int>& nums) {
        N = nums.size();
        nums.insert(nums.begin(),1);
        nums.push_back(1);
        const int len = nums.size();
        vector<vector<int>> d(len,vector<int>(len,0));
        for(int c = 1;c <= N;++c){
            for(int i = 1;i+c-1 <= N;++i){
                const int j = i+c-1;
                int& ans=d[i][j];
                for(int k=i;k<=j;++k){
                    ans=max(ans,nums[i-1]*nums[k]*nums[j+1]+d[i][k-1]+d[k+1][j]);
                }
            }
        }
        return d[1][N];
    }
};