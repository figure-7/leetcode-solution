题目难度：HARD

给你一个正方形字符数组 board ，你从数组最右下方的字符 'S' 出发。

你的目标是到达数组最左上角的字符 'E' ，数组剩余的部分为数字字符 1, 2, ..., 9 或者障碍 'X'。在每一步移动中，你可以向上、向左或者左上方移动，可以移动的前提是到达的格子没有障碍。

一条路径的 「得分」 定义为：路径上所有数字的和。

请你返回一个列表，包含两个整数：第一个整数是 「得分」 的最大值，第二个整数是得到最大得分的方案数，请把结果对 10^9 + 7 取余。

如果没有任何路径可以到达终点，请返回 [0, 0] 。

 

示例 1：

输入：board = ["E23","2X2","12S"]
输出：[7,1]
示例 2：

输入：board = ["E12","1X1","21S"]
输出：[4,2]
示例 3：

输入：board = ["E11","XXX","11S"]
输出：[0,0]
 

提示：

2 <= board.length == board[i].length <= 100

思路：周赛第四题，动归
dp[i][j]表示走到ij下标的最大得分是多少，cnt[i][j]表示走到ij下标的最大得分方案数是多少
初始化起点dp值为0，cnt值为1
之后从右下到左上二维遍历，如果cnt值为0就代表无法到达，就直接continue
否则利用BFS三向封印思想，向上和向左，如果不是障碍，就判断当前各自的dp值加上目标dp值与原目标最大dp值的大小
如果大了就更新dp值，cnt清零，如果等于就把cnt累加
最后返回dp[0][0],cnt[0][0]集合即可

上代码：
const int MOD = 1e9 + 7;
class Solution {
public:
    int dp[150][150], cnt[150][150];
    
    vector<int> pathsWithMaxScore(vector<string>& board) {
        int n = board.size(), m = board[0].length();
        memset(dp, 0, sizeof(dp));
        memset(cnt, 0, sizeof(cnt));
        
        cnt[n - 1][m - 1] = 1;
        board[0][0] = '0';
        for (int i = n - 1; i >= 0; i--){
            for (int j = m - 1; j >= 0; j--){
                if (cnt[i][j] == 0) continue;
                if (i > 0 && board[i - 1][j] != 'X'){
                    int v = dp[i][j] + (board[i - 1][j] - '0');
                    if (v > dp[i - 1][j]) dp[i - 1][j] = v, cnt[i - 1][j] = 0;
                    if (v == dp[i - 1][j]) cnt[i - 1][j] = (cnt[i - 1][j] + cnt[i][j]) % MOD;
                }
                if (j > 0 && board[i][j - 1] != 'X'){
                    int v = dp[i][j] + (board[i][j - 1] - '0');
                    if (v > dp[i][j - 1]) dp[i][j - 1] = v, cnt[i][j - 1] = 0;
                    if (v == dp[i][j - 1]) cnt[i][j - 1] = (cnt[i][j - 1] + cnt[i][j]) % MOD;
                }
                if (i > 0 && j > 0 && board[i - 1][j - 1] != 'X'){
                    int v = dp[i][j] + (board[i - 1][j - 1] - '0');
                    if (v > dp[i - 1][j - 1]) dp[i - 1][j - 1] = v, cnt[i - 1][j - 1] = 0;
                    if (v == dp[i - 1][j - 1]) cnt[i - 1][j - 1] = (cnt[i - 1][j - 1] + cnt[i][j]) % MOD;
                }
            }
        }
        
        return {dp[0][0], cnt[0][0]};
    }
};