题目难度：HARD

给定两个单词?word1 和?word2，计算出将?word1?转换成?word2 所使用的最少操作数?。


你可以对一个单词进行如下三种操作：

插入一个字符
删除一个字符
替换一个字符


示例?1:

输入: word1 = "horse", word2 = "ros"

输出: 3

解释: 
horse -> rorse (将 'h' 替换为 'r')

rorse -> rose (删除 'r')

rose -> ros (删除 'e')


示例?2:

输入: word1 = "intention", word2 = "execution"

输出: 5

解释: 
intention -> inention (删除 't')

inention -> enention (将 'i' 替换为 'e')

enention -> exention (将 'n' 替换为 'x')

exention -> exection (将 'n' 替换为 'c')

exection -> execution (插入 'u')



思路：首先，书上还有一个效率更高的滚动数组的方法，这里不详述（这样写效率也很高！）
利用dp来做，dp[i][j]表示A[0,i]和B[0,j]之间的最小编辑距离
dp表达式：if(word1[i - 1] == word2[j - 1])	f[i][j] = f[i - 1][j - 1];
          else	int mn = min(f[i - 1][j], f[i][j - 1]);	f[i][j] = 1 + min(f[i - 1][j - 1], mn);
初始化：f[i][0] = i;f[0][j] = j;就相当于一直执行字符添加操作
遍历当两个字符相等时：f[i][j] = f[i - 1][j - 1];
当两个字符不等时：
1：字符替换：f[i][j] = 1 + f[i - 1][j - 1];
2：字符添加：f[i][j] = 1 + f[i][j - 1];
3：字符删除：f[i][j] = 1 + f[i - 1][j];
返回结果对应下标的dp值即可

执行用时 :
8 ms
, 在所有 cpp 提交中击败了
98.90%
的用户
内存消耗 :
9.6 MB
, 在所有 cpp 提交中击败了
70.14%
的用户
（很好的效率！）

上代码：
class Solution {
public:
    int minDistance(string word1, string word2) {
        const size_t n = word1.size();
        const size_t m = word2.size();
        //长度为 n 的字符串， 有 n+1 个隔板
        int f[n + 1][m + 1];
        for(size_t i = 0; i <= n; i++)
            f[i][0] = i;
        for(size_t j = 0; j <= m; j++)
            f[0][j] = j;
        
        for(size_t i = 1; i <= n; i++) {
            for(size_t j = 1; j <= m; j++) {
                if(word1[i - 1] == word2[j - 1])
                    f[i][j] = f[i - 1][j - 1];
                else {
                    int mn = min(f[i - 1][j], f[i][j - 1]);
                    f[i][j] = 1 + min(f[i - 1][j - 1], mn);
                }
            }
        }
        return f[n][m];
    }
};