题目难度：HARD

给定一个字符串数组 A，找到以 A 中每个字符串作为子字符串的最短字符串。

我们可以假设 A 中没有字符串是 A 中另一个字符串的子字符串。

 

示例 1：

输入：["alex","loves","leetcode"]
输出："alexlovesleetcode"
解释："alex"，"loves"，"leetcode" 的所有排列都会被接受。
示例 2：

输入：["catg","ctaagt","gcta","ttca","atgcatc"]
输出："gctaagttcatgcatc"
 

提示：

1 <= A.length <= 12
1 <= A[i].length <= 20

思路：DP
接下来上题解区题解：

执行用时 :
160 ms
, 在所有 C++ 提交中击败了
46.57%
的用户
内存消耗 :
20.4 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间一般，空间完杀！）

上代码：
class Solution {
public:
    string shortestSuperstring(vector<string>& A) {
        vector<vector<int>> B(A.size(),vector<int>(A.size(),0));
        for(int i=0;i<A.size();++i){
            for(int j=0;j<A.size();++j){
                if(i==j) B[i][j] = A[i].size();
                else B[i][j] = overlap(A[i],A[j]);
            }
        }
        int S=(1<<A.size());
        vector<vector<int>> d(S,vector<int>(A.size(),0));
        vector<vector<pair<int,int>>> prev(S,vector<pair<int,int>>(A.size()));
        for(int s=0;s<S;++s){         
            for(int i=0;i<A.size();++i){
                if(!(s & (1<<i))) continue;
                for(int j=0;j<A.size();++j){
                    if(s & (1 << j)) continue;
                    int& ans=d[s|(1<<j)][j];
                    int r=d[s][i] + B[i][j];
                    if(ans <= r){
                        ans = r;
                        prev[s|(1<<j)][j] = {s,i};
                    }
                }
            }
        }
        
        int maxi=0;
        for(int i=0;i<A.size();++i){
            if(d[S-1][i] > d[S-1][maxi]){
                maxi = i;
            }
        }
        
        if(d[S-1][maxi] == 0){
            string ans;
            for(auto x:A){
                ans+=x;
            }
            return ans;
        }
        
        int s=S-1;
        vector<int> v;
        while(s){
            v.push_back(maxi);
            pair<int,int> p=prev[s][maxi];
            s = p.first;
            maxi=p.second;
        }
        string ans;
        for(int i=v.size()-1;i>=0;--i){
            if(i == v.size()-1){
                ans += A[v[i]];
            }else{
                int over = B[v[i+1]][v[i]];
                ans += A[v[i]].substr(over);
            }
        }
        
        return ans;
    }
    
    int overlap(const string& a,const string& b){
        int p=max(0,(int)(a.size()-b.size()))+1;
        for(int i=p;i<a.size();++i){
            if(strncmp(a.c_str()+i,b.c_str(),a.size()-i) == 0){
                return a.size()-i;
            }
        }
        return 0;
    }
};