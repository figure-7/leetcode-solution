题目难度：HARD

给你一个整数数组 arr，每一次操作你都可以选择并删除它的一个 回文 子数组 arr[i], arr[i+1], ..., arr[j]（ i <= j）。

注意，每当你删除掉一个子数组，右侧元素都会自行向前移动填补空位。

请你计算并返回从数组中删除所有数字所需的最少操作次数。

 

示例 1：

输入：arr = [1,2]
输出：2
示例 2：

输入：arr = [1,3,4,1,5]
输出：3
解释：先删除 [4]，然后删除 [1,3,1]，最后再删除 [5]。
 

提示：

1 <= arr.length <= 100
1 <= arr[i] <= 20

思路：区间dp，比较麻烦需要考虑多种情况
1.直接合并：
例：1,2,3
dp表达式：ans=1+getdp(l+1,r);
2.两个区间直接合并
例：1,2,2,1
dp表达式：ans=min(ans,getdp(l,i)+getdp(i+1,r))；
3.中间元素和左界一致时，同时向左dp，而且判断是否相连，相连额外加一
dp表达式：ans=min(ans,getdp(l+1,i-1)+(l+1==i)+getdp(i+1,r));
具体见下面注释，也是本人写的，可能比较磕碜。。

上代码：
class Solution {
public:
    vector<vector<int> > dp;
    vector<int> a;
    int getdp(int l,int r) {
        if(l>r) return 0;//首先要做空区间判断，这里比递推简单
        if(dp[l][r]) return dp[l][r];//当前已经计算过了，直接返回结果
        int &ans = dp[l][r];
        ans=1+getdp(l+1,r);//直接次数加一的转移
        for(int i=l+1;i<=r;i++) {
            ans=min(ans,getdp(l,i)+getdp(i+1,r));//判断把两个区间直接合并的转移
            if(a[i]==a[l])//判断中间元素和左界一致时
                ans=min(ans,getdp(l+1,i-1)+(l+1==i)+getdp(i+1,r));//判断向前合并的转移，右边同上遍历dp即可，注意（l+1==i）是判断（1，1）这种情况是需要执行一次的，而遍历不会加一，所以加一次操作
        }
        return ans;
    }
    int minimumMoves(vector<int>& arr) {
        int n=arr.size();
        dp.assign(n,vector<int>(n,0));
        a=arr;
        return getdp(0,n-1);
    }
};