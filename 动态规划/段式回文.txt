题目难度：HARD

段式回文 其实与 一般回文 类似，只不过是最小的单位是 一段字符 而不是 单个字母。

举个例子，对于一般回文 "abcba" 是回文，而 "volvo" 不是，但如果我们把 "volvo" 分为 "vo"、"l"、"vo" 三段，则可以认为 “(vo)(l)(vo)” 是段式回文（分为 3 段）。

 

给你一个字符串 text，在确保它满足段式回文的前提下，请你返回 段 的 最大数量 k。

如果段的最大数量为 k，那么存在满足以下条件的 a_1, a_2, ..., a_k：

每个 a_i 都是一个非空字符串；
将这些字符串首位相连的结果 a_1 + a_2 + ... + a_k 和原始字符串 text 相同；
对于所有1 <= i <= k，都有 a_i = a_{k+1 - i}。
 

示例 1：

输入：text = "ghiabcdefhelloadamhelloabcdefghi"
输出：7
解释：我们可以把字符串拆分成 "(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)"。
示例 2：

输入：text = "merchant"
输出：1
解释：我们可以把字符串拆分成 "(merchant)"。
示例 3：

输入：text = "antaprezatepzapreanta"
输出：11
解释：我们可以把字符串拆分成 "(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)"。
示例 4：

输入：text = "aaa"
输出：3
解释：我们可以把字符串拆分成 "(a)(a)(a)"。
 

提示：

text 仅由小写英文字符组成。
1 <= text.length <= 1000

思路：DP
接下来上题解区题解：
思路类似最长回文子串。

递归判断回文串。每次两端取两个字符比较。

如果这两个字符相等，再递归判断，除去这两个字符的字符串是否是回文串。

如果这两个字符不相等 ，结束判断。

例如：”aba”

先判断，a=a，再判断b是回文串。整个也是回文串。

回到本题中，比较的不仅是字符还是段，段中字符个数不固定。

本题的难点是怎么在两端取等长的段。

方法就是枚举段的长度。长度=1，2，3，4，5,….，直到字符串长的一半。

再比较段是否相等。

例如：”ghiabcdefhelloadamhelloabcdefghi”

段长为1，取g和i，不等。

段长为2，取gh和hi，不等。

段长为3，取ghi和ghi，相等。 此时，将两端的2个ghi段去掉，再去判断剩余的能形成多少个回文段。

段长为4，取ghia和fghi，不等。

。。。。。。

dfs(s,i,j){
    if(i > j) 返回0;
    if(i == j) 返回1;
    ans=1;
    for(1 < len < (j-i+1)/2){
        a=s[i,...,i+len-1];
        b=s[j+1-len,...,j];
        if(a == b){
            ans=max(ans,2+dfs(s,i+len,j-len)):
        }
    }
    返回ans;
}

执行用时 :
800 ms
, 在所有 C++ 提交中击败了
5.34%
的用户
内存消耗 :
335.6 MB
, 在所有 C++ 提交中击败了
6.58%
的用户
（时空都炸了。。。）

上代码：
class Solution {
public:
    int longestDecomposition(string text) {
        int ans=0;
        ans=dfs(text,0,text.size()-1);
        return ans;
    }
    
    int dfs(const string& s,int i,int j){
        if(i > j) return 0;
        if(i == j) return 1;
        int ans=1;
        for(int len=1;len<=(j-i+1)/2;++len){
            string a=s.substr(i,len);
            string b=s.substr(j+1-len,len);
            if(a == b){
                ans=max(ans,2+dfs(s,i+len,j-len));
            }
        }
        return ans;
    }
};