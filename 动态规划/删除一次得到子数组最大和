题目难度：MEDIUM

给你一个整数数组，返回它的某个 非空 子数组（连续元素）在执行一次可选的删除操作后，所能得到的最大元素总和。

换句话说，你可以从原数组中选出一个子数组，并可以决定要不要从中删除一个元素（只能删一次哦），（删除后）子数组中至少应当有一个元素，然后该子数组（剩下）的元素总和是所有子数组之中最大的。

注意，删除一个元素后，子数组 不能为空。

请看示例：

示例 1：

输入：arr = [1,-2,0,3]
输出：4
解释：我们可以选出 [1, -2, 0, 3]，然后删掉 -2，这样得到 [1, 0, 3]，和最大。
示例 2：

输入：arr = [1,-2,-2,3]
输出：3
解释：我们直接选出 [3]，这就是最大和。
示例 3：

输入：arr = [-1,-1,-1,-1]
输出：-1
解释：最后得到的子数组不能为空，所以我们不能选择 [-1] 并从中删去 -1 来得到 0。
     我们应该直接选择 [-1]，或者选择 [-1, -1] 再从中删去一个 -1。
 

提示：

1 <= arr.length <= 10^5
-10^4 <= arr[i] <= 10^4

思路：还是dp，dp表达式：L[i] = max(L[i - 1] + arr[i], arr[i]);代表从左向右遍历
R[i] = max(R[i + 1] + arr[i], arr[i]);代表从右向左遍历
然后去隔一个下标的值累加后取最大值即可

例如案例一：
L的dp执行后：1 -1 0 3
R的dp执行后：3 3 -2 1
隔项相加后：3 4 -3 1 3

例如案例二：
1 -1 -2 3
3  1 -2 1
3  2 -3 -1 3

例如案例三：
-1 -1 -1 -1
-1 -1 -1 -1
-1 -2 -2 -2 -1
（见过类似方式的题：分糖果贪心。但是这题真的没想到这么弄）

上代码：
class Solution {
public:
    int maximumSum(vector<int>& arr) {
      if(arr.size() == 1) return arr[0];
      
      vector<int> L(arr.size());
      vector<int> R(arr.size());
      
      int ans = arr[0];
      
      L[0] = arr[0];
      for(int i = 1; i < arr.size(); i ++) {
        L[i] = max(L[i - 1] + arr[i], arr[i]);
        ans = max(ans, L[i]);
      }
      
      R[arr.size() - 1] = arr[arr.size() - 1];
      
      for(int i = arr.size() - 2; i >= 0; i --) {
        R[i] = max(R[i + 1] + arr[i], arr[i]);
      }
      
      for(int i = 0; i < arr.size(); i ++) {
        int x = 0;
        if(i > 0) x = L[i - 1];
        
        int y = 0;
        if(i < arr.size() - 1) y = R[i + 1];
        
        ans = max(ans, x + y);
      }
      
      return ans;
    }
};
