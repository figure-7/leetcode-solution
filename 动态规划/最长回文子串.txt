题目难度：MEDIUM

给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"

思路：首先个人用暴力法，直接超时，，，
dp算法，设置一个二维数组，先将字符串遍历一次，把两两相同的字符对应的下标值作为二维数组的两个下标值，将对应值赋值1，并更新初始下标
然后对每个长度遍历，在每个长度条件下遍历字符串看是否满足条件，并更新下标和最大长度
最后返回从初始下标开始的最大长度个字符构成的字符串即可
dp表达式：dp[i][i]=1; //单个字符是回文串
dp[i][i+1]=1 if s[i]=s[i+1]; //连续两个相同字符是回文串

执行用时 :
248 ms
, 在所有 C++ 提交中击败了
34.30%
的用户
内存消耗 :
186.5 MB
, 在所有 C++ 提交中击败了
11.25%
的用户

上代码：
class Solution {
public:
    string longestPalindrome(string s) {
        int len=s.size();
        if(len==0||len==1)
            return s;
        int start=0;//回文串起始位置
        int max=1;//回文串最大长度
        vector<vector<int>>  dp(len,vector<int>(len));//定义二维动态数组
        for(int i=0;i<len;i++)//初始化状态
        {
            dp[i][i]=1;
            if(i<len-1&&s[i]==s[i+1])
            {
                dp[i][i+1]=1;
                max=2;
                start=i;
            }
        }
        for(int l=3;l<=len;l++)//l表示检索的子串长度，等于3表示先检索长度为3的子串
        {
            for(int i=0;i+l-1<len;i++)
            {
                int j=l+i-1;//终止字符位置
                if(s[i]==s[j]&&dp[i+1][j-1]==1)//状态转移
                {
                    dp[i][j]=1;
                    start=i;
                    max=l;
                }
            }
        }
        return s.substr(start,max);//获取最长回文子串
    }
};