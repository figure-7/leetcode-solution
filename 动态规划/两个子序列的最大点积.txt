题目难度：HARD

给你两个数组 nums1 和 nums2 。

请你返回 nums1 和 nums2 中两个长度相同的 非空 子序列的最大点积。

数组的非空子序列是通过删除原数组中某些元素（可能一个也不删除）后剩余数字组成的序列，但不能改变数字间相对顺序。

比方说，[2,3,5] 是 [1,2,3,4,5] 的一个子序列而 [1,5,3] 不是。

 

示例 1：

输入：nums1 = [2,1,-2,5], nums2 = [3,0,-6]
输出：18
解释：从 nums1 中得到子序列 [2,-2] ，从 nums2 中得到子序列 [3,-6] 。
它们的点积为 (2*3 + (-2)*(-6)) = 18 。
示例 2：

输入：nums1 = [3,-2], nums2 = [2,-6,7]
输出：21
解释：从 nums1 中得到子序列 [3] ，从 nums2 中得到子序列 [7] 。
它们的点积为 (3*7) = 21 。
示例 3：

输入：nums1 = [-1,-1], nums2 = [1,1]
输出：-1
解释：从 nums1 中得到子序列 [-1] ，从 nums2 中得到子序列 [1] 。
它们的点积为 -1 。
 

提示：

1 <= nums1.length, nums2.length <= 500
-1000 <= nums1[i], nums2[i] <= 100
 

点积：

定义 a = [a1, a2,…, an] 和 b = [b1, b2,…, bn] 的点积为：



这里的 Σ 指示总和符号。

思路：周赛第四题，DP
dp[i][j]表示A的前i个数字与B的前j个数字能做到的最大子序列点积和
dp[i][j] <- dp[i - 1][j - 1] + A[i] *B[j]
dp[i][j]<-dp[i - 1][j]
dp[i][j]<-dp[i][j - 1]
初始化每个dp值为当前两个下标对应数组值的积
二重循环，三种情况：
取当前ij点积：dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + a * b);
不取i：dp[i][j] = max(dp[i][j], dp[i - 1][j]);
不取j：dp[i][j] = max(dp[i][j], dp[i][j - 1]);
每次结果取当前dp取最大值
返回最大值即可

上代码：
const int MAXN = 500 + 50;
int dp[MAXN][MAXN];

class Solution {
public:
    int maxDotProduct(vector<int>& A, vector<int>& B) {
        int n = A.size(), m = B.size();
        
        dp[0][0] = 0;
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= m; j++)
                dp[i][j] = A[i - 1] * B[j - 1];
        
        int ans = A[0] * B[0];
        for (int i = 1; i <= n; i++){
            for (int j = 1; j <= m; j++){
                int a = A[i - 1], b = B[j - 1];
                if (i > 1) dp[i][j] = max(dp[i][j], dp[i - 1][j]);
                if (j > 1) dp[i][j] = max(dp[i][j], dp[i][j - 1]);
                if (i > 1 && j > 1) dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + a * b);
                ans = max(ans, dp[i][j]);
            }
        }
        
        return ans;
    }
};