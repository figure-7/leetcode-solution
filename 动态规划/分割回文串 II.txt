题目难度：HARD

给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。

返回符合要求的最少分割次数。



示例:

输入:?"aab"

输出: 1

解释: 进行一次分割就可将?s 分割成 ["aa","b"] 这样两个回文子串。


思路：dp实现，比较麻烦
dp表达式：f[i] = min(f[i], f[j + 1] + 1);（注意这不是贪心）
首先建立一个二维布尔数组p[i][j]代表[i,j]区间内是否是回文字符串，初始化都为false（这样可以将dp降至一维）
然后对dp数组初始化，f[i] = n - i - 1
然后外循环从右往左遍历，内循环从外循环指针位置往右遍历
判断内外指针对应下标的字符是否相等
相等就再判断是否下标值之差小于2（肯定能构成回文子串，例如"a","aa"），小于2直接把对应指针的布尔数组值赋true；
或者是外指针加一内指针减一对应布尔数组值为true（之前判断该区间为回文子串，例如"abccba"中字符"a"判断相等了，那么中间之前判断过对应布尔值为true）
也可以直接把对应指针的布尔数组值赋true（"abccba"为回文）
之后每次内部循环f[i]都利用上述的dp表达式判断可以实现的最小值即可
细节见注释

执行用时 :
32 ms
, 在所有 cpp 提交中击败了
64.43%
的用户
内存消耗 :
10.9 MB
, 在所有 cpp 提交中击败了
38.76%
的用户
（效率一般）

上代码：
#define INF 0x3f3f3f3f
class Solution {
public:
    int minCut(string s) {
        const int n = s.size();
        int f[n + 1];
        bool p[n][n];
        fill_n(&p[0][0], n * n, false);
        //the worst case is cutting by each char
        for(int i = 0; i <= n; i++)
            f[i] = n - i - 1;   //最后一个 f[n]=-1
        for(int i = n - 1; i >= 0; i--) {
            for(int j = i; j < n; j++) {
                if(s[i] == s[j] && (j - i < 2 || p[i + 1][j - 1])) {
                    p[i][j] = true;
                    f[i] = min(f[i], f[j + 1] + 1);
                }
            }
        }
        return f[0];
    }
};