题目难度：HARD

给你一个整数数组 nums 和一个整数 k ，请你返回 非空 子序列元素和的最大值，子序列需要满足：

子序列中每两个 相邻 的整数 nums[i] 和 nums[j] ，它们在原数组中的下标 i 和 j 满足 i < j 且 j - i <= k 。

数组的子序列定义为：

将数组中的若干个数字删除（可以删除 0 个数字），剩下的数字按照原本的顺序排布。

 

示例 1：

输入：nums = [10,2,-10,5,20], k = 2
输出：37
解释：子序列为 [10, 2, 5, 20] 。
示例 2：

输入：nums = [-1,-2,-3], k = 1
输出：-1
解释：子序列必须是非空的，所以我们选择最大的数字。
示例 3：

输入：nums = [10,-2,-10,-5,20], k = 2
输出：23
解释：子序列为 [10, -2, -5, 20] 。
 

提示：

1 <= k <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4

思路：周赛第四题，DP
dp[i]表示i结尾（强制选择第i个元素）的最大子序列的最大和是多少
dp[i] = nums[i - 1] + max{dp[j]},i-k<=j-i
优先队列存dp[i],i
当前取优先队列要看是不是在i-k<=j-i，不在就可以弹出（下界越来越大）
否则队列不空就取最大转移再与当前下标构成对入队列
遍历时初始值定义为当前值（只取当前数）
然后上述操作计算
最后返回最大的DP值即可

上代码：
#define PII pair<int, int>
#define MP(x, y) make_pair(x, y)

const int MAXN = 1e5 + 50;
priority_queue<PII> que;
int dp[MAXN];

class Solution {
public:
    int constrainedSubsetSum(vector<int>& nums, int k) {
        int n = nums.size();
        
        while(!que.empty()) que.pop();
        
        for (int i = 1; i <= n; i++){
            int v = nums[i - 1];
            dp[i] = v;
            while(!que.empty() && i - que.top().second > k) que.pop();
            if (!que.empty()) dp[i] = max(dp[i], que.top().first + v);
            que.push(MP(dp[i], i));
        }
        
        int ans = dp[1];
        for (int i = 2; i <= n; i++) ans = max(ans, dp[i]);
        return ans;
    }
};