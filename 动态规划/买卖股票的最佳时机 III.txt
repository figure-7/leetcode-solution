题目难度：HARD
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [3,3,5,0,0,3,1,4]
输出: 6
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: [7,6,4,3,1] 
输出: 0 
解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。

思路：对该数组去两个最大的差值，找【0，i】和【i，n 】两区间最大值，
即分别正向反向遍历，取和的最大值即为结果
例如案例1中：
正向：0,2,2,2,2,2,3
反向：3,3,3,3,3,3,3
相加后：3,5,5,5,5,5,6
结果为6
案例2中：
正向：1,2,3,4
反向：4,3,2,1
相加后：5,5,5,5
结果为5
（有点绕，真的没想到......不难其实）

执行用时 : 4 ms, 在Best Time to Buy and Sell Stock III的C++提交中击败了99.87% 的用户
内存消耗 : 9.8 MB, 在Best Time to Buy and Sell Stock III的C++提交中击败了28.35% 的用户

上代码：
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int len = (int)prices.size();
        if(len <= 1) {
            return 0;
        }
        vector<int> profits;
        profits.resize(len);
        int minp = prices[0];
        int sum = numeric_limits<int>::min();
        for(int i = 1; i < len; i++) {
            minp = min(prices[i-1], minp);
            profits[i] = max(sum, prices[i] - minp);
            sum = profits[i];
        }
        int maxp = prices[len - 1];
        int sum2 = numeric_limits<int>::min();
        for(int i=len - 2; i >= 0; i--) {
            maxp = max(prices[i+1], maxp);
            sum2 = max(sum2, maxp - prices[i]);
            if(sum2 > 0) {
                 profits[i] = profits[i] +sum2;
            }
            sum = max(sum, profits[i]);
        }
        return sum > 0 ? sum : 0;
    }
};