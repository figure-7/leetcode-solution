题目难度：HARD


二指输入法定制键盘在 XY 平面上的布局如上图所示，其中每个大写英文字母都位于某个坐标处，例如字母 A 位于坐标 (0,0)，字母 B 位于坐标 (0,1)，字母 P 位于坐标 (2,3) 且字母 Z 位于坐标 (4,1)。

给你一个待输入字符串 word，请你计算并返回在仅使用两根手指的情况下，键入该字符串需要的最小移动总距离。

坐标 (x1,y1) 和 (x2,y2) 之间的距离是 |x1 - x2| + |y1 - y2|。 

注意，两根手指的起始位置是零代价的，不计入移动总距离。

你的两根手指的起始位置也不必从首字母或者前两个字母开始。

 

示例 1：

输入：word = "CAKE"
输出：3
解释： 
使用两根手指输入 "CAKE" 的最佳方案之一是： 
手指 1 在字母 'C' 上 -> 移动距离 = 0 
手指 1 在字母 'A' 上 -> 移动距离 = 从字母 'C' 到字母 'A' 的距离 = 2 
手指 2 在字母 'K' 上 -> 移动距离 = 0 
手指 2 在字母 'E' 上 -> 移动距离 = 从字母 'K' 到字母 'E' 的距离  = 1 
总距离 = 3
示例 2：

输入：word = "HAPPY"
输出：6
解释： 
使用两根手指输入 "HAPPY" 的最佳方案之一是：
手指 1 在字母 'H' 上 -> 移动距离 = 0
手指 1 在字母 'A' 上 -> 移动距离 = 从字母 'H' 到字母 'A' 的距离 = 2
手指 2 在字母 'P' 上 -> 移动距离 = 0
手指 2 在字母 'P' 上 -> 移动距离 = 从字母 'P' 到字母 'P' 的距离 = 0
手指 1 在字母 'Y' 上 -> 移动距离 = 从字母 'A' 到字母 'Y' 的距离 = 4
总距离 = 6
示例 3：

输入：word = "NEW"
输出：3
示例 4：

输入：word = "YEAR"
输出：7
 

提示：

2 <= word.length <= 300
每个 word[i] 都是一个大写英文字母。

思路：周赛第四题，二指禅（误），三维DP（或五维？？？）
dp[i][a][b]表示当前输入到了字符串的第i个字符 ，第一只指头在a按钮，第二只在b的最小移动距离
dp表达式：dp[i][v][b] = dp[i - 1][a][b] + cost;  dp[i][a][v] = dp[i - 1][a][b] + cost;
初始化为-1，然后dp[0][26][26] = 0
然后外部循环遍历数组将字符转换为数字，并通过余运算获取横纵坐标
中间循环26次，内部循环26次，如果状态不存在就continue，否则分别转移两根指头
先判断每根指头有没有输入过，输入过的话代价为0，否则代价就是曼哈顿距离
之后两根指头分别运算，把对应下标改为当前字符对应数字，并把值加上代价
最后状态即为dp[n][a][b]，枚举一下指头位置（26*26循环）
然后取除-1外的最小值返回即可

上代码：
int dp[350][30][30];
class Solution {
public:
    int getX(char x){
        int c = x - 'A';
        return c / 6;
    }
    int getY(char x){
        int c = x - 'A';
        return c % 6;
    }
    int Abs(int x){
        if (x < 0) return -x;
        return x;
    }
    int minimumDistance(string word) {
        int n = word.size();
        
        memset(dp, -1, sizeof(dp));    
        dp[0][26][26] = 0;
        
        for (int i = 1; i <= n; i++){
            char c = word[i - 1], v = c - 'A';
            int x = getX(c), y = getY(c);
            
            for (int a = 0; a <= 26; a++){
                for (int b = 0; b <= 26; b++){
                    if (dp[i - 1][a][b] == -1) continue;
                    int cost = 0;
                    // A
                    if (a == 26) cost = 0; else{
                        cost = Abs(x - getX(a + 'A')) + Abs(y - getY(a + 'A'));
                    }
                    if (dp[i][v][b] == -1 || dp[i][v][b] > dp[i - 1][a][b] + cost) dp[i][v][b] = dp[i - 1][a][b] + cost;
                    // B
                    if (b == 26) cost = 0; else{
                        cost = Abs(x - getX(b + 'A')) + Abs(y - getY(b + 'A'));
                    }
                    if (dp[i][a][v] == -1 || dp[i][a][v] > dp[i - 1][a][b] + cost) dp[i][a][v] = dp[i - 1][a][b] + cost;
                }
            }
        }
        
        int ans = -1;
        for (int a = 0; a <= 26; a++){
            for (int b = 0; b <= 26; b++){
                if (dp[n][a][b] == -1) continue;
                if (ans == -1 || ans > dp[n][a][b]) ans = dp[n][a][b];
            }
        }
        
        return ans;
    }
};