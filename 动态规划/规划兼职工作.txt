题目难度：HARD

你打算利用空闲时间来做兼职工作赚些零花钱。

这里有 n 份兼职工作，每份工作预计从 startTime[i] 开始到 endTime[i] 结束，报酬为 profit[i]。

给你一份兼职工作表，包含开始时间 startTime，结束时间 endTime 和预计报酬 profit 三个数组，请你计算并返回可以获得的最大报酬。

注意，时间上出现重叠的 2 份工作不能同时进行。

如果你选择的工作在时间 X 结束，那么你可以立刻进行在时间 X 开始的下一份工作。

 

示例 1：



输入：startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
输出：120
解释：
我们选出第 1 份和第 4 份工作， 
时间范围是 [1-3]+[3-6]，共获得报酬 120 = 50 + 70。
示例 2：



输入：startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
输出：150
解释：
我们选择第 1，4，5 份工作。 
共获得报酬 150 = 20 + 70 + 60。
示例 3：



输入：startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
输出：6
 

提示：

1 <= startTime.length == endTime.length == profit.length <= 5 * 10^4
1 <= startTime[i] < endTime[i] <= 10^9
1 <= profit[i] <= 10^4

思路：dp+递归求解
dp+递归表达式：int res = solve(start+1);
        int tmp = profit[idx[start]];
        for (int j = start + 1; j < n; j++) {
            if (startTime[idx[j]] >= endTime[idx[start]]) {
                tmp += solve(j);
                break;
            }
        }
先对数组排序，遇到开始时间相同时就按照结束时间排序
通过每次递归保证每个工作都能被作为第一个开始的兼职，（确保计算了所有情况）
每次递归也要传递当前工作的薪水
之后dp再每个下一个兼职的开始时间再当前兼职的结束时间之后的兼职薪水累加
同时break剪枝，之后在递归计算出最大薪水

上代码（java版）：
class Solution {
 int[] dp;
    int n;
    Integer[] idx;
    int[] startTime;
    int[] endTime;
    int[] profit;
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        n = startTime.length;
        dp = new int[n];
        idx = new Integer[n];
        this.startTime = startTime;
        this.endTime = endTime;
        this.profit = profit;

        Arrays.fill(dp , -1);
        for (int i = 0; i < n; i++) idx[i] = i;
        Arrays.sort(idx, new Comparator<Integer>(){

            @Override
            public int compare(Integer o1, Integer o2) {
                if (startTime[o1] == startTime[o2]) return endTime[o1] - endTime[o2];
                return startTime[o1] - startTime[o2];
            }
        });
        return solve(0);
    }

    private int solve(int start) {
        if (start == n) return 0;
        if (dp[start] != -1) return dp[start];

        int res = solve(start+1);
        int tmp = profit[idx[start]];
        for (int j = start + 1; j < n; j++) {
            if (startTime[idx[j]] >= endTime[idx[start]]) {
                tmp += solve(j);
                break;
            }
        }
        res = Math.max(res, tmp);
        return dp[start] = res;
    }
}