题目难度：MEDIUM

亚历克斯和李继续他们的石子游戏。许多堆石子 排成一行，每堆都有正整数颗石子 piles[i]。游戏以谁手中的石子最多来决出胜负。

亚历克斯和李轮流进行，亚历克斯先开始。最初，M = 1。

在每个玩家的回合中，该玩家可以拿走剩下的 前 X 堆的所有石子，其中 1 <= X <= 2M。然后，令 M = max(M, X)。

游戏一直持续到所有石子都被拿走。

假设亚历克斯和李都发挥出最佳水平，返回亚历克斯可以得到的最大数量的石头。

 

示例：

输入：piles = [2,7,9,4,4]
输出：10
解释：
如果亚历克斯在开始时拿走一堆石子，李拿走两堆，接着亚历克斯也拿走两堆。在这种情况下，亚历克斯可以拿到 2 + 4 + 4 = 10 颗石子。 
如果亚历克斯在开始时拿走两堆石子，那么李就可以拿走剩下全部三堆石子。在这种情况下，亚历克斯可以拿到 2 + 7 = 9 颗石子。
所以我们返回更大的 10。 
 

提示：

1 <= piles.length <= 100
1 <= piles[i] <= 10 ^ 4

思路：
本题难点在于理解两者都发挥“最佳水平”，“最佳水平”在于，每当轮到自己拿石子的时候，要在后继的所有状态中，选择对自己最有利的，那么也就是要遍历后继的所有状态，并选择一个最优解。
我们设 dfs(i, M) 表示，当从第 i 堆石子开始拿，允许拿 M <= x <= 2 * M 时，在剩余石子中所能拿到的最大值，那么我们最终要返回的结果就是 dfs(0, 1)。
搜索状态时，我们要遵循以下几个原则：

如果 i >= n，那么说明石子都已经拿完，直接返回 0；

如果 i + M * 2 >= n，那么说明可以把剩余石子一起拿到，就可以直接返回剩余石子的数目 sum(piles[i:])；

如果不属于以上两种情况，那么我们需要遍历 1 <= x <= 2 * M，求剩余的最小 dfs(i + x, max(x, M))，也就是自己拿多少的时候，对手拿的石子最少
（由于剩余石子数固定，那么最小化对手石子数，就是最大化自己的石子数）。

为了防止重复搜索，可以采用记忆化的方法。为了快速求剩余石子数目，可以提前处理后缀和。



图解：



如图所示， dfs(i, M) 表示，当从第 i 堆石子开始拿，允许拿 M <= x <= 2 * M 时，在剩余石子中所能拿到的最大值。
蓝色块代表先手拿的状态，黄色块代表后手拿的状态。
边上的权值代表拿了几堆石子（也就是 x），红色边代表当前层最优解，连续的红色路径就是答案。



（实际还是没怎么太懂。。。）

换别人的理解：

本题确实刚开始没看懂题目，后来看了解答才明白解题思路。

选取动态规划递推公式dp[i][m],代表从第i个物品开始先手，且M值当前为m，所能取得的最大值。

本题目的关键在于假设亚历克斯和李都发挥出最佳水平，即二者都会发挥出最佳水平，我们假设
亚历克斯先手后，李继续以最优水平发挥后所能获得的最大值应该尽可能的小，即score（alex） = sum - score（lee）；
我们应尽可能的让score（lee）最小，我们遍历 1 <= X <= 2M,
score（alex） = sum - min(dp[i+X][max(M,X)]) ,其中 1 <= X <= 2Mcurr;

最终求出dp[0][1]的值，即为返回结果.


针对本代码，意思实际上就是s数组用来保存前n个数据的和（后续计算最大值）
			  i+k-1<=n：不会越数组界
			  k<=2*j：  代表X <= 2M，k对应X，j对应M
			  s[n]-s[i-1]：己方取得石子数最大值
		    	  dp[i+k][min(100,max(j,k))]：对手取得石子最小值，那么两者相减就是最大石子收益
dp表达式：dp[i][j]=max(dp[i][j],s[n]-s[i-1]-dp[i+k][min(100,max(j,k))])

上代码：
class Solution {
public:
    int stoneGameII(vector<int>& a) {
        int dp[105][105],s[105],n=a.size(),i,j,k;
        memset(dp,0,sizeof(dp));
        memset(s,0,sizeof(s));
        for (i=1;i<=n;i++) s[i]=s[i-1]+a[i-1];
        for (i=n;i>=1;i--)
        {for (j=1;j<=100;j++)
        {for (k=1;i+k-1<=n&&k<=2*j;k++)
        {dp[i][j]=max(dp[i][j],s[n]-s[i-1]-dp[i+k][min(100,max(j,k))]);}
        }
        }
        for(int i=0; i< 6;i++){
           printf("%d\n",dp[i][1]);
           printf("%d\n",dp[i][2]);
        }
        return dp[1][1];
    }
};