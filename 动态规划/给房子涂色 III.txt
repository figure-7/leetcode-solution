题目难度：HARD

在一个小城市里，有 m 个房子排成一排，你需要给每个房子涂上 n 种颜色之一（颜色编号为 1 到 n ）。

有的房子去年夏天已经涂过颜色了，所以这些房子不需要被重新涂色。

我们将连续相同颜色尽可能多的房子称为一个街区。（比方说 houses = [1,2,2,3,3,2,1,1] ，它包含 5 个街区  [{1}, {2,2}, {3,3}, {2}, {1,1}] 。）

给你一个数组 houses ，一个 m * n 的矩阵 cost 和一个整数 target ，其中：

houses[i]：是第 i 个房子的颜色，0 表示这个房子还没有被涂色。
cost[i][j]：是将第 i 个房子涂成颜色 j+1 的花费。
请你返回房子涂色方案的最小总花费，使得每个房子都被涂色后，恰好组成 target 个街区。
如果没有可用的涂色方案，请返回 -1 。

 

示例 1：

输入：houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
输出：9
解释：房子涂色方案为 [1,2,2,1,1]
此方案包含 target = 3 个街区，分别是 [{1}, {2,2}, {1,1}]。
涂色的总花费为 (1 + 1 + 1 + 1 + 5) = 9。
示例 2：

输入：houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
输出：11
解释：有的房子已经被涂色了，在此基础上涂色方案为 [2,2,1,2,2]
此方案包含 target = 3 个街区，分别是 [{2,2}, {1}, {2,2}]。
给第一个和最后一个房子涂色的花费为 (10 + 1) = 11。
示例 3：

输入：houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]], m = 5, n = 2, target = 5
输出：5
示例 4：

输入：houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3
输出：-1
解释：房子已经被涂色并组成了 4 个街区，分别是 [{3},{1},{2},{3}] ，无法形成 target = 3 个街区。
 

提示：

m == houses.length == cost.length
n == cost[i].length
1 <= m <= 100
1 <= n <= 20
1 <= target <= m
0 <= houses[i] <= n
1 <= cost[i][j] <= 10^4

思路：周赛第四题，DP
dp[i][j][k]表示涂了i个房子，形成j个街区，第i个房子涂色k
枚举第i+1个房子途什么颜色，假设涂色c
p = cost / 0
dp[i + 1][j + (k != c ? 1 : 0)[c] <- dp[i][j][k]
初始化dp都为-1，表示不存在该情况
然后初始化枚举第0个房子的颜色，如果图上颜色且不是颜色c就继续
否则看是不是需要代价，需要代价就把dp值改为对应cost数组值
然后枚举i个房子染色c，先检查是否合法同上
然后计算代价p同上，然后枚举i-1个房子涂的颜色，再枚举多少个街区
如果dp值为-1（不合法）就继续
否则计算街区数量（颜色等不加一，否则加一）
然后判断新状态与旧状态如果新状态为-1（没取过）或者旧状态加上当前代价p小于新状态（当前新状态不是最优解）
就更新新状态为旧状态加上当前代价p
然后枚举最后一个房子的颜色，每次取最小的dp值（除了-1）
如果都是-1就返回-1即可
否则返回结果dp值即可

上代码：
const int MAXM = 105;
const int MAXN = 25;
int dp[MAXM][MAXM][MAXN];

class Solution {
public:
    int minCost(vector<int>& houses, vector<vector<int>>& cost, int m, int n, int target) {
        
        for (int i = 0; i <= m; i++)
            for (int j = 0; j <= m; j++)
                for (int k = 0; k <= n; k++)
                    dp[i][j][k] = -1;
        
        for (int c = 1; c <= n; c++){
            if (houses[0] != 0 && houses[0] != c) continue;
            if (houses[0] == 0) 
                dp[0][1][c] = cost[0][c - 1];
            else
                dp[0][1][c] = 0;
        }
        
        for (int i = 1; i < m; i++){
            for (int c = 1; c <= n; c++){
                if (houses[i] != 0 && houses[i] != c) continue;
                int p = (houses[i] == 0 ? cost[i][c - 1] : 0);
                for (int lc = 1; lc <= n; lc++){
                    for (int blc = 1; blc <= m; blc++){
                        if (dp[i - 1][blc][lc] == -1) continue;
                        int nblc = blc + (lc == c? 0: 1);
                        if (dp[i][nblc][c] == -1 || dp[i][nblc][c] > dp[i - 1][blc][lc] + p)
                            dp[i][nblc][c] = dp[i - 1][blc][lc] + p;
                    }
                }
            }
        }
        
        int ans = -1;
        for (int c = 1; c <= n; c++){
            if (dp[m - 1][target][c] == -1) continue;
            if (ans == -1 || ans > dp[m - 1][target][c]) ans = dp[m - 1][target][c];
        }
        
        return ans;
    }
};