题目难度：HARD

你的音乐播放器里有 N 首不同的歌，在旅途中，你的旅伴想要听 L 首歌（不一定不同，即，允许歌曲重复）。

请你为她按如下规则创建一个播放列表：

每首歌至少播放一次。
一首歌只有在其他 K 首歌播放完之后才能再次播放。
返回可以满足要求的播放列表的数量。

由于答案可能非常大，请返回它模 10^9 + 7 的结果。

 

示例 1：

输入：N = 3, L = 3, K = 1
输出：6
解释：有 6 种可能的播放列表。[1, 2, 3]，[1, 3, 2]，[2, 1, 3]，[2, 3, 1]，[3, 1, 2]，[3, 2, 1].
示例 2：

输入：N = 2, L = 3, K = 0
输出：6
解释：有 6 种可能的播放列表。[1, 1, 2]，[1, 2, 1]，[2, 1, 1]，[2, 2, 1]，[2, 1, 2]，[1, 2, 2]
示例 3：

输入：N = 2, L = 3, K = 1
输出：2
解释：有 2 种可能的播放列表。[1, 2, 1]，[2, 1, 2]
 

提示：

0 <= K < N <= L <= 100

思路：DP
接下来上题解区题解：
1：先处理 不需要保证 每个歌曲都被播放的情况
开始位置，当前累计的K长度， 前K个不同，第K+1可以和前面 第一个相同
2：引入当前出现的不同的歌曲数量
分为两种，播放之前播放过的， 播放之前没有播放过的 分别计数

执行用时 :
24 ms
, 在所有 C++ 提交中击败了
7.58%
的用户
内存消耗 :
17.1 MB
, 在所有 C++ 提交中击败了
50.00%
的用户
（时间炸了，空间一般）

上代码：
const int64_t MOD=1e9+7;
class Solution {
public:
    int numMusicPlaylists(int64_t N, int64_t L, int64_t K) {
        vector<vector<int64_t>> combine(101,vector<int64_t>(101,1));   //构造组合数组
        for(int i=1;i<101;i++){
            for(int j=1;j<101;j++){
                combine[i][j]=combine[i-1][j]+combine[i][j-1];
                combine[i][j]%=MOD;
            }
        }
        vector<int64_t> dp(L+1);
        dp[K]=helper(K,L,K);   
        for(int64_t i=K+1;i<=N;i++){     //根据容斥原理计算每首都放的答案
            dp[i]=helper(i,L,K);
            for(int64_t j=K;j<i;j++)
                dp[i]-=((combine[j][i-j]*dp[j])%MOD);   //combine[j][i-j]的值为C(i,j)
                dp[i]=(dp[i]+MOD)%MOD;
        }
        return (dp[N]+MOD)%MOD;
    }
    int helper(int64_t N, int64_t L, int64_t K) {   //计算不一定每首都放的答案
        vector<int64_t> dp(L);
        dp[0]=N;
        for(int64_t i=1;i<K+1;i++){
            dp[i]=dp[i-1]*(N-i);
            dp[i]%=MOD;
        }
        for(int64_t i=K+1;i<L;i++){
            dp[i]=dp[i-1]*(N-K);
            dp[i]%=MOD;
        }
        return dp[L-1];
    }
};