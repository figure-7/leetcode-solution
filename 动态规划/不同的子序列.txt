题目难度：HARD

给定一个字符串?S?和一个字符串?T，计算在 S 的子序列中 T 出现的个数。


一个字符串的一个子序列是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。
（例如，"ACE"?是?"ABCDE"?的一个子序列，而?"AEC"?不是）



示例?1:

输入: S = "rabbbit", T = "rabbit"

输出:?3

解释:

如下图所示, 有 3 种可以从 S 中得到 "rabbit" 的方案。

(上箭头符号 ^ 表示选取的字母)


rabbbit

^^^^ ^^

rabbbit

^^ ^^^^

rabbbit

^^^ ^^^


示例?2:

输入: S = "babgbag", T = "bag"

输出:?5

解释:

如下图所示, 有 5 种可以从 S 中得到 "bag" 的方案。 

(上箭头符号 ^ 表示选取的字母)


babgbag

^^ ^

babgbag

^^    ^

babgbag

^    ^^

babgbag

  ^  ^^

babgbag

    ^^^



思路：利用dp实现，dp[i][j]中i表示t[0,j]在s[0,i]中出现次数。
dp表达式：f[j + 1] += s[i] == t[j] ? f[j] : 0;（滚动数组）
初始化dp(0,0) == 0
首先，无论s[i]和t[i]是否相等，若不使用s[i],则dp(i,j) = dp(i-1,j)
若s[i] == t[j],则可以使用s[i],此时dp(i,j) = dp(i-1,j) + dp(i-1,j-1)
（用书上的代码会发生溢出报错，只要改成long long 就行了）

执行用时 :
4 ms
, 在所有 cpp 提交中击败了
99.20%
的用户
内存消耗 :
8.6 MB
, 在所有 cpp 提交中击败了
94.25%
的用户

上代码：
class Solution {
public:
    int numDistinct(string s, string t) {
        vector<long long> f(t.size() + 1);
        f[0] = 1;
        for(long long i = 0; i < s.size(); ++i) {
            for(long long j = t.size() - 1; j >= 0; --j)
                f[j + 1] += s[i] == t[j] ? f[j] : 0;
        }
        return f[t.size()];
    }
};