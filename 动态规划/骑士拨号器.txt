题目难度：MEDIUM

国际象棋中的骑士可以按下图所示进行移动：

 .           


这一次，我们将 “骑士” 放在电话拨号盘的任意数字键（如上图所示）上，接下来，骑士将会跳 N-1 步。

每一步必须是从一个数字键跳到另一个数字键。

每当它落在一个键上（包括骑士的初始位置），都会拨出键所对应的数字，总共按下 N 位数字。

你能用这种方式拨出多少个不同的号码？

因为答案可能很大，所以输出答案模 10^9 + 7。

 

示例 1：

输入：1
输出：10
示例 2：

输入：2
输出：20
示例 3：

输入：3
输出：46
 

提示：

1 <= N <= 5000

思路：状压DP
接下来上题解区题解：
思路比较简单，直接上代码：

执行用时 :
84 ms
, 在所有 C++ 提交中击败了
60.54%
的用户
内存消耗 :
6.2 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间一般，空间完杀！）

上代码：
class Solution {
public:
    const int M = 1e9 + 7;
    int knightDialer(int N) {
        if (N == 1) return 10;
        vector<long> dp1(10, 1);
        vector<long> dp2(10, 0);
        for (int i = 1; i < N; ++i) {
            dp2[0] = (dp1[6] + dp1[4]) % M;
            dp2[2] = (dp1[7] + dp1[9]) % M;
            dp2[5] = 0;
            dp2[8] = (dp1[1] + dp1[3]) % M;
            dp2[1] = (dp1[6] + dp1[8]) % M;
            dp2[4] = (dp1[0] + dp1[3] + dp1[9]) % M;
            dp2[7] = (dp1[2] + dp1[6]) % M;
            dp2[3] = dp2[1];
            dp2[6] = dp2[4];
            dp2[9] = dp2[7];
            dp1 = dp2;
        }
        int res = 0;
        for (int i = 0; i < 10; ++i) {
            res = (res + dp2[i]) % M;
        }
        return res;
    }
};