题目难度：HARD

给你一个由小写字母组成的字符串?s，和一个整数?k。


请你按下面的要求分割字符串：

首先，你可以将?s?中的部分字符修改为其他的小写英文字母。

接着，你需要把?s?分割成?k?个非空且不相交的子串，并且每个子串都是回文串。

请返回以这种方式分割字符串所需修改的最少字符数。

?



示例 1：

输入：s = "abc", k = 2

输出：1

解释：你可以把字符串分割成 "ab" 和 "c"，并修改 "ab" 中的 1 个字符，将它变成回文串。


示例 2：

输入：s = "aabbc", k = 3

输出：0

解释：你可以把字符串分割成 "aa"、"bb" 和 "c"，它们都是回文串。


示例 3：

输入：s = "leetcode", k = 8

输出：0
?


提示：

1 <= k <= s.length <= 100
s?中只含有小写英文字母。



思路：利用dp来解，比较典型的dp
dp表达式：dp[i][o]=min(dp[i][o],dp[j][o-1]+cost(j+1,i));
dp[i][j]表示遇到i时切割了j份，代价是值
初始化都是一个非常大的数，遍历时真对字符串长度循环dp
先截取当前长度的子串，然后左右针对不相等的字符，有一个就加一刀（一下称为cost）
至此初始化结束
然后针对字符串长度外循环，内部循环针对0下标到外循环下标，内部在针对刀数循环
每次dp取当前值和内部循环前一个范围的dp值（少一刀的）加上后面范围的cost的最小值
返回结果下标分别为字符串长度和刀数的dp值即可

上代码：
class Solution {
public:
    int dp[105][105];
    string ss;
    int cost(int l,int r){
        string tmp = "";
        for(int i=l;i<=r;i++)tmp+=ss[i];
        int res = 0;
        for(int i=0;i<tmp.size();i++){
            if(tmp[i]!=tmp[tmp.size()-1-i]){
                res++;
                tmp[tmp.size()-1-i]=tmp[i];
            }
        }
        return res;
    }
    int palindromePartition(string s, int k) {
        ss = s;k--;
        memset(dp,0,sizeof(dp));
        for(int i=0;i<s.size();i++){
            for(int j=0;j<=k;j++){
                dp[i][j]=999999999;
            }
        }
        for(int i=0;i<s.size();i++){
            dp[i][0]=cost(0,i);
        }
        for(int i=0;i<s.size();i++){
            for(int j=0;j<i;j++){
                for(int o=1;o<=k;o++){
                    dp[i][o]=min(dp[i][o],dp[j][o-1]+cost(j+1,i));
                }
            }
        }
        return dp[s.size()-1][k];
    }
};