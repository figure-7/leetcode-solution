题目难度：HARD

总共有 n 个人和 40 种不同的帽子，帽子编号从 1 到 40 。

给你一个整数列表的列表 hats ，其中 hats[i] 是第 i 个人所有喜欢帽子的列表。

请你给每个人安排一顶他喜欢的帽子，确保每个人戴的帽子跟别人都不一样，并返回方案数。

由于答案可能很大，请返回它对 10^9 + 7 取余后的结果。

 

示例 1：

输入：hats = [[3,4],[4,5],[5]]
输出：1
解释：给定条件下只有一种方法选择帽子。
第一个人选择帽子 3，第二个人选择帽子 4，最后一个人选择帽子 5。
示例 2：

输入：hats = [[3,5,1],[3,5]]
输出：4
解释：总共有 4 种安排帽子的方法：
(3,5)，(5,3)，(1,3) 和 (1,5)
示例 3：

输入：hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
输出：24
解释：每个人都可以从编号为 1 到 4 的帽子中选。
(1,2,3,4) 4 个帽子的排列方案数为 24 。
示例 4：

输入：hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]
输出：111
 

提示：

n == hats.length
1 <= n <= 10
1 <= hats[i].length <= 40
1 <= hats[i][j] <= 40
hats[i] 包含一个数字互不相同的整数列表。

思路：双周赛第四题，状压DP
dp[i][bits]表示前i顶帽子确定了归属，人带帽子的状态为bits的方案数
dp[i][bits] -> dp[i + 1][n_bits]
1.我们将第i + 1 顶帽子给没人j，n_bits = bits | (i<<j)前提j喜欢帽子i + 1且(bits>>j)&1 = 0
2.第i + 1 顶帽子不给别人，bits = n_bits
初始0给所有数组值，然后00给一（没人带帽子）
遍历帽子再遍历人带帽子的状态，如果当前DP等于0就继续（不影响）
否则尝试带帽子，判断是不是在他的帽子列表里，并且这个人没有带帽子
就取戴帽子（变更状态值，就得状态加进来然后取模）
然后判断不戴盖帽子的继承
最后返回dp最后一项即可

上代码：
const int MOD = 1e9 + 7;
int dp[45][1<<10];

class Solution {
public:
    int numberWays(vector<vector<int>>& hats) {
        int n = hats.size();
        int lim = 1 << n;
        for (int i = 0; i <= 40; i++) for (int s = 0; s < lim; s++) dp[i][s] = 0;
        dp[0][0] = 1;
        
        for (int h = 1; h <= 40; h++){
            for (int s = 0; s < lim; s++){
                if (dp[h - 1][s] == 0) continue;
                for (int i = 0; i < n; i++){
                    bool flag = false;
                    for (auto v: hats[i]) if (v == h) flag = true;
                    if (flag == false) continue;
                    if ((s>>i) & 1) continue;
                    int ns = s | (1<<i);
                    dp[h][ns] = (dp[h][ns] + dp[h - 1][s]) % MOD;
                }
            }
            for (int s = 0; s < lim; s++)
                dp[h][s] = (dp[h][s] + dp[h - 1][s]) % MOD;
        }
        
        return dp[40][lim - 1];
    }
};