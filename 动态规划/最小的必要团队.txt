题目难度：HARD

作为项目经理，你规划了一份需求的技能清单 req_skills，并打算从备选人员名单 people 中选出些人组成一个「必要团队」（ 编号为 i 的备选人员 people[i] 含有一份该备选人员掌握的技能列表）。

所谓「必要团队」，就是在这个团队中，对于所需求的技能列表 req_skills 中列出的每项技能，团队中至少有一名成员已经掌握。

我们可以用每个人的编号来表示团队中的成员：

例如，团队 team = [0, 1, 3] 表示掌握技能分别为 people[0]，people[1]，和 people[3] 的备选人员。

请你返回 任一 规模最小的必要团队，团队成员用人员编号表示。

你可以按任意顺序返回答案，本题保证答案存在。

 

示例 1：

输入：req_skills = ["java","nodejs","reactjs"], people = [["java"],["nodejs"],["nodejs","reactjs"]]
输出：[0,2]
示例 2：

输入：req_skills = ["algorithms","math","java","reactjs","csharp","aws"], people = [["algorithms","math","java"],["algorithms","math","reactjs"],["java","csharp","aws"],["reactjs","csharp"],["csharp","math"],["aws","java"]]
输出：[1,2]
 

提示：

1 <= req_skills.length <= 16
1 <= people.length <= 60
1 <= people[i].length, req_skills[i].length, people[i][j].length <= 16
req_skills 和 people[i] 中的元素分别各不相同
req_skills[i][j], people[i][j][k] 都由小写英文字母组成
本题保证「必要团队」一定存在

思路：DP
接下来上题解区题解：
典型的背包问题，用位图实现，递推公式dp[x|y] = min(dp[x|y],dp[x] + dp[y])

执行用时 :
84 ms
, 在所有 C++ 提交中击败了
57.98%
的用户
内存消耗 :
23.5 MB
, 在所有 C++ 提交中击败了
32.56%
的用户
（时间一般，空间不咋地）

上代码：
class Solution {
public:
    vector<int> smallestSufficientTeam(vector<string>& req_skills, vector<vector<string>>& people) {
        int n = req_skills.size();
        int full = 1<<n;
        unordered_map<string,int> skills;
        vector<int> dp(full,-1);
        unordered_map<int,vector<int>> team;
        
        /*initial*/
        for(int i = 0;i < n; ++i){
            skills[req_skills[i]] = i;
        }
        
        dp[0] = 0;
        team[0] = vector<int>();
        
        for(int i = 0;i < people.size(); ++i){
            int idx = 0;
            for(auto s : people[i]){
                if(skills.count(s)){
                    idx = idx|(1<<skills[s]);
                }
            }
            for(int j = 0;j < full; ++j){
                if(dp[j] >= 0){
                    int x = j|idx;
                    if(dp[x] == -1 || dp[x] > dp[j] + 1){
                        dp[x] = dp[j] + 1;
                        team[x] = team[j];
                        team[x].push_back(i);
                    }
                }
            }
        }
        
        return team[full-1];
    }
};