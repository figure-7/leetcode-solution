题目难度：HARD

给出一些不同颜色的盒子，盒子的颜色由数字表示，即不同的数字表示不同的颜色。
你将经过若干轮操作去去掉盒子，直到所有的盒子都去掉为止。
每一轮你可以移除具有相同颜色的连续 k 个盒子（k >= 1），这样一轮之后你将得到 k*k 个积分。
当你将所有盒子都去掉之后，求你能获得的最大积分和。

示例 1：
输入:

[1, 3, 2, 2, 2, 3, 4, 3, 1]
输出:

23
解释:

[1, 3, 2, 2, 2, 3, 4, 3, 1] 
----> [1, 3, 3, 4, 3, 1] (3*3=9 分) 
----> [1, 3, 3, 3, 1] (1*1=1 分) 
----> [1, 1] (3*3=9 分) 
----> [] (2*2=4 分)
 

提示：盒子的总数 n 不会超过 100。

思路：DP
接下来上题解区思路：
网上大神们的解法我看不懂，然后自己去想了想怎么去解这道题目。首先状态肯定是[l, r]，即左右边界，用DP去解，想到这个之后，自己去试一下人怎么做这个游戏。

例如 [9, 5, 3, 5, 3, 3, 9, 8, 8, 5, 3, 9]，对于一个区间，我判断这个区间的第一个连续色块，9，它后面与他相同的色块位置在6和11位置，那么对于9这个色块的处理有3种方法：
1、自己直接干掉，消除他后面的，获得1+[5, 3, 5, 3, 3, 9, 8, 8, 5, 3, 9]分
2、留着，先把他到他后面第一个9的区间，即[5, 3, 5, 3, 3]干掉，然后再处理9+[9, 8, 8, 5, 3, 9]
3、留着，但是跳过他后面第一个9的区间，即把[5, 3, 5, 3, 3, 9, 8, 8, 5, 3]都干掉之后，再去处理9+[9]
那么可以看出来状态转移方程了，next[i]表示后面第一个与boxes[i]相等的位置，presame表示前面有几个数字与当前第一个位置的数字相等：
dp(presame, i, j) = max(max[dp(0, i+1, nexti-1) + dp(presame+1, nexti, j) for every nexti in next[i]], (presame+1)^2 + dp(0, i+1, j)
注意这里的presame会和当前的第一个位置数字一起去当做整体去处理。

看到有跟连续，相等相关的，预处理一个next数组和prev数组，总是没错的。

执行用时 :
80 ms
, 在所有 C++ 提交中击败了
64.50%
的用户
内存消耗 :
103.5 MB
, 在所有 C++ 提交中击败了
6.00%
的用户
（时间还行，空间炸了）

上代码：
class Solution {
public:
    int dp(vector<vector<vector<int>>>& memo, vector<int>& right, vector<int>& boxes, int presame, int i, int r) {
        
        if (i > r) return presame * presame;
        if (memo[presame][i][r] != -1) return memo[presame][i][r];
        int res = presame * presame;
        int j = i;
        while (right[j] == j+1 && j+1 <= r) j++;
        res = max(res, (presame + j-i+1) * (presame + j-i+1) + dp(memo, right, boxes, 0, j+1, r));
        int nextj = right[j];
        while (nextj <= r) {
            res = max(res, dp(memo, right, boxes, 0, j+1, nextj-1) + dp(memo, right, boxes, presame+j-i+1, nextj, r));     
            nextj = right[nextj];
        }
        return memo[presame][i][r] = res;
    }
    int removeBoxes(vector<int>& boxes) {
        unordered_map<int, int> r;
        int n = boxes.size();
        vector<int> right(n, n);
        for (int i = boxes.size() - 1; i >= 0; i--) {
            if (r.find(boxes[i]) != r.end()) right[i] = r[boxes[i]];
            r[boxes[i]] = i;
        }
        vector<vector<vector<int>>> memo(n+1, vector<vector<int>>(n+1, vector<int>(n+1, -1)));
        return dp(memo, right, boxes, 0, 0, n-1);
    }
};