题目难度：HARD

给定三个字符串?s1, s2, s3, 验证?s3?是否是由?s1?和?s2 交错组成的。



示例 1:

输入: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
输出: true


示例?2:

输入: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"

输出: false



思路：首先，书上最后有一个滚动数组实现的，这里不详述，只是说说DP而不是 搜索（超时）
利用DP实现，比较难想
dp表达式：f[i][j] = (s1[i - 1] == s3[i + j - 1] && f[i - 1][j]) || (s2[j - 1] == s3[i + j -1] && f[i][j - 1]);
设状态f[i][j], 表示s1[0,i]和s2[0,j]，匹配s3[0, i+j]
如果s1的最后一个字符等于s3的最后一个字符，则f[i][j] = f[i - 1][j]
如果s2的最后一个字符等于s3的最后一个字符，则f[i][j] = f[i][j - 1]
初始化f[0][j]取决于s2与s3字符相等数，f[i][0]取决于s1与s3字符相等数
遍历时分别从1下标开始二重遍历即可

执行用时 :
0 ms
, 在所有 cpp 提交中击败了
100.00%
的用户
内存消耗 :
8.6 MB
, 在所有 cpp 提交中击败了
59.65%
的用户
（时间满分！空间可以使用滚动数组（见书））

上代码：
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        if(s3.length() != s1.length() + s2.length())
            return false;
        vector<vector<bool> > f(s1.length() + 1, vector<bool>(s2.length() + 1, true));
        
        for(size_t i = 1; i <= s1.length(); ++i)
            f[i][0] = f[i - 1][0] && s1[i - 1] == s3[i - 1];
        
        for(size_t i = 1; i <= s2.length(); ++i)
            f[0][i] = f[0][i - 1] && s2[i - 1] == s3[i - 1];
        
        for(size_t i = 1; i <= s1.length(); ++i)
            for(size_t j = 1; j <= s2.length(); ++j)
                f[i][j] = (s1[i - 1] == s3[i + j - 1] && f[i - 1][j]) || (s2[j - 1] == s3[i + j -1] && f[i][j - 1]);
        
        return f[s1.length()][s2.length()];
    }
};