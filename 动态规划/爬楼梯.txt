假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶




爬楼梯递归（斐波那契数列）
1.第一次实现简单递归，然而超时，加入输出缓冲消除依旧超时。。
上代码
static const int _ = [](){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    return 0;
}();
class Solution {
public:
    int climbStairs(int n) {
    if(n==1) {
        return 1;
    }
    if(n==2) {
        return 2;
    }
    else{
            return climbStairs(n-1) + climbStairs(n-2);
        }
    }
};
修改后：代码
static const int _ = [](){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    return 0;
}();
class Solution {
public:
    int climbStairs(int n) {
    if(n==1) {
        return 1;
    }
    else if(n==2) {
        return 2;
    }
    else{
            double res = 0;
            double i = 1, j = 2;
            double k = 3;
            while (k <= n) {
                res = i + j;
                i = j;
                j = res;
                k++;
            }
            return res;
        }
    }
};
