题目难度：MEDIUM

爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：

爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 

抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 

每次抽取都是独立的，其结果具有相同的概率。

当爱丽丝获得不少于 K 分时，她就停止抽取数字。 

爱丽丝的分数不超过 N 的概率是多少？

示例 1：

输入：N = 10, K = 1, W = 10
输出：1.00000
说明：爱丽丝得到一张卡，然后停止。
示例 2：

输入：N = 6, K = 1, W = 10
输出：0.60000
说明：爱丽丝得到一张卡，然后停止。
在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。
示例 3：

输入：N = 21, K = 17, W = 10
输出：0.73278
提示：

0 <= K <= N <= 10000
1 <= W <= 10000
如果答案与正确答案的误差不超过 10^-5，则该答案将被视为正确答案通过。
此问题的判断限制时间已经减少。

思路：DP+SlidingWindows
接下来上题解区题解：
老实说，官方以及和官方的题解相似的文章没有看懂，主要不理解为什么 f(x)=1/w*(f(x+1)+f(x+2)+...f(x+w));
所以我换了一种思路，就是自下往上进行求解。
具体思路：
以 n=21,k=17,w=3为例讲解：
dp[i]表示的是当总共分数为i时的概率为dp[i],所以最终的解是dp[17]+dp[18]+dp[19]+dp[20]+dp[21],那么dp[21]可以如何求得呢？
dp[21]可能是18+3，19+2，20+1转移求得的，所以dp[21]的概率为之前去的18，19，20概率之和乘上1/w(1/w表示的是w个数取得其中一个)，公式就是dp[21]=dp[20]*1/w+dp[19]*1/w+dp[18]1/w=1/w(dp[18]+dp[19]+dp[20]);

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
45.05%
的用户
内存消耗 :
9.2 MB
, 在所有 C++ 提交中击败了
33.33%
的用户
（时间一般，空间不咋地）

上代码：
typedef double db;
class Solution {
public:
    double new21Game(int n, int k, int w) {
        if(k==0)return 1;
        if(n==0||k>n)return 0;
        vector<db>dp(n+1,0.0);
        //dp[i]表示的是当总分为i的时候的概率，最终的答案一定是k<=i<=n的所有概率之和，表示的是当取到分数大于k小于n的概率
        db sum=1.0;
        db res=0.0;
        dp[0]=1.0;
        for(int i=1;i<=n;i++){
            dp[i]=1.0*sum/w;
            if(i<k){
                sum+=dp[i];
            }else{
                res+=dp[i];//表示当前选的点是符合要求的，那么将其加入到符合条件的概率当中
            }
            if(i>=w){
                sum-=dp[i-w];//sum表示的是中间只能有w个数据，
            }
        }
        return res;
    }
};