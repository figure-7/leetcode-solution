题目难度：HARD

给你一个 m * n 的矩阵 seats 表示教室中的座位分布。如果座位是坏的（不可用），就用 '#' 表示；

否则，用 '.' 表示。

学生可以看到左侧、右侧、左上、右上这四个方向上紧邻他的学生的答卷，但是看不到直接坐在他前面或者后面的学生的答卷。

请你计算并返回该考场可以容纳的一起参加考试且无法作弊的最大学生人数。

学生必须坐在状况良好的座位上。

 

示例 1：



输入：seats = [["#",".","#","#",".","#"],
              [".","#","#","#","#","."],
              ["#",".","#","#",".","#"]]
输出：4
解释：教师可以让 4 个学生坐在可用的座位上，这样他们就无法在考试中作弊。 
示例 2：

输入：seats = [[".","#"],
              ["#","#"],
              ["#","."],
              ["#","#"],
              [".","#"]]
输出：3
解释：让所有学生坐在可用的座位上。
示例 3：

输入：seats = [["#",".",".",".","#"],
              [".","#",".","#","."],
              [".",".","#",".","."],
              [".","#",".","#","."],
              ["#",".",".",".","#"]]
输出：10
解释：让学生坐在第 1、3 和 5 列的可用座位上。
 

提示：

seats 只包含字符 '.' 和'#'
m == seats.length
n == seats[i].length
1 <= m <= 8
1 <= n <= 8

思路：周赛第四题，状压DP
（8*8范围搜索超时。。。）
dp[i][bits]表示前i行座位情况为bits（01表示有没有人）的情况
初始化dp[0][0]为0，先枚举行，再枚举当前行怎么坐，再枚举上一行怎么坐
不合法（值为-1）跳过，然后遍历一次行内个数（四维遍历）分以下几种情况：
1：没人坐，继续
2：坏的座位，不合法
3：左边有人不合法
4：右边有人不合法
5：左前有人不合法
6：右前有人不合法
最后当前dp答案等于对当前答案和上一行的之前的情况dp值加上当前行的值
然后找到最大的dp值返回即可

上代码：
int dp[10][1<<8];

class Solution {
public:
    
    int lowbit(int x){
        return x&-x;
    }
    int bcount(int x){
        int ret = 0;
        while(x > 0){
            ++ret;
            x -= lowbit(x);
        }
        return ret;
    }
    
    int maxStudents(vector<vector<char>>& seats) {
        int n = seats.size(), m = seats[0].size();
        
        memset(dp, -1, sizeof(dp));
        dp[0][0] = 0;
        
        int lim = (1 << m);
        for (int i = 1; i <= n; i++){
            for (int cur = 0; cur < lim; cur++){
                for (int pre = 0; pre < lim; pre++){
                    if (dp[i - 1][pre] == -1) continue;
                    
                    bool flag = true;
                    for (int j = 0; j < m; j++){
                        if (((cur>>j)&1) == 0) continue;
                        if (seats[i - 1][j] == '#') flag = false;
                        if (j >= 1 && ((cur>>(j - 1))&1)) flag = false;
                        if (j + 1 < m && ((cur>>(j + 1))&1)) flag = false;
                        if (j >= 1 && ((pre>>(j - 1))&1)) flag = false;
                        if (j + 1 < m && ((pre>>(j + 1))&1)) flag = false;
                    }
                    
                    if (flag == false) continue;
                    
                    dp[i][cur] = max(dp[i][cur], dp[i - 1][pre] + bcount(cur));
                }
            }
        }
        
        int ans = 0;
        for (int s = 0; s < lim; s++) ans = max(ans, dp[n][s]);
        return ans;
    }
};