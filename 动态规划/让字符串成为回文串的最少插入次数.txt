题目难度：HARD

给你一个字符串 s ，每一次操作你都可以在字符串的任意位置插入任意字符。

请你返回让 s 成为回文串的 最少操作次数 。

「回文串」是正读和反读都相同的字符串。

 

示例 1：

输入：s = "zzazz"
输出：0
解释：字符串 "zzazz" 已经是回文串了，所以不需要做任何插入操作。
示例 2：

输入：s = "mbadm"
输出：2
解释：字符串可变为 "mbdadbm" 或者 "mdbabdm" 。
示例 3：

输入：s = "leetcode"
输出：5
解释：插入 5 个字符后字符串变为 "leetcodocteel" 。
示例 4：

输入：s = "g"
输出：0
示例 5：

输入：s = "no"
输出：1
 

提示：

1 <= s.length <= 500
s 中所有字符都是小写字母。

思路：周赛第四题，dp+DFS记忆化
dp表达式：
dp[l][r] 表示字符串l...r，最少删除次数，使得s回文
初始化值都为-1，DFS从头到尾开始
DFS中先判断长度是否不足1，不足就返回0
否则判断dp当前区间是否算过，算过就返回该状态的dp值
否则把当前dp值先取右区间减一dp值和左区间减一的dp值的最小值加一（即删除当前区间最左边字符或删除当前区间最右边字符，次数为1）
然后再判断当前区间左右字符是否相等，相等就当前dp值取右区间减一和左区间减一的dp值（即两边已经回文了，DFS到中间再判断）
最后DFS返回当前范围dp值即可
主函数返回DFS从头到尾的结果即可
（总而言之，就是记忆化搜索四种情况：
1.区间内长度小于1，返回0
2.判断过，直接返回dp
3.两侧字符不相等，删左面或删右面的最小值
4.两侧字符相等，是回文，直接取中间值）

上代码：
const int MAXN = 550;
int dp[MAXN][MAXN];

class Solution {
public:
    int dfs(int l, int r, const string &s) {
        if(r - l + 1 <= 1) return 0;
        if(dp[l][r] != -1) return dp[l][r];
        
        int cur = min(dfs(l + 1, r, s), dfs(l, r - 1, s)) + 1;
        
        if(s[l] == s[r]) cur = min(cur, dfs(l + 1, r - 1, s));
        
        return dp[l][r] = cur;
    }
    
    int minInsertions(string s) {
        int n = s.length();
        
        for(int i = 0; i <= n + 5; i++)
            for(int j = 0; j <= n; j++)
                dp[i][j] = -1;
        
        return dfs(0, n - 1, s);
    }
};