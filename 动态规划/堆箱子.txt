题目难度：HARD

堆箱子。
给你一堆n个箱子，箱子宽 wi、深 di、高 hi。
箱子不能翻转，将箱子堆起来时，下面箱子的宽度、高度和深度必须大于上面的箱子。
实现一种方法，搭出最高的一堆箱子。
箱堆的高度为每个箱子高度的总和。
输入使用数组[wi, di, hi]表示每个箱子。
示例1:
 输入：box = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]
 输出：6
示例2:
 输入：box = [[1, 1, 1], [2, 3, 4], [2, 6, 7], [3, 4, 5]]
 输出：10
提示:
箱子的数目不大于3000个。

思路：DP
接下来上题解区题解：
第一点需要明白的是，我们先对box数组按照一个维度进行排序，得到sorted_box序列，那么最终答案的序列就一定是sorted_box序列的某个子序列（这点很重要）。
那么之后我们只需要找到这个总高度最大的子序列。
设dp[i]表示以第i个箱子为结尾的上升子序列的最大总高度。则可以知道：
剩下的就是写代码了。

执行用时：
192 ms
, 在所有 C++ 提交中击败了
43.83%
的用户
内存消耗：
8.8 MB
, 在所有 C++ 提交中击败了
46.61%
的用户
（时空都一般）

上代码：
class Solution {
public:
    int pileBox(vector<vector<int>>& box) {
        sort(box.begin(), box.end(), [](const vector<int>& a, const vector<int>& b) { return a[0] < b[0]; });
        vector<int> dp(box.size(), 0);
        dp[0] = box[0][2];
        int ans = dp[0];
        for (int i = 1; i < box.size(); i++) {
            int maxh = 0; //必须初始化为0
            for (int j = 0; j < i; j++)
                if (box[j][0] < box[i][0] && box[j][1] < box[i][1] && box[j][2] < box[i][2])
                    maxh = max(maxh, dp[j]);
            dp[i] = maxh + box[i][2];
            ans = max(ans, dp[i]);
        }
        return ans;
    }
};