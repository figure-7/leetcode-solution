题目难度：MEDIUM

在一个有向图中，节点分别标记为 0, 1, ..., n-1。这个图中的每条边不是红色就是蓝色，且存在自环或平行边。

red_edges 中的每一个 [i, j] 对表示从节点 i 到节点 j 的红色有向边。类似地，blue_edges 中的每一个 [i, j] 对表示从节点 i 到节点 j 的蓝色有向边。

返回长度为 n 的数组 answer，其中 answer[X] 是从节点 0 到节点 X 的最短路径的长度，且路径上红色边和蓝色边交替出现。如果不存在这样的路径，那么 answer[x] = -1。

 

示例 1：

输入：n = 3, red_edges = [[0,1],[1,2]], blue_edges = []
输出：[0,1,-1]
示例 2：

输入：n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]
输出：[0,1,-1]
示例 3：

输入：n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]
输出：[0,-1,-1]
示例 4：

输入：n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]
输出：[0,1,2]
示例 5：

输入：n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]
输出：[0,1,1]
 

提示：

1 <= n <= 100
red_edges.length <= 400
blue_edges.length <= 400
red_edges[i].length == blue_edges[i].length == 2
0 <= red_edges[i][j], blue_edges[i][j] < n

思路：
dp[y][k^1] = dp[x][k]+1加队列实现。

先使用二维数组d初始化[0~n][0]以及[0~n][1]为一个很大的值（确保比N大），之后将[0][0]，[0][1],下标对应值赋0
（该数组作为结果保存数组，用来计算最后的结果）
之后再设置一个二维数组，将红蓝数组的左侧值设为数组左下标，右下标设为红0，蓝1。将下标对应值赋为红蓝数组右侧值。
（该数组用来判断路径）
之后再设置一个队列，将数对类型00,01放入其中，注意右下标每次进行异或判断，以确保是红蓝交替的状态（神奇操作，学不来！）
（该队列用来对上面的二维数组路径相通时候的情况做判断，从而使路径情况的结果保存进d数组中）
最后对0~n对应左下标的d数组值的右下标0和1的最小值取出判断，如果是那个很大的值，那么就返回-1（既没有路径），此外就返回最小值（即最短路径）

例如上面的例5：v[0][0]包含1,2
      	       v[1][1]包含0
     	       Q放入了10，20
     	       d[1][0]=1,d[2][0]=1
     	       (这步即代表了从0到1以及从0到2都可以一步实现，，)
     	       之后没有v[0][1],v[1][0],v[2][0],该步骤结束

上代码：
const int INF = 1000000000;

class Solution {
public:
    using pii = pair<int, int>;
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& red_edges, vector<vector<int>>& blue_edges) {
        int d[n][2];
        for (int i = 0; i < n; ++ i)
            d[i][0] = d[i][1] = INF;
        d[0][0] = d[0][1] = 0;
        
        vector<int> v[n][2];
        for (auto e : red_edges)
            v[e[0]][0].push_back(e[1]);
        for (auto e : blue_edges)
            v[e[0]][1].push_back(e[1]);
        
        queue<pii> Q;
        Q.push(pii(0, 0));
        Q.push(pii(0, 1));
        while (!Q.empty())
        {
            int x, k;
            tie(x, k) = Q.front();
            Q.pop();
            for (auto y : v[x][k])
            {
                if (d[y][k^1] > d[x][k]+1)
                {
                    d[y][k^1] = d[x][k]+1;
                    Q.push(pii(y, k^1));
                }
            }
        }
        
        vector<int> ret(n);
        for (int i = 0; i < n; ++ i)
        {
            ret[i] = min(d[i][0], d[i][1]);
            if (ret[i] == INF) ret[i] = -1;
        }
        return ret;
    }
};