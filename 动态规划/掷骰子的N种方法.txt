题目难度：MEDIUM

这里有 d 个一样的骰子，每个骰子上都有 f 个面，分别标号为 1, 2, ..., f。

我们约定：掷骰子的得到总点数为各骰子面朝上的数字的总和。

如果需要掷出的总点数为 target，请你计算出有多少种不同的组合情况（所有的组合情况总共有 f^d 种），模 10^9 + 7 后返回。

 

示例 1：

输入：d = 1, f = 6, target = 3
输出：1
示例 2：

输入：d = 2, f = 6, target = 7
输出：6
示例 3：

输入：d = 2, f = 5, target = 10
输出：1
示例 4：

输入：d = 1, f = 2, target = 3
输出：0
示例 5：

输入：d = 30, f = 30, target = 500
输出：222616187
 

提示：

1 <= d, f <= 30
1 <= target <= 1000

思路：最先想到是组合问题，用回溯，DFS+backtracing，但是后面一旦数据大一点就会超时，一直没过
看了别人的代码，果然还是dp，一层一层计算例如案例一
（注意下标为1开始）
111111，返回dp[0][2]=1
例如案例二
111111
123456，返回dp[1][6]=1
例如案例三
11111
123454321，返回dp[1][9]=1
此外注意数据较大时，要取余防止溢出，反正返回结果是int，答案肯定不会比int大

上代码：
#define _for(i,a,b) for(int i = (a);i < b;i ++)


class Solution
{
	public:
		int dp[31][1003];
		int numRollsToTarget(int d, int f, int target)
		{
			_for(k,1,f+1)
				dp[0][k] = 1;
			_for(i,1,d)
				_for(j,1,target+1)
				{
					_for(k,1,f+1)
					{
						if(j-k>0)
							dp[i][j] += dp[i-1][j-k];
                        dp[i][j] %= 1000000007;
					}
				}
			
			return dp[d-1][target];
		}
};