题目难度：EASY

给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。
 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。

J 中的字母不重复，J 和 S中的所有字符都是字母。
字母区分大小写，因此"a"和"A"是不同类型的石头。

示例 1:

输入: J = "aA", S = "aAAbbbb"
输出: 3
示例 2:

输入: J = "z", S = "ZZ"
输出: 0
注意:

S 和 J 最多含有50个字母。
 J 中的字符不重复。

思路：哈希表
利用哈希表存储第一个字符串的所有字符
然后遍历第二个字符串的字符看哈希表里有没有对应字符，有的话就把结果（初值0）加一
最后返回结果即可

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
78.85%
的用户
内存消耗 :
8.6 MB
, 在所有 C++ 提交中击败了
75.64%
的用户
（都可以的）

上代码：
class Solution {
public:
    unordered_map<char, int> map;
    int res = 0;
    
    int numJewelsInStones(string J, string S) {
        for(int i = 0; i < J.size(); i++)
            map[J[i]] = i;
        for(int i = 0; i < S.size(); i++)
            if(map.find(S[i]) != map.end())
                res++;
        return res;
    }
};