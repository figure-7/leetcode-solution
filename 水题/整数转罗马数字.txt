题目难度：MEDIUM

罗马数字包含以下七种字符：?I，?V，?X，?L，C，D?和?M。


字符          
数值
I             1

V             5

X             10

L             50

C             100

D             500

M             1000

例如， 罗马数字 2 写做?II?，即为两个并列的 1。
12 写做?XII?，即为?X?+?II?。
 27 写做??XXVII, 即为?XX?+?V?+?II?。


通常情况下，罗马数字中小的数字在大的数字的右边。
但也存在特例，例如 4 不写做?IIII，而是?IV。
数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。
同样地，数字 9 表示为?IX。
这个特殊的规则只适用于以下六种情况：


I?可以放在?V?(5) 和?X?(10) 的左边，来表示 4 和 9。

X?可以放在?L?(50) 和?C?(100) 的左边，来表示 40 和?90。?

C?可以放在?D?(500) 和?M?(1000) 的左边，来表示?400 和?900。

给定一个整数，将其转为罗马数字。输入确保在 1?到 3999 的范围内。



示例?1:

输入:?3

输出: "III"


示例?2:

输入:?4

输出: "IV"


示例?3:

输入:?9

输出: "IX"


示例?4:

输入:?58

输出: "LVIII"

解释: L = 50, V = 5, III = 3.


示例?5:

输入:?1994

输出: "MCMXCIV"

解释: M = 1000, CM = 900, XC = 90, IV = 4。

思路：使用栈+枚举方式，先枚举出所有可能的罗马数字组合数组，一共四个数组，然后枚举了特殊案例，（10,100,1000）
之后对一般的数，先从后向前逐步取余数，然后把余数作为下标调用枚举中对应的数值得到对应罗马数列
放入栈中，一直遍历到结束，最后反向输出即可

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
91.98%
的用户
内存消耗 :
10.9 MB
, 在所有 C++ 提交中击败了
75.33%
的用户

上代码：
class Solution {
public:
    string intToRoman(int num) {
        string aima[] = {"","I","II","III","IV","V","VI","VII","VIII","IX"};
        string aimb[] = {"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"};
        string aimc[] = {"","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"};
        string aimd[] = {"","M","MM","MMM"};
        vector<string> res(4);
        if(num == 10) return "X";
        if(num == 100) return "C";
        if(num == 1000) return "M";
        if(num % 10 >=0) {
            res.push_back(aima[num%10]);
            if(num % 100 >=0 && num > 10) {
                int a = num % 100;
                int curra = a / 10;
                res.push_back(aimb[curra]);
                if(num % 1000 >=0 && num > 100) {
                    int b = num % 1000;
                    int currb = b / 100;
                    res.push_back(aimc[currb]);
                    if(num % 1000 >=0 && num > 1000) {
                        int currc = num / 1000;
                        res.push_back(aimd[currc]);
                    }
                }
            }
        }
        string s = "";
        for(int i = 0; i < res.size(); i++) {
            s += res.back();
            res.pop_back();
        }
        return s;
    }
};