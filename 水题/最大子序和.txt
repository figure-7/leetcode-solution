题目难度：EASY

给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:

输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。
进阶:

如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。

思路:dp啊，就O(n)了又怎样，
公式：dp[i] = max(dp[i-1], 0) + nums[i]，
返回最大dp值即可

执行用时 : 16 ms, 在Maximum Subarray的C++提交中击败了69.26% 的用户
内存消耗 : 9.6 MB, 在Maximum Subarray的C++提交中击败了73.99% 的用户

上代码：
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.size()==0) {
            return 0;
        }
        int a = nums.size();
        vector<int> dp(a);
        dp[0] = nums[0];
        for(int i = 1; i <nums.size(); i++) {
            dp[i] = max(dp[i-1], 0) + nums[i];
        }
        sort(dp.begin(), dp.end());
        return dp[a-1];
    }
};