题目难度：MEDIUM

给定一个整数数组和一个整数 k，你需要在数组里找到 不同的 k-diff 数对，并返回不同的 k-diff 数对 的数目。
这里将 k-diff 数对定义为一个整数对 (nums[i], nums[j])，并满足下述全部条件：
0 <= i < j < nums.length
|nums[i] - nums[j]| == k
注意，|val| 表示 val 的绝对值。
示例 1：
输入：nums = [3, 1, 4, 1, 5], k = 2
输出：2
解释：数组中有两个 2-diff 数对, (1, 3) 和 (3, 5)。
尽管数组中有两个1，但我们只应返回不同的数对的数量。
示例 2：
输入：nums = [1, 2, 3, 4, 5], k = 1
输出：4
解释：数组中有四个 1-diff 数对, (1, 2), (2, 3), (3, 4) 和 (4, 5)。
示例 3：
输入：nums = [1, 3, 1, 5, 4], k = 0
输出：1
解释：数组中只有一个 0-diff 数对，(1, 1)。
提示：
1 <= nums.length <= 104
-107 <= nums[i] <= 107
0 <= k <= 107

思路：哈希表
排序树组，如果给定值为1，那么使用哈希表取所有不同值且和等于给定值的对数给结果值（初值0）后返回即可
否则删去原数组重复元素，之后用另外一个哈希表存数组值
取所有不同且和等于给定值的对数给结果值
最后返回结果值即可

执行用时：
20 ms
, 在所有 C++ 提交中击败了
44.10%
的用户
内存消耗：
12.8 MB
, 在所有 C++ 提交中击败了
64.92%
的用户
（时空都一般）

上代码：
class Solution {
public:
    unordered_map<int, int> map, mapper;
    int res = 0;

    int findPairs(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        if(k == 0) {
            for(int i = 1; i < nums.size(); i++) {
                if(nums[i] == nums[i - 1] && mapper.find(nums[i]) == mapper.end()) {
                    res++;
                    mapper[nums[i]] = 1;
                }
            }
            return res;
        }
        nums.erase(unique(nums.begin(), nums.end()), nums.end());
        for(int cur : nums) {
            if(map.find(cur) != map.end()) map[cur]++;
            else map[cur] = 1;
        }
        for(int cur : nums) if(map.find(cur + k) != map.end()) res += map[cur];
        return res;
    }
};
