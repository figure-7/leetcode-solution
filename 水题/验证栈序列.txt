题目难度：MEDIUM

给定 pushed 和 popped 两个序列，每个序列中的 值都不重复，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 true；
否则，返回 false 。

 

示例 1：

输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
输出：true
解释：我们可以按以下顺序执行：
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1
示例 2：

输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
输出：false
解释：1 不能在 2 之前弹出。
 

提示：

0 <= pushed.length == popped.length <= 1000
0 <= pushed[i], popped[i] < 1000
pushed 是 popped 的排列。

思路：栈
遍历第一个数组，元素依次入栈
当栈不空并且第二个数组（下标初值0）还有元素并且当前第二个数组元素等于栈顶元素时，当前下标加一，出栈一次
租后三元运算符返回栈空为true
否则返回false即可

执行用时 :
28 ms
, 在所有 C++ 提交中击败了
7.35%
的用户
内存消耗 :
15.3 MB
, 在所有 C++ 提交中击败了
8.00%
的用户
（时空都不咋地）

上代码：
class Solution {
public:
    int j = 0;
    stack<int> s;
    
    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
        for(int i = 0; i < pushed.size(); i++) {
            s.push(pushed[i]);
            while(j < popped.size() && !s.empty() && popped[j] == s.top()) {
                j++;
                s.pop();
            }
        }
        return s.empty() ? true : false;
    }
};