题目难度：MEDIUM

一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。

请写程序找出这两个只出现一次的数字。

要求时间复杂度是O(n)，空间复杂度是O(1)。

 

示例 1：

输入：nums = [4,1,4,6]
输出：[1,6] 或 [6,1]
示例 2：

输入：nums = [1,2,10,4,1,4,3,3]
输出：[2,10] 或 [10,2]
 

限制：

2 <= nums <= 10000

思路：哈希表
遍历数组，哈希表没找到数组值就进哈希表，否则删除哈希表对应值
在遍历一次，当哈希表找到值就放进2空间常数结果数组中（此时哈希表肯定只有两个元素，且空间O(1)）
最后返回结果数组即可

执行用时 :
88 ms
, 在所有 C++ 提交中击败了
7.61%
的用户
内存消耗 :
19.5 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间炸了，空间完杀！）

上代码：
class Solution {
public:
    unordered_map<int, int> map;
    int begin = 0;
    
    vector<int> singleNumbers(vector<int>& nums) {
        vector<int> res(2, 0);
        for(int i = 0; i < nums.size(); i++) {
            if(map.find(nums[i]) == map.end()) map[nums[i]] = i;
            else map.erase(nums[i]);
        }
        for(int i = 0; i < nums.size(); i++) {
            if(map.find(nums[i]) != map.end()) {
                res[begin] = nums[i];
                begin++;
            }
        }
        return res;
    }
};