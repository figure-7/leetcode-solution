题目难度：EASY


你将得到一个字符串数组 A。

如果经过任意次数的移动，S == T，那么两个字符串 S 和 T 是特殊等价的。

一次移动包括选择两个索引 i 和 j，且 i ％ 2 == j ％ 2，交换 S[j] 和 S [i]。

现在规定，A 中的特殊等价字符串组是 A 的非空子集 S，这样不在 S 中的任何字符串与 S 中的任何字符串都不是特殊等价的。

返回 A 中特殊等价字符串组的数量。

 

示例 1：

输入：["a","b","c","a","c","c"]
输出：3
解释：3 组 ["a","a"]，["b"]，["c","c","c"]
示例 2：

输入：["aa","bb","ab","ba"]
输出：4
解释：4 组 ["aa"]，["bb"]，["ab"]，["ba"]
示例 3：

输入：["abc","acb","bac","bca","cab","cba"]
输出：3
解释：3 组 ["abc","cba"]，["acb","bca"]，["bac","cab"]
示例 4：

输入：["abcd","cdab","adcb","cbad"]
输出：1
解释：1 组 ["abcd","cdab","adcb","cbad"]
 

提示：

1 <= A.length <= 1000
1 <= A[i].length <= 20
所有 A[i] 都具有相同的长度。
所有 A[i] 都只由小写字母组成。

思路：模拟
遍历字符串数组，针对每个字符的奇偶位分别链接为两个字符串
然后对这两个字符串排序，依次累加构成新的字符串赋值给原数组对应项
遍历结束后数组排序
最后返回数组几个不同的字符串即可

执行用时 :
20 ms
, 在所有 C++ 提交中击败了
47.06%
的用户
内存消耗 :
8.3 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间一般，空间完杀！）

上代码：
class Solution {
public:
    int res = 1;
    
    int numSpecialEquivGroups(vector<string>& A) {
        for(int i = 0; i < A.size(); i++) {
            string a = "", b = "";
            int begin = 0;
            for(int j = 0; j < A[i].size(); j += 2) {
                a += A[i][begin];
                if(begin + 1 < A[i].size()) b += A[i][begin + 1];
                begin += 2;
            }
            sort(a.begin(), a.end());
            sort(b.begin(), b.end());
            A[i] = "";
            for(int j = 0; j < a.size(); j++) {
                A[i] += a[j];
                if(j < b.size()) A[i] += b[j];
            }
        }
        sort(A.begin(), A.end());
        for(int i = 0; i < A.size() - 1; i++) if(A[i] != A[i + 1]) res++;
        return res;
    }
};