题目难度：EASY

在歌曲列表中，第 i 首歌曲的持续时间为 time[i] 秒。

返回其总持续时间（以秒为单位）可被 60 整除的歌曲对的数量。

形式上，我们希望索引的数字  i < j 且有 (time[i] + time[j]) % 60 == 0。

 

示例 1：

输入：[30,20,150,100,40]
输出：3
解释：这三对的总持续时间可被 60 整数：
(time[0] = 30, time[2] = 150): 总持续时间 180
(time[1] = 20, time[3] = 100): 总持续时间 120
(time[1] = 20, time[4] = 40): 总持续时间 60
示例 2：

输入：[60,60,60]
输出：3
解释：所有三对的总持续时间都是 120，可以被 60 整数。
 

提示：

1 <= time.length <= 60000
1 <= time[i] <= 500

思路：数论
首先暴力超时，（WA点2，没想到...）
所以开60空间数组，先将数组每个数的60取余的结果累加进数组
然后遍历数组除了0下标跟30下标以外（自己跟自己配对）隔和为60的下标值累乘并累加进结果
0下标和30下标取对2的组合累加进结果
最后返回结果即可

执行用时 :
44 ms
, 在所有 C++ 提交中击败了
41.74%
的用户
内存消耗 :
24.3 MB
, 在所有 C++ 提交中击败了
5.27%
的用户
（时间一般，空间炸了）

上代码：
class Solution {
public:
    int cur = 1, res = 0;
    
    int numPairsDivisibleBy60(vector<int>& time) {
        vector<int> curr(60, 0);
        for(int i = 0; i < time.size(); i++)
            curr[time[i] % 60]++;
        res += (curr[0] * (curr[0] - 1)) / 2;
        res += (curr[30] * (curr[30] - 1)) / 2;
        for(int i = 1; i < 30; i++)
            res += curr[i] * curr[60 - i];
        return res;
    }
};