题目难度：HARD

给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口 k 内的数字。滑动窗口每次只向右移动一位。

返回滑动窗口最大值。

示例:

输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7] 
解释: 

  滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
注意：

你可以假设 k 总是有效的，1 ≤ k ≤ 输入数组的大小，且输入数组不为空。

进阶：

你能在线性时间复杂度内解决此题吗？

思路：首先，比较直接的思路是在一趟遍历里每K个作比较取最大值，放入数组中返回即可。时间较高，空间较小。

执行用时 :
200 ms
, 在所有 C++ 提交中击败了
6.07%
的用户
内存消耗 :
12.8 MB
, 在所有 C++ 提交中击败了
84.55%
的用户

上代码：
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        if(nums.size()==0) {
            return res;
        }
        for(int i = 0; i < nums.size()-k+1; i++) {
            int curr=-2222222;
            for(int j = i; j < i + k; j++) {
                curr = max(curr,nums[j]);
            }
            res.push_back(curr);
        }
        return res;
    }
};