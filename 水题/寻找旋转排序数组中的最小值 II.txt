题目难度：HARD

假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

请找出其中最小的元素。

注意数组中可能存在重复的元素。

示例 1：

输入: [1,3,5]
输出: 1
示例 2：

输入: [2,2,2,0,1]
输出: 0
说明：

这道题是 寻找旋转排序数组中的最小值 的延伸题目。
允许重复会影响算法的时间复杂度吗？会如何影响，为什么？

思路：二分
有上一个题的思路，本题只要在开头调用去重函数即可
（五分钟题，亏为HARD！）

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
96.99%
的用户
内存消耗 :
9.1 MB
, 在所有 C++ 提交中击败了
5.14%
的用户
（这函数真不错，时间很好！空间就离谱，都是原地。。。）

上代码：
class Solution {
public:
    int findMin(vector<int>& nums) {
        int n = unique(nums.begin(), nums.end()) - nums.begin();
        while(nums.size() > n)
            nums.pop_back();
        int first = 0, last = nums.size() - 1;
        while(1) {
            if(first == last)
                return nums[first];
            if(first == last - 1)
                return min(nums[first], nums[last]);
            int mid = (first + last) / 2;
            if(nums[mid] > nums[first] && nums[mid] > nums[last])
                first = mid + 1;
            else if(nums[mid] > nums[first] && nums[mid] < nums[last])
                last = mid - 1;
            else
                last = mid;
        }
        return -1;
    }
};