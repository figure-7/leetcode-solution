题目难度：EASY

给定一个正整数，检查它的二进制表示是否总是 0、1 交替出现：
换句话说，就是二进制表示中相邻两位的数字永不相同。
示例 1：
输入：n = 5
输出：true
解释：5 的二进制表示是：101
示例 2：
输入：n = 7
输出：false
解释：7 的二进制表示是：111.
示例 3：
输入：n = 11
输出：false
解释：11 的二进制表示是：1011.
提示：
1 <= n <= 231 - 1

思路：模拟
建立字符串保存给定数值的二进制反向结果
从第二项开始遍历字符串，如果值跟前一项不等就返回FALSE即可
最后返回TRUE即可

执行用时：
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗：
5.9 MB
, 在所有 C++ 提交中击败了
7.40%
的用户
（时间完杀！！！空间炸了）

上代码：
class Solution {
public:
    string res = "";
    
    bool hasAlternatingBits(int n) {
        while(n > 0) {
            if(n % 2 == 0) res += '1';
            else res += '0';
            n /= 2;
        }
        for(int i = 1; i < res.size(); i++) if(res[i] == res[i - 1]) return false;
        return true;
    }
};
