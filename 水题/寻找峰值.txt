题目难度：medium
峰值元素是指其值大于左右相邻值的元素。

给定一个输入数组 nums，其中 nums[i] ≠ nums[i+1]，找到峰值元素并返回其索引。

数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。

你可以假设 nums[-1] = nums[n] = -∞。

示例 1:

输入: nums = [1,2,3,1]
输出: 2
解释: 3 是峰值元素，你的函数应该返回其索引 2。
示例 2:

输入: nums = [1,2,1,3,5,6,4]
输出: 1 或 5 
解释: 你的函数可以返回索引 1，其峰值元素为 2；
     或者返回索引 5， 其峰值元素为 6。
说明:

你的解法应该是 O(logN) 时间复杂度的。
不说什么，，，用简单便利都可以过，就一简单题
上代码：
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        if(nums.size()==1) {
            return 0;
        }
        int a = 0;
        for(int i=0; i<nums.size()-1; ++i) {
            if(nums[i]>nums[i+1]) {
                a = i;
                break;
            }
            else {
                a = i+1;
            }
        }
        return a;
    }
};
用二分法时间复杂度O（logN）
上代码：
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int n = nums.size();
        int start = 0;
        int end = n-1;
        int mid = 0;
        if(nums.size()==1) {
            return 0;
        }
        while(start<=end) {
            mid = (end + start) / 2;
            if((mid==0 || nums[mid] >= nums[mid-1]) && (mid == n-1 || nums[mid] >= nums[mid+1])){
                return mid;
            }
            else if(mid>0 && nums[mid-1] > nums[mid]){
                end = mid-1;
            }
            else {
                start = mid + 1;
            }
        }
        return mid;
    }
};