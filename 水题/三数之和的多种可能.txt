题目难度：MEDIUM

给定一个整数数组 A，以及一个整数 target 作为目标值，返回满足 i < j < k 且 A[i] + A[j] + A[k] == target 的元组 i, j, k 的数量。

由于结果会非常大，请返回 结果除以 10^9 + 7 的余数。

 

示例 1：

输入：A = [1,1,2,2,3,3,4,4,5,5], target = 8
输出：20
解释：
按值枚举（A[i]，A[j]，A[k]）：
(1, 2, 5) 出现 8 次；
(1, 3, 4) 出现 8 次；
(2, 2, 4) 出现 2 次；
(2, 3, 3) 出现 2 次。
示例 2：

输入：A = [1,1,2,2,2,2], target = 5
输出：12
解释：
A[i] = 1，A[j] = A[k] = 2 出现 12 次：
我们从 [1,1] 中选择一个 1，有 2 种情况，
从 [2,2,2,2] 中选出两个 2，有 6 种情况。
 

提示：

3 <= A.length <= 3000
0 <= A[i] <= 100
0 <= target <= 300

思路：模拟
（WA点：使用了错误的方法）
先把数组所有值作为下标，个数为值存进数组
然后二维遍历数组的对，把所有不是对后面的元素删掉
当给定值减去对的和值大于等于0并且小于数组元素最大值时，结果（初值0）累加上数组对应给定值减去对的和值作为下标的值，然后余1000000007
最后返回结果值即可

执行用时 :
1840 ms
, 在所有 C++ 提交中击败了
5.03%
的用户
内存消耗 :
10.1 MB
, 在所有 C++ 提交中击败了
33.33%
的用户
（时间炸了，空间不咋地）

上代码：
class Solution {
public:
    int res = 0;
    int curr[105] = {0};
    
    int threeSumMulti(vector<int>& A, int target) {
        for(int i = 0; i < A.size(); i++) curr[A[i]]++;
        for(int i = 0; i < A.size() - 2; i++) {
            for(int j = i + 1; j < A.size() - 1; j++) {
                curr[A[i]]--;
                curr[A[j]]--;
                if(target - A[i] - A[j] >= 0 && target - A[i] - A[j] < 105) res += curr[target - A[i] - A[j]];
                res %= 1000000007;
                curr[A[i]]++;
            }
            for(int j = i + 1; j < A.size() - 1; j++) curr[A[j]]++;
            curr[A[i]]--;
        }
        return res;
    }
};