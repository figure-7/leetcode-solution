题目难度：EASY

假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。

你需要帮助他们用最少的索引和找出他们共同喜爱的餐厅。 
如果答案不止一个，则输出所有答案并且不考虑顺序。 
你可以假设总是存在一个答案。

示例 1:

输入:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
输出: ["Shogun"]
解释: 他们唯一共同喜爱的餐厅是“Shogun”。
示例 2:

输入:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["KFC", "Shogun", "Burger King"]
输出: ["Shogun"]
解释: 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。
提示:

两个列表的长度范围都在 [1, 1000]内。
两个列表中的字符串的长度将在[1，30]的范围内。
下标从0开始，到列表的长度减1。
两个列表都没有重复的元素。

思路：哈希表
先将表一数据存进哈希表，值为下标
然后遍历表二，每次找到哈希表与表二对应的字符串，先取哈希表对应字符串的值与当前遍历下标的和
然后将该值与之前的值（初值为无限大）进行比较，如果小了就代表当前的索引和是判断过的情况中最小的
就更新数组将当前字符串作为结果进数组，如果等于就直接进数组即可
否则继续遍历直至结束，最后返回结果数组即可

执行用时 :
124 ms
, 在所有 C++ 提交中击败了
66.05%
的用户
内存消耗 :
28.4 MB
, 在所有 C++ 提交中击败了
65.79%
的用户
（效率一般般）

上代码：
class Solution {
public:
    unordered_map<string, int> map;
    int cur = INT_MAX;
    vector<string> res;
    
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        for(int i = 0; i < list1.size(); i++)
            map[list1[i]] = i;
        for(int i = 0; i < list2.size(); i++) {
            if(map.find(list2[i]) != map.end()) {
                int sum = map[list2[i]] + i;
                if(sum == cur)
                    res.push_back(list2[i]);
                if(sum < cur) {
                    res.clear();
                    cur = sum;
                    res.push_back(list2[i]);
                }
            }
        }
        return res;
    }
};