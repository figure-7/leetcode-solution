题目难度：MEDIUM

一位老师正在出一场由 n 道判断题构成的考试，每道题的答案为 true （用 'T' 表示）或者 false （用 'F' 表示）。
老师想增加学生对自己做出答案的不确定性，方法是 最大化 有 连续相同 结果的题数。
（也就是连续出现 true 或者连续出现 false）。
给你一个字符串 answerKey ，其中 answerKey[i] 是第 i 个问题的正确结果。
除此以外，还给你一个整数 k ，表示你能进行以下操作的最多次数：
每次操作中，将问题的正确答案改为 'T' 或者 'F' （也就是将 answerKey[i] 改为 'T' 或者 'F' ）。
请你返回在不超过 k 次操作的情况下，最大 连续 'T' 或者 'F' 的数目。
示例 1：
输入：answerKey = "TTFF", k = 2
输出：4
解释：我们可以将两个 'F' 都变为 'T' ，得到 answerKey = "TTTT" 。
总共有四个连续的 'T' 。
示例 2：
输入：answerKey = "TFFT", k = 1
输出：3
解释：我们可以将最前面的 'T' 换成 'F' ，得到 answerKey = "FFFT" 。
或者，我们可以将第二个 'T' 换成 'F' ，得到 answerKey = "TFFF" 。
两种情况下，都有三个连续的 'F' 。
示例 3：
输入：answerKey = "TTFTTFTT", k = 1
输出：5
解释：我们可以将第一个 'F' 换成 'T' ，得到 answerKey = "TTTTTFTT" 。
或者我们可以将第二个 'F' 换成 'T' ，得到 answerKey = "TTFTTTTT" 。
两种情况下，都有五个连续的 'T' 。
提示：
n == answerKey.length
1 <= n <= 5 * 104
answerKey[i] 要么是 'T' ，要么是 'F'
1 <= k <= n

思路：双指针
首指针初始化=1，建立两个队列，遍历数组，遍历值作为尾指针
如果当前字符为T，先判断第一个队列长度是否等于给定值
如果等于就把首指针更新为第一个队列队首的值，队列出队一次（能够变换的次数已达上限）
把尾指针存进建立的第一个队列
每次遍历结果值（初始化0）都去当前结果值与尾首指针差的最大值
同样，字符为F时在进行一次上面的逻辑，用第二个队列（WA点：初始化首指针错误）
最后返回结果值即可

执行用时：
36 ms
, 在所有 C++ 提交中击败了
17.49%
的用户
内存消耗：
14.4 MB
, 在所有 C++ 提交中击败了
8.75%
的用户
（时空都炸了）

上代码：
class Solution {
public:
    queue<int> p, q;
    int res = 0, begin = -1;

    int maxConsecutiveAnswers(string answerKey, int k) {
        for(int end = 0; end < answerKey.size(); end++) {
            if(answerKey[end] == 'T') {
                if(p.size() == k) {
                    begin = p.front();
                    p.pop();
                }
                p.push(end);
            }
            res = max(end - begin, res);
        }
        begin = -1;
        for(int end = 0; end < answerKey.size(); end++) {
            if(answerKey[end] == 'F') {
                if(q.size() == k) {
                    begin = q.front();
                    q.pop();
                }
                q.push(end);
            }
            res = max(end - begin, res);
        }
        return res;
    }
};
