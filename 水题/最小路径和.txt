题目难度：MEDIUM

给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。

说明：每次只能向下或者向右移动一步。

示例:

输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。

思路：经典dp，加上对应的值判断即可，
公式dp[a][b] = min(dp[a-1][b], dp[a][b-1]) + grid[a][b]
即可

执行用时 : 20 ms, 在Minimum Path Sum的C++提交中击败了53.05% 的用户
内存消耗 : 11 MB, 在Minimum Path Sum的C++提交中击败了44.82% 的用户
（很一般。。。）

上代码：
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.size()==0) {
            return 0;
        }
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> route(m, vector<int>(n, 1));
        route[0][0] = grid[0][0];
        for(int k=1; k < m; k++) {
            route[k][0] = route[k- 1][0] + grid[k][0];
        }
        for(int a=1; a < n; a++) {
            route[0][a] = route[0][a - 1] + grid[0][a];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                route[i][j] = min(route[i - 1][j], route[i][j - 1]) + grid[i][j];
            }
        }
        return route[m - 1][n - 1];
    }
};