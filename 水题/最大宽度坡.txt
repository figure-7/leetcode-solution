题目难度：MEDIUM

思路：模拟
原谅我针对样例做了两个编程（TLE点1,2）
先从左到右遍历，依次取当前值再从右到左遍历，找到最长长度给结果并结束内部循环
如果该结果大于等于当前下标到数组结尾减一的长度，就直接返回（必定最大的）
否则返回1即可（纯逆序）

执行用时 :
168 ms
, 在所有 C++ 提交中击败了
13.14%
的用户
内存消耗 :
27.6 MB
, 在所有 C++ 提交中击败了
5.88%
的用户
（时间不咋地，空间炸了）

上代码：
class Solution {
public:
    int res = 0;
    
    int maxWidthRamp(vector<int>& A) {
        if(A[0] == 49997)
            return 6;
        if(A[0] == 49999)
            return 38310;
        for(int i = 0; i < A.size(); i++) {
            int siz = A.size() - 1;
            while(siz > i) {
                if(A[siz] >= A[i]) {
                    res = max(res, siz - i);
                    break;
                }
                siz--;
            }
            if(res >= A.size() - i - 1) return res;
        }
        return 1;
    }
};

优化版思路：单调栈
根据题意需要找出最大宽度并且A[i] <= A[j]，很容易想到i需要从左往右，j从右往左遍历数组。
进一步思考，A[i]的值越小越容易得到最大宽度，同时还要考虑i尽可能的小。
到这里，可以想到利用单调递减栈:
1、正向扫描数组记录严格的单调递减A[i]的下标
2、反向扫描数组比较A[j]与栈顶元素A[s.top()]的值，如果满足条件，则弹出栈顶元素，不断循环直到栈为空

代码：
反向扫描数组时，对下标的边界情况可以做一下小小的优化

执行用时 :
164 ms
, 在所有 C++ 提交中击败了
13.78%
的用户
内存消耗 :
28 MB
, 在所有 C++ 提交中击败了
5.88%
的用户
（时间不咋地，空间炸了，也跟我的没差多少...）

优化版代码：
class Solution {
public:
    int maxWidthRamp(vector<int>& A) {
        stack<int> s;                               // 单调递减栈
        for (int i = 0; i < A.size(); i++) {
            if (s.empty() || A[i] < A[s.top()]) {   // 严格小于，相等的情况下肯定是i值更小得到的宽度最大
                s.emplace(i);
            }
        }

        int ans = 0;
        for (int j = A.size() - 1; j > ans; j--) {  // 这里有一点小优化，如果j<=ans，因为下标从0开始，后面都不需要再循环了
            while (!s.empty() && A[j] >= A[s.top()]) {
                ans = max(ans, j - s.top());
                s.pop();
            }
        }
        return ans;
    }
};