题目难度：MEDIUM

给你一个链表的头节点 head 和一个特定值 x ，请你对链表进行分隔，使得所有 小于 x 的节点都出现在 大于或等于 x 的节点之前。
你应当 保留 两个分区中每个节点的初始相对位置。
示例 1：
输入：head = [1,4,3,2,5,2], x = 3
输出：[1,2,2,4,3,5]
示例 2：
输入：head = [2,1], x = 2
输出：[1,2]
提示：
链表中节点的数目在范围 [0, 200] 内
-100 <= Node.val <= 100
-200 <= x <= 200

思路：链表+队列
新建两个链表继承给定链表
其中一个遍历并将小于给定值的值和其余值按顺序保存进两个队列中
之后将其余值队列中的值按顺序加入到小于给定值的队列中
遍历另外一个建立的链表按照合并后的队列更新每个节点的值
最后返回给定链表即可

执行用时：
4 ms
, 在所有 C++ 提交中击败了
87.50%
的用户
内存消耗：
10.1 MB
, 在所有 C++ 提交中击败了
8.25%
的用户
（时间不错，空间炸了）

上代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    queue<int> q, qq;

    ListNode* partition(ListNode* head, int x) {
        ListNode* node = head;
        ListNode* curr = head;
        while(node != nullptr) {
            if(node->val < x) q.push(node->val);
            else qq.push(node->val);
            node = node->next;
        }
        while(!qq.empty()) {
            q.push(qq.front());
            qq.pop();
        }
        while(curr != nullptr) {
            curr->val = q.front();
            q.pop();
            curr = curr->next;
        }
        return head;
    }
};