题目难度：EASY

给你一个数组 rectangles ，其中 rectangles[i] = [li, wi] 表示第 i 个矩形的长度为 li 、宽度为 wi 。
如果存在 k 同时满足 k <= li 和 k <= wi ，就可以将第 i 个矩形切成边长为 k 的正方形。
例如，矩形 [4,6] 可以切成边长最大为 4 的正方形。
设 maxLen 为可以从矩形数组 rectangles 切分得到的 最大正方形 的边长。
请你统计有多少个矩形能够切出边长为 maxLen 的正方形，并返回矩形 数目 。
示例 1：
输入：rectangles = [[5,8],[3,9],[5,12],[16,5]]
输出：3
解释：能从每个矩形中切出的最大正方形边长分别是 [5,3,5,5] 。
最大正方形的边长为 5 ，可以由 3 个矩形切分得到。
示例 2：
输入：rectangles = [[2,3],[3,7],[4,3],[3,7]]
输出：3
提示：
1 <= rectangles.length <= 1000
rectangles[i].length == 2
1 <= li, wi <= 109
li != wi

思路：模拟
遍历给定数组，记录每一项的最小值到建立数组
给建立数组默认排序
返回累计从后到前相等值的个数即可

执行用时：
36 ms
, 在所有 C++ 提交中击败了
78.44%
的用户
内存消耗：
18.3 MB
, 在所有 C++ 提交中击败了
50.00%
的用户
（时间不错，空间一般）

上代码：
class Solution {
public:
    int res = 1;
    vector<int> curr;
    
    int countGoodRectangles(vector<vector<int>>& rectangles) {
        for(int i = 0; i < rectangles.size(); i++) {
            int cur = min(rectangles[i][0], rectangles[i][1]);
            curr.push_back(cur);
        }
        sort(curr.begin(), curr.end());
        for(int i = curr.size() - 1; i > 0; i--) {
            if(curr[i] == curr[i - 1]) res++;
            else break;
        }
        return res;
    }
};