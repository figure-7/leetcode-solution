题目难度：MEDIUM

给你一个整数数组 nums ，数组中共有 n 个整数。
132 模式的子序列 由三个整数 nums[i]、nums[j] 和 nums[k] 组成，并同时满足：i < j < k 和 nums[i] < nums[k] < nums[j] 。
如果 nums 中存在 132 模式的子序列 ，返回 true ；
否则，返回 false 。
进阶：很容易想到时间复杂度为 O(n^2) 的解决方案，你可以设计一个时间复杂度为 O(n logn) 或 O(n) 的解决方案吗？
示例 1：
输入：nums = [1,2,3,4]
输出：false
解释：序列中不存在 132 模式的子序列。
示例 2：
输入：nums = [3,1,4,2]
输出：true
解释：序列中有 1 个 132 模式的子序列： [1, 4, 2] 。
示例 3：
输入：nums = [-1,3,2,0]
输出：true
解释：序列中有 3 个 132 模式的的子序列：[-1, 3, 2]、[-1, 3, 0] 和 [-1, 2, 0] 。
提示：
n == nums.length
1 <= n <= 104
-109 <= nums[i] <= 109

思路：前缀和
利用逆向思维倒序遍历数组，那么132模式就变成了231模式，最后只需要考虑最前面的是不是最小就可以了，告别平方时间复杂度，符合进阶题意。
首先判断数组长度小于3返回false即可。
先新建两个数组保存原数组前缀里最大最小的值。
逆序遍历原数组，如果前一向最大值数组值小于等于当前值或者最小值数组值大于等于当前值就继续遍历外部下标（无法构成231模式）。
否则遍历内部前面的所有项，如果内部项的值大于外部项的值了（构成了23模式），就看前一项的最小值数组的值是不是小于当前外部项的值（保证是231模式），是的话返回true即可。
否则结束内部循环（最小值不满足肯定不是231模式了）。
最后返回false即可。

时间击败90%
空间击败38%
（时间很好，空间不咋地）

上代码：
class Solution {
public:
    int small = 1e9, big = -1e9;
    
    bool find132pattern(vector<int>& nums) {
        if(nums.size() < 3) return false;
        vector<int> curr = nums;
        vector<int> currmodtwo = nums;
        for(int i = 0; i < nums.size(); i++) {
            small = min(small, nums[i]);
            big = max(big, nums[i]);
            curr[i] = small;
            currmodtwo[i] = big;
        }
        for(int i = nums.size() - 1; i > 1; i--) {
            if(currmodtwo[i - 1] <= nums[i] || curr[i - 1] >= nums[i]) continue;
            for(int j = i - 1; j > 0; j--) {
                if(nums[j] > nums[i]) {
                    if(curr[j - 1] < nums[i]) return true;
                    else break;
                }
            }
        }
        return false;
    }
};