题目难度：MEDIUM

给定整数数组 A，每次 move 操作将会选择任意 A[i]，并将其递增 1。

返回使 A 中的每个值都是唯一的最少操作次数。

示例 1:

输入：[1,2,2]
输出：1
解释：经过一次 move 操作，数组将变为 [1, 2, 3]。
示例 2:

输入：[3,2,1,2,1,7]
输出：6
解释：经过 6 次 move 操作，数组将变为 [3, 4, 1, 2, 5, 7]。
可以看出 5 次或 5 次以下的 move 操作是不能让数组的每个值唯一的。
提示：

0 <= A.length <= 40000
0 <= A[i] < 40000

思路：模拟
（TLE点1,2：哈希表及开空间超时）（WA点1：错的方法）
先判断数组是不是空，是空返回0（WA点2：这里没有额外判断）
排序，然后遍历数组，如果前一项大于等于后一项，结果加上两项的差值
后一项值也加上差值
最后返回结果即可

执行用时 :
168 ms
, 在所有 C++ 提交中击败了
14.56%
的用户
内存消耗 :
24.6 MB
, 在所有 C++ 提交中击败了
45.00%
的用户
（时间不咋地，空间一般）

上代码：
class Solution {
public:
    int res = 0;
    
    int minIncrementForUnique(vector<int>& A) {
        if(A.size() == 0) return 0;
        sort(A.begin(), A.end());
        for(int i = 0; i < A.size() - 1; i++) {
            if(A[i] >= A[i + 1]) {
                int cur = A[i] - A[i + 1];
                cur++;
                A[i + 1] += cur;
                res += cur;
            }
        }
        return res;
    }
};