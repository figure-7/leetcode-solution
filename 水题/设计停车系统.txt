题目难度：EASY

请你给一个停车场设计一个停车系统。
停车场总共有三种不同大小的车位：
大，中和小，每种尺寸分别有固定数目的车位。
请你实现 ParkingSystem 类：
ParkingSystem(int big, int medium, int small) 初始化 ParkingSystem 类，三个参数分别对应每种停车位的数目。
bool addCar(int carType) 检查是否有 carType 对应的停车位。 
carType 有三种类型：大，中，小，分别用数字 1， 2 和 3 表示。
一辆车只能停在  carType 对应尺寸的停车位中。
如果没有空车位，请返回 false ，否则将该车停入车位并返回 true 。
示例 1：
输入：
["ParkingSystem", "addCar", "addCar", "addCar", "addCar"]
[[1, 1, 0], [1], [2], [3], [1]]
输出：
[null, true, true, false, false]
解释：
ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
parkingSystem.addCar(1); // 返回 true ，因为有 1 个空的大车位
parkingSystem.addCar(2); // 返回 true ，因为有 1 个空的中车位
parkingSystem.addCar(3); // 返回 false ，因为没有空的小车位
parkingSystem.addCar(1); // 返回 false ，因为没有空的大车位，唯一一个大车位已经被占据了
提示：
0 <= big, medium, small <= 1000
carType 取值为 1， 2 或 3
最多会调用 addCar 函数 1000 次

思路：解决问题
建立三个参数保留各类型车位（初值0）
ParkingSystem：分别继承到三个参数里即可
addCar：判断类型再判断对应参数是否大于0，大于0参数值就减一后返回true即可，否则返回false即可

执行用时：
72 ms
, 在所有 C++ 提交中击败了
64.51%
的用户
内存消耗：
32.3 MB
, 在所有 C++ 提交中击败了
60.54%
的用户
（时空都不错）

上代码：
class ParkingSystem {
public:
    int a = 0, b = 0, c = 0;
    
    ParkingSystem(int big, int medium, int small) {
        a = big;
        b = medium;
        c = small;
    }
    
    bool addCar(int carType) {
        if(carType == 1) {
            if(a > 0) {
                a--;
                return true;
            } else  return false;
        } else if(carType == 2) {
            if(b > 0) {
                b--;
                return true;
            } else  return false;
        } else {
            if(c > 0) {
                c--;
                return true;
            } else  return false;
        }
    }
};

/**
 * Your ParkingSystem object will be instantiated and called as such:
 * ParkingSystem* obj = new ParkingSystem(big, medium, small);
 * bool param_1 = obj->addCar(carType);
 */