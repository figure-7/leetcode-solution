题目难度：MEDIUM

请你来实现一个 atoi 函数，使其能将字符串转换成整数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

接下来的转化规则如下：

如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。
假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。
该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。
注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、
字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0 。

提示：

本题中的空白字符只包括空格字符 ' ' 。
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。
如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。
 

示例 1:

输入: "42"
输出: 42
示例 2:

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:

输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:

输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
示例 5:

输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (−231) 。

思路：模拟
（这题真的SB，不仅黑，而且执行提交结果不一致，本来没错硬是跑了将近十个错误结果，我：？？？）
遍历数组记录应得的字符串（WA点1,2,3,4,5：超多情况分类讨论）
然后看长度是不是太大
去除前缀0（WA点6）再截取
判断长度是不是0
大数转换看数据大小是不是爆int
转换为int看符号返回结果即可
（一共WA了十几发，针样编，离谱。真的）

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
85.94%
的用户
内存消耗 :
6.4 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间不错，空间完杀！！！）

上代码：
class Solution {
public:
    string s = "";
    int re = 0, siz = 0, cnt = 0;
    
    int myAtoi(string str) {
        for(int i = 0; i < str.size(); i++) {
            if(str[i] == '-') {
                if(s.size() != 0) break;
                re = 1;
                cnt++;
            }
            else if(str[i] >= '0' && str[i] <= '9') s += str[i];
            else if(str[i] == ' ') {
                if(s.size() != 0) break;
                if(cnt > 0) break;
            }
            else if(str[i] == '+') {
                if(s.size() != 0) break;
                cnt++;
            }
            else break;
            if(cnt > 1) break;
        }
        while(s[siz] == '0') siz++;
        s = s.substr(siz, s.size() - siz);
        if(s.size() == 0) return 0;
        if(s.size() > 10) return re == 1 ? -2147483648 : 2147483647;
        char curr[5555];
        for(int i = 0; i < s.size(); i++)
            curr[i] = s[i];
        long long sum = atoll(curr);
        if(sum > 2147483647) return re == 1 ? -2147483648 : 2147483647;
        return re == 1 ? -stoi(s) : stoi(s);
        
    }
};