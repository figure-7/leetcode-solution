题目难度：MEDIUM

如果字符串中不含有任何 'aaa'，'bbb' 或 'ccc' 这样的字符串作为子串，那么该字符串就是一个「快乐字符串」。

给你三个整数 a，b ，c，请你返回 任意一个 满足下列全部条件的字符串 s：

s 是一个尽可能长的快乐字符串。
s 中 最多 有a 个字母 'a'、b 个字母 'b'、c 个字母 'c' 。
s 中只含有 'a'、'b' 、'c' 三种字母。
如果不存在这样的字符串 s ，请返回一个空字符串 ""。

 

示例 1：

输入：a = 1, b = 1, c = 7
输出："ccaccbcc"
解释："ccbccacc" 也是一种正确答案。
示例 2：

输入：a = 2, b = 2, c = 1
输出："aabbc"
示例 3：

输入：a = 7, b = 1, c = 0
输出："aabaa"
解释：这是该测试用例的唯一正确答案。
DFS内部先找出最多的字符加给结果字符串，同时对应数目减一
内部先找出最多的字符加给结果字符串，同时对应数目减一

提示：

0 <= a, b, c <= 100
a + b + c > 0

思路：DFS+贪心
DFS进行abc数目的对应字符添加，贪心取最大
DFS内部先找到字符数最多的字符
如果字符串前一项不是该字符，直接加上两个该字符，然后该字符数目减二（贪心）
否则就要找剩下两个字符数最多的字符，如果有，插入中间，然后该字符数目减一（贪心）
否则就结束DFS（没有其他字符且再加字符就会构成三个连续字符的子串）
剩下三个也一样写（这里我怕二重函数调用出错，就都一样的写法，字符不同而已，码量太大了）
开头当三个字符数目都为0结束DFS（字符全部取到）
最后返回结果字符串即可

上代码：
class Solution {
public:
    string res = "";
    int cur = 0, curmodtwo = 0;
    
    void DFS(int a, int b, int c) {
        if(a == 0 && b == 0 && c == 0) return ;
        if(a >= b) cur = a;
        else cur = b;
        if(cur <= c) cur = c;
        if(cur == a && a > 1) {
            if(res.size() > 0 && res[res.size() - 1] =='a') {
                if(c >= b) curmodtwo = c;
                else curmodtwo = b;
                if(curmodtwo > 0) {
                    if(curmodtwo == c) {
                        res += 'c';
                        c--;
                    } else {
                        res += 'b';
                        b--;
                    }
                } else return ;
            } else {
                res += "aa";
                a -= 2;
            }
        }
        else if(cur == a && a == 1) {
            if(res.size() > 0 && res[res.size() - 1] =='a') {
                if(c >= b) curmodtwo = c;
                else curmodtwo = b;
                if(curmodtwo > 0) {
                    if(curmodtwo == c) {
                        res += 'c';
                        c--;
                    } else {
                        res += 'b';
                        b--;
                    }
                } else return ;
            } else {
                res += 'a';
                a--;
            }
        }
        else if(cur == b && b > 1) {
            if(res.size() > 0 && res[res.size() - 1] =='b') {
                if(c >= a) curmodtwo = c;
                else curmodtwo = b;
                if(curmodtwo > 0) {
                    if(curmodtwo == c) {
                        res += 'c';
                        c--;
                    } else {
                        res += 'a';
                        a--;
                    }
                } else return ;
            } else {
                res += "bb";
                b -= 2;
            }
        }
        else if(cur == b && b == 1) {
            if(res.size() > 0 && res[res.size() - 1] =='b') {
                if(c >= a) curmodtwo = c;
                else curmodtwo = b;
                if(curmodtwo > 0) {
                    if(curmodtwo == c) {
                        res += 'c';
                        c--;
                    } else {
                        res += 'a';
                        a--;
                    }
                } else return ;
            } else {
                res += 'b';
                b--;
            }
        }
        else if(cur == c && c > 1) {
            if(res.size() > 0 && res[res.size() - 1] =='c') {
                if(b >= a) curmodtwo = b;
                else curmodtwo = a;
                if(curmodtwo > 0) {
                    if(curmodtwo == b) {
                        res += 'b';
                        b--;
                    } else {
                        res += 'a';
                        a--;
                    }
                } else return ;
            } else {
                res += "cc";
                c -= 2;
            }
        }
        else if(c == 1) {
            if(res.size() > 0 && res[res.size() - 1] =='c') {
                if(b >= a) curmodtwo = b;
                else curmodtwo = a;
                if(curmodtwo > 0) {
                    if(curmodtwo == b) {
                        res += 'b';
                        b--;
                    } else {
                        res += 'a';
                        a--;
                    }
                } else return ;
            } else {
                res += 'c';
                c--;
            }
        }
        else c = c;
        DFS(a, b, c);
    }
    string longestDiverseString(int a, int b, int c) {
        DFS(a, b, c);
        return res;
    }
};