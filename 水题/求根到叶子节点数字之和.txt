题目难度：MEDIUM

给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。

例如，从根到叶子节点路径 1->2->3 代表数字 123。

计算从根到叶子节点生成的所有数字之和。

说明: 叶子节点是指没有子节点的节点。

示例 1:

输入: [1,2,3]
    1
   / \
  2   3
输出: 25
解释:
从根到叶子节点路径 1->2 代表数字 12.
从根到叶子节点路径 1->3 代表数字 13.
因此，数字总和 = 12 + 13 = 25.
示例 2:

输入: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
输出: 1026
解释:
从根到叶子节点路径 4->9->5 代表数字 495.
从根到叶子节点路径 4->9->1 代表数字 491.
从根到叶子节点路径 4->0 代表数字 40.
因此，数字总和 = 495 + 491 + 40 = 1026.

思路：DFS深度优先遍历，把路径上的值放入path数组中，
在遍历函数中判断有无左右孩子，都没有的话就调用构成函数累加path数组中的值，计算之后放入result数组中
主函数中调用递归函数求出result数组和即可

执行用时 : 8 ms, 在Sum Root to Leaf Numbers的C++提交中击败了92.49% 的用户
内存消耗 : 15 MB, 在Sum Root to Leaf Numbers的C++提交中击败了5.03% 的用户

代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int sum = 0;
    int sumNumbers(TreeNode* root) {
        vector<int> ret;
        if(!root) {
            return 0;
        }
        vector<int> path;
        BFS(root, path, ret);
        for(int i=0; i<ret.size(); i++) {
            sum+= ret[i];
        }
        return sum;
    }
    void BFS(TreeNode* node, vector<int>& path, vector<int>& result) {
        if(node == nullptr) return;
        path.push_back(node->val);
        if(node->left == nullptr && node->right == nullptr) {
            result.push_back(generatePath(path));
        }
        else {
            if(node->left != nullptr) {
              BFS(node->left, path, result);
                path.pop_back();
            }
            if(node->right != nullptr) {
              BFS(node->right, path, result);
                path.pop_back();
            }
        }
    }
    int  generatePath(vector<int> path) {
        int a = 0;
        double b = 1;
        for(int i=path.size()-1; i>=0; i--) {
            a+= path[i]*b;
            b = b * 10;
        }
        return a;
    }
};