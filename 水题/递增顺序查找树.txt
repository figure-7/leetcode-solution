题目难度：EASY

给你一个树，请你 按中序遍历 重新排列树，使树中最左边的结点现在是树的根，并且每个结点没有左子结点，只有一个右子结点。

 

示例 ：

输入：[5,3,6,2,4,null,8,1,null,null,null,7,9]

       5
      / \
    3    6
   / \    \
  2   4    8
 /        / \ 
1        7   9

输出：[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

 1
  \
   2
    \
     3
      \
       4
        \
         5
          \
           6
            \
             7
              \
               8
                \
                 9  
 

提示：

给定树中的结点数介于 1 和 100 之间。
每个结点都有一个从 0 到 1000 范围内的唯一整数值。

思路：树+DFS
先套中序遍历板子，然后套中序遍历跟先序遍历构造二叉树板子
后者改为参数只传中序遍历数组跟0即可，内部该删的删，先判断下标是不是到数组结束了
结束就结束DFS，左节点改为赋空，右节点调用下标加一即可
最后返回构造二叉树的DFS即可

执行用时 :
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗 :
7.7 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时空都完杀！！！！！！）

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void DFS(TreeNode* r, vector<int>& a) {
        if(r->left) DFS(r->left,a);
        a.push_back(r->val);
        if(r->right) DFS(r->right,a);
    }
    
    TreeNode* build(vector<int>& inorder, int i) {
        if(i == inorder.size()) return NULL;
        TreeNode* root = new TreeNode(inorder[i]);
        root->left = nullptr;
        root->right = build(inorder, i + 1);
        return root;
    }
    
    TreeNode* increasingBST(TreeNode* root) {
        vector<int> curr;
        DFS(root, curr);
        return build(curr, 0);
    }
};