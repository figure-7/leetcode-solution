题目难度：MEDIUM

给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。

示例:

输入: [1,2,3,null,5,null,4]
输出: [1, 3, 4]
解释:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---

思路：二叉树+DFS
直接套二叉树层序遍历板子，改动：空树返回一维初始化的空结果数组
遍历得到的二维数组，把一维的最后一项放进结果数组
最后返回结果数组即可

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
82.67%
的用户
内存消耗 :
11.9 MB
, 在所有 C++ 提交中击败了
9.09%
的用户
（时间很好，空间炸了）

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> res;
    int num=0;
    
    void getsolution(vector<vector<int>>& ret, TreeNode* root, int level) {
        if(root == NULL) return ;
        ret[level].push_back(root->val);
        getsolution(ret,root->left,level+1);
        getsolution(ret,root->right,level+1);
    }
    
    void traval(TreeNode *node, int level) {
        if(node->left) traval(node->left,level+1);
        if(node->right) traval(node->right,level+1);
        if(!node->left && !node->right) {
            num = max(num,level);
            return ;
        }
    }
    
    vector<int> rightSideView(TreeNode* root) {
        vector<vector<int>> a;
        if(!root) return res;
        traval(root,1);
        vector<vector<int>> m(num);
        getsolution(m,root,0);
        for(int i = 0; i < m.size(); i++) res.push_back(m[i][m[i].size() - 1]);
        return res;
    }
};