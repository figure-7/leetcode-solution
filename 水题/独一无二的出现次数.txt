题目难度：EASY

给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。

如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。

 

示例 1：

输入：arr = [1,2,2,1,1,3]
输出：true
解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。
示例 2：

输入：arr = [1,2]
输出：false
示例 3：

输入：arr = [-3,0,1,-3,1,1,1,-3,10,0]
输出：true
 

提示：

1 <= arr.length <= 1000
-1000 <= arr[i] <= 1000

思路：先对数组排序，然后遍历，直到不相等就把相等总数放入哈希表，并查找是否之前有该值
有就返回false，否则继续，遍历结束后还需要计算最后一个数的情况
如果找到当前相同值数，那么久返回false，此外就是true了
写了半天不知道在干嘛。。。

上代码：
class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
        unordered_map<int, int> map;
        sort(arr.begin(), arr.end());
        int curr = 1;
        for(int i = 0; i < arr.size()-1; i++) {
            if(arr[i] == arr[i+1]) {
                curr++;
            }
            else {
                if(map.count(curr)) {
                    return false;
                }
                    
                map[curr] = i;
                curr = 1;
            }
        }
        if(map.count(curr))
            return false;
        return true;
    }
};