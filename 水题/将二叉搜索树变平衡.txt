题目难度：MEDIUM

给你一棵二叉搜索树，请你返回一棵 平衡后 的二叉搜索树，新生成的树应该与原来的树有着相同的节点值。

如果一棵二叉搜索树中，每个节点的两棵子树高度差不超过 1 ，我们就称这棵二叉搜索树是 平衡的 。

如果有多种构造方法，请你返回任意一种。

 

示例：



输入：root = [1,null,2,null,3,null,4,null,null]
输出：[2,1,3,null,null,null,4]
解释：这不是唯一的正确答案，[3,1,4,null,2,null,null] 也是一个可行的构造方案。
 

提示：

树节点的数目在 1 到 10^4 之间。
树节点的值互不相同，且在 1 到 10^5 之间。

思路：周赛第三题，平衡二叉树+二叉搜索树+哈希表+DFS
因为是要得到平衡二叉树，所以先把给定树的节点遍历存放入数组，DFS套遍历板子
然后把数组排序之后套中序遍历和先序遍历还原二叉树的板子，将先序遍历对应部分删掉
把数组作为中序遍历带入DFS
返回DFS结果即可

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorder;
    unordered_map<int,int> m;
    
    void DFS1(TreeNode* node) {
        inorder.push_back(node->val);
        if(node->left)
            DFS1(node->left);
        if(node->right)
            DFS1(node->right);
    }
    
    TreeNode* balanceBST(TreeNode* root) {
        DFS1(root);
        sort(inorder.begin(), inorder.end());
        for(int i = 0; i < inorder.size(); i++)
            m[inorder[i]] = i;
        return build(inorder, 0, inorder.size() - 1);
    }
    
    TreeNode* build(vector<int>& inorder, int s0, int e0) {
        if(s0 > e0)
            return NULL;
        TreeNode* root = new TreeNode(inorder[(s0 + e0) / 2]);
        int mid = m[inorder[(s0 + e0) / 2]];
        root->left = build(inorder, s0, mid - 1);
        root->right = build(inorder, mid + 1, e0);
        return root;
    }
};