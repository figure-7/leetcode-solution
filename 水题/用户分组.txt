题目难度：MEDIUM

有?n?位用户参加活动，他们的?ID?从 0 到 n - 1，每位用户都 恰好 属于某一用户组。
给你一个长度为 n 的数组?groupSizes，其中包含每位用户所处的用户组的大小，请你返回用户分组情况（存在的用户组以及每个组中用户的 ID）。


你可以任何顺序返回解决方案，ID 的顺序也不受限制。
此外，题目给出的数据保证至少存在一种解决方案。

?



示例 1：

输入：groupSizes = [3,3,3,3,3,1,3]

输出：[[5],[0,1,2],[3,4,6]]

解释： 
其他可能的解决方案有 [[2,1,6],[5],[0,4,3]] 和 [[5],[0,6,2],[4,3,1]]。


示例 2：

输入：groupSizes = [2,1,3,3,3,2]

输出：[[1],[0,5],[2,3,4]]
?



提示：

groupSizes.length == n
	1 <= n?<= 500
	1 <=?groupSizes[i] <= n

思路：周赛第二题，开始题意看的比较蒙
反正就是先开一个指定空间的二维数组
然后一次遍历，原数组的值作为二维数组下标，原数组的下标作为二维数组对应的值
然后遍历该二维数组
当对应下标值不为空时，依次取出放入一维数组中
当一维数组中值的个数等于二维数组下标值时（用户数量等于用户组的大小）
就将一维数组放入二维数组中，然后将一维数组清空即可
结束返回二维数组即可
（这道题不需要考虑人数或者空间溢出的情况）

上代码：
class Solution {
public:
    vector<vector<int> > res;
    vector<vector<int>> groupThePeople(vector<int>& groupSizes) {
        vector<vector<int> > curr(505);
        vector<int> currmodthree;
        for(int i = 0; i < groupSizes.size(); i++)
            curr[groupSizes[i]].push_back(i);
        for(int i = 0; i < curr.size(); i++) {
            vector<int> currmodtwo;
            int a = 0;
            while(curr[i].size() > a) {
                currmodtwo.push_back(curr[i][a]);
                a++;
                if(a % i == 0) {
                    res.push_back(currmodtwo);
                    currmodtwo = currmodthree;
                }
            }
        }
        return res;
    } 
};