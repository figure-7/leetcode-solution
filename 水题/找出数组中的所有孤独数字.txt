题目难度：MEDIUM

给你一个整数数组 nums 。
如果数字 x 在数组中仅出现 一次 ，且没有 相邻 数字（即，x + 1 和 x - 1）出现在数组中，则认为数字 x 是 孤独数字 。
返回 nums 中的 所有 孤独数字。你可以按 任何顺序 返回答案。
示例 1：
输入：nums = [10,6,5,8]
输出：[10,8]
解释：
- 10 是一个孤独数字，因为它只出现一次，并且 9 和 11 没有在 nums 中出现。
- 8 是一个孤独数字，因为它只出现一次，并且 7 和 9 没有在 nums 中出现。
- 5 不是一个孤独数字，因为 6 出现在 nums 中，反之亦然。
因此，nums 中的孤独数字是 [10, 8] 。
注意，也可以返回 [8, 10] 。
示例 2：
输入：nums = [1,3,5,3]
输出：[1,5]
解释：
- 1 是一个孤独数字，因为它只出现一次，并且 0 和 2 没有在 nums 中出现。
- 5 是一个孤独数字，因为它只出现一次，并且 4 和 6 没有在 nums 中出现。
- 3 不是一个孤独数字，因为它出现两次。
因此，nums 中的孤独数字是 [1, 5] 。
注意，也可以返回 [5, 1] 。
提示：
1 <= nums.length <= 105
0 <= nums[i] <= 106

思路：周赛第三题（6min40s），哈希表
遍历给定数组，哈希表存数组值的个数
遍历给定数组
如果对应项值为0，单独判断有没有1（相邻项只有1，不能为-1（哈希表溢下标出））或哈希表对应值大于1（多个0）
没有的话把0存入结果数组
否则哦按段有没有两边相邻项或哈希表对应值大于1
没有的话就把对应数组值存入结果数组
最后返回结果数组即可

上代码：
class Solution {
public:
    unordered_map<int, int> map;
    vector<int> res;
    
    vector<int> findLonely(vector<int>& nums) {
        for(int cur : nums) {
            if(map.find(cur) == map.end()) map[cur] = 1;
            else map[cur]++;
        }
        for(int cur : nums) {
            if(cur == 0) {
                if(map[cur] == 1 && map.find(cur + 1) == map.end()) res.push_back(cur);
            } else {
                if(map[cur] == 1 && map.find(cur - 1) == map.end() && map.find(cur + 1) == map.end()) res.push_back(cur);
            }
        }
        return res;
    }
};