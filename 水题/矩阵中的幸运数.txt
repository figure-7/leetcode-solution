题目难度：EASY

给你一个 m * n 的矩阵，矩阵中的数字 各不相同 。

请你按 任意 顺序返回矩阵中的所有幸运数。

幸运数是指矩阵中满足同时下列两个条件的元素：

在同一行的所有元素中最小
在同一列的所有元素中最大
 

示例 1：

输入：matrix = [[3,7,8],[9,11,13],[15,16,17]]
输出：[15]
解释：15 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。
示例 2：

输入：matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
输出：[12]
解释：12 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。
示例 3：

输入：matrix = [[7,8],[1,2]]
输出：[7]
 

提示：

m == mat.length
n == mat[i].length
1 <= n, m <= 50
1 <= matrix[i][j] <= 10^5
矩阵中的所有元素都是不同的

思路：模拟
先二维遍历数组，然后针对当前元素如果该行有元素比当前元素小就结束当前二重内部循环（利用中间布尔变量）
否则如果该列有元素比当前元素大就结束当前二重内部循环（利用中间布尔变量）
否则当前元素进结果数组
最后返回结果数组即可

上代码：
class Solution {
public:
    bool flag = true;
    vector<int> res;
    
    vector<int> luckyNumbers (vector<vector<int>>& matrix) {
        for(int i = 0; i < matrix.size(); i++) {
            for(int j = 0; j < matrix[i].size(); j++) {
                for(int k = 0; k < matrix.size(); k++)
                    if(matrix[i][j] < matrix[k][j])
                        flag = false;
                for(int k = 0; k < matrix[i].size(); k++)
                    if(matrix[i][j] > matrix[i][k])
                        flag = false;
                if(flag)
                    res.push_back(matrix[i][j]);
                else
                    flag = true;
            }
        }
        return res;
    }
};
