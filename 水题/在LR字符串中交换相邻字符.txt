题目难度：MEDIUM

在一个由 'L' , 'R' 和 'X' 三个字符组成的字符串（例如"RXXLRXRXL"）中进行移动操作。

一次移动操作指用一个"LX"替换一个"XL"，或者用一个"XR"替换一个"RX"。

现给定起始字符串start和结束字符串end，请编写代码，当且仅当存在一系列移动操作使得start可以转换成end时， 返回True。

示例 :

输入: start = "RXXLRXRXL", end = "XRLXXRRLX"
输出: True
解释:
我们可以通过以下几步将start转换成end:
RXXLRXRXL ->
XRXLRXRXL ->
XRLXRXRXL ->
XRLXXRRXL ->
XRLXXRRLX
注意:

1 <= len(start) = len(end) <= 10000。
start和end中的字符串仅限于'L', 'R'和'X'。

思路：模拟
先初始标志位1，当标志位1并且其中一个字符串长度大于0时循环
先进行两个字符串去除相同字符得到的字符串给自己更新，然后标志位置0，再遍历一次比较两个字符串每个字符，分3种情况：
1：当前下标加一小于字符串长度且两个串当前字符和下一个字符分别为'R','X';'X','R'时，将第二个字符串两个字符顺序翻转，同时标志改为1即可
2：当前下标加一小于字符串长度且两个串当前字符和下一个字符分别为'X','L';'L','X'时，将第二个字符串两个字符顺序翻转，同时标志改为1即可
3：否则继续即可
最后三元运算符返回当其中一个字符串长度大于0时返回true（能够实现就都消掉了），否则返回false

执行用时 :
816 ms
, 在所有 C++ 提交中击败了
12.00%
的用户
内存消耗 :
627.9 MB
, 在所有 C++ 提交中击败了
5.56%
的用户
（时空都炸了。。。）

上代码：
class Solution {
public:
    bool flag = true;
    
    bool canTransform(string start, string end) {
        while(start.size() > 0 && flag){
            for(int i = 0; i < start.size(); i++) {
                if(start[i] == end[i]) {
                    string cur = start.substr(0, i);
                    string curmodtwo = start.substr(i + 1, start.size());
                    start = cur + curmodtwo;
                    string curmodthree = end.substr(0, i);
                    string curmodfour = end.substr(i + 1, end.size());
                    end = curmodthree + curmodfour;
                    i--;
                }
            }
            flag = false;
            for(int i = 0; i < start.size(); i++) {
                if(i + 1 < start.size() && start[i] == 'R' && start[i + 1] == 'X' && end[i] == 'X' && end[i + 1] == 'R') {
                    end[i] = 'R';
                    end[i + 1] = 'X';
                    i++;
                    flag = true;
                }
                else if(i + 1 < start.size() && start[i] == 'X' && start[i + 1] == 'L' && end[i] == 'L' && end[i + 1] == 'X') {
                    end[i] = 'X';
                    end[i + 1] = 'L';
                    flag = true;
                    i++;
                }
                else
                    continue;
            }
        }
        return start.size() > 0 ? false : true;
    }
};