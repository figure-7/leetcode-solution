题目难度：MEDIUM

有一个二维矩阵 grid ，每个位置要么是陆地（记号为 0 ）要么是水域（记号为 1 ）。

我们从一块陆地出发，每次可以往上下左右 4 个方向相邻区域走，能走到的所有陆地区域，我们将其称为一座「岛屿」。

如果一座岛屿 完全 由水域包围，即陆地边缘上下左右所有相邻区域都是水域，那么我们将其称为 「封闭岛屿」。

请返回封闭岛屿的数目。

 

示例 1：



输入：grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
输出：2
解释：
灰色区域的岛屿是封闭岛屿，因为这座岛屿完全被水域包围（即被 1 区域包围）。
示例 2：



输入：grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
输出：1
示例 3：

输入：grid = [[1,1,1,1,1,1,1],
             [1,0,0,0,0,0,1],
             [1,0,1,1,1,0,1],
             [1,0,1,0,1,0,1],
             [1,0,1,1,1,0,1],
             [1,0,0,0,0,0,1],
             [1,1,1,1,1,1,1]]
输出：2
 

提示：

1 <= grid.length, grid[0].length <= 100
0 <= grid[i][j] <=1

思路：这题算是经典BFS的题了，四象封印
BFS掉四个方向的值，同时本题因为边界看做0（陆地），所以边界时无法实现岛屿
所以只要把边界去掉判断内部即可
同时设立一个二维数组保存是否遍历过该点，在BFS遍历过就赋值1。
但是因为要在BFS前面写入，所以还需要进行越界判断（这里害我WA了一次，，）
之后套模板，遍历完的所有值有等于0的，就不是岛屿，不累加值即可
否则加一。

上代码：
class Solution {
public:
    vector<vector<int> > flag;
    int res = 1;
    void bfs(vector<vector<int>>& grid, int x, int y) {
        if (x >= 0 && x < grid.size() && y >= 0 && y < grid[0].size()) {
            flag[x][y] = 1;
        }
        if(x == 0 || x == grid.size() - 1 || y == 0 || y == grid[0].size() - 1) {
            if (x >= 0 && x < grid.size() && y >= 0 && y < grid[0].size()) {
                if(grid[x][y] == 0) {
                    res = 0;
                }
            }
        }
	    if (x >= 0 && x < grid.size() && y >= 0 && y < grid[0].size() && grid[x][y] == 0) {
            grid[x][y] = 1;
            bfs(grid, x - 1, y);
            bfs(grid, x + 1, y);
            bfs(grid, x, y - 1);
            bfs(grid, x, y + 1);
	    }
    }
    int closedIsland(vector<vector<int>>& grid) {
        for(int i = 0; i < 105; i++) {
            vector<int> a;
            for(int j = 0; j < 105; j++) {
                a.push_back(0);
            }
            flag.push_back(a);
        }
        int sum = 0;
        for (int i = 1; i < grid.size() - 1; i++) {
            for (int j = 1; j < grid[0].size() - 1; j++) {
                if (grid[i][j] == 0 && flag[i][j] == 0) {
                    bfs(grid, i, j);
                    sum += res;
                    res = 1;
                }
            }
        }
        return sum;
    }
};