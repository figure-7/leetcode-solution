题目难度：EASY

给定一个数组 nums?和一个值 val，你需要原地移除所有数值等于?val?的元素，返回移除后数组的新长度。


不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。


元素的顺序可以改变。
你不需要考虑数组中超出新长度后面的元素。



示例 1:

给定 nums = [3,2,2,3], val = 3,

函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。


你不需要考虑数组中超出新长度后面的元素。


示例?2:

给定 nums = [0,1,2,2,3,0,4,2], val = 2,

函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。


注意这五个元素可为任意顺序。


你不需要考虑数组中超出新长度后面的元素。


说明:

为什么返回数值是整数，但输出的答案是数组呢?


请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。


你可以想象内部操作如下:

// nums 是以“引用”方式传递的。
也就是说，不对实参作任何拷贝
int len = removeElement(nums, val);

// 在函数里修改输入数组对于调用者是可见的。

// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。

for (int i = 0; i < len; i++) {
? ? 
	print(nums[i]);

}



思路：
3分钟题，只要找到元素，删除函数调用就完事，要注意使用时删除时要i--，因为内存也被删了，后面的下标都减1。
（第一次卡了个内部出错。。。第二次啥也没改就过了。。）

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
61.00%
的用户
内存消耗 :
8.5 MB
, 在所有 C++ 提交中击败了
84.84%
的用户

上代码：
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] == val) {
                vector<int>::iterator it = nums.begin()+i;
    	        nums.erase(it);
                i--;
            }
        }
        return nums.size();
    }
};