题目难度：EASY

你有一个十进制数字，请按照此规则将它变成「十六进制魔术数字」：
首先将它变成字母大写的十六进制字符串，然后将所有的数字?0 变成字母?O ，将数字?1 ?变成字母?I 。


如果一个数字在转换后只包含?{"A", "B", "C", "D", "E", "F", "I", "O"}?，那么我们就认为这个转换是有效的。


给你一个字符串?num ，它表示一个十进制数 N，如果它的十六进制魔术数字转换是有效的，请返回转换后的结果，否则返回?"ERROR" 。

?



示例 1：

输入：num = "257"

输出："IOI"

解释：257 的十六进制表示是 101 。


示例 2：

输入：num = "3"

输出："ERROR"
?


提示：

1 <= N <= 10^12
	给定字符串不会有前导 0 。

结果中的所有字母都应该是大写字母。

思路：首先进行字符串转化为数字的操作，由于是大数，所以要用到atoll函数，就先对字符串进行了预处理，把字符串转化为字符数组
之后转化为ll类型的数，进行十六进制且按要求的转换，得到字符串反转即可
遇到不符合情况直接返回"ERROR"即可

上代码：
class Solution {
public:
    string result;
    char c[20];
    string toHexspeak(string num) {
        for(int i = 0; i < num.length(); i++)
            c[i] = num[i];
        long long sum = atoll(c);
        cout<<sum;
        while (sum)
        {
            char ch = '0';
            if(sum % 16 < 10)
                ch = sum % 16 + '0';
            else
                ch = (sum - 10) % 16 + 'A';
            if(ch > '1' && ch < 'A')
                return "ERROR";
            if(ch == '1')
                ch = 'I';
            if(ch == '0')
                ch = 'O';
            result += ch;
            sum /= 16;
        }
        reverse(result.begin(), result.end());
        return result;
    }
};