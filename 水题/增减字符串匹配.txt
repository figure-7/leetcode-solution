题目难度：EASY

给定只含 "I"（增大）或 "D"（减小）的字符串 S ，令 N = S.length。

返回 [0, 1, ..., N] 的任意排列 A 使得对于所有 i = 0, ..., N-1，都有：

如果 S[i] == "I"，那么 A[i] < A[i+1]
如果 S[i] == "D"，那么 A[i] > A[i+1]
 

示例 1：

输出："IDID"
输出：[0,4,1,3,2]
示例 2：

输出："III"
输出：[0,1,2,3]
示例 3：

输出："DDI"
输出：[3,2,0,1]
 

提示：

1 <= S.length <= 10000
S 只包含字符 "I" 或 "D"。

思路：模拟
初始化首位指针0，字符串长度
先判断第一个字符是'I'结果数组入0，首指针加一；否则入给定字符串长度，尾指针减一
然后从头遍历字符串，两两取，当遇见'I''I'或'D''I'时，结果数组存入首指针，首指针加一
当遇见'I''D'或'D''D'时，结果数组存入尾指针，尾指针减一

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
98.04%
的用户
内存消耗 :
9.7 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间绝杀，空间完杀！！！）

上代码：
class Solution {
public:
    vector<int> res;
    
    vector<int> diStringMatch(string S) {
        int begin = 0, end = S.size();
        if(S[0] == 'I') {
            res.push_back(0);
            begin++;
        }
        else {
            res.push_back(S.size());
            end--;
        }
        for(int i = 0; i < S.size() - 1; i++) {
            if(S[i] == 'I') {
                if(S[i + 1] == 'I') {
                    res.push_back(begin);
                    begin++;
                }
                else {
                    res.push_back(end);
                    end--;
                }
            } else {
                if(S[i + 1] == 'I') {
                    res.push_back(begin);
                    begin++;
                }
                else {
                    res.push_back(end);
                    end--;
                }
            }
        }
        res.push_back(end);
        return res;
    }
};