题目难度：EASY

给你一个整数数组 nums （下标从 0 开始）。
每一次操作中，你可以选择数组中一个元素，并将它增加 1 。
比方说，如果 nums = [1,2,3] ，你可以选择增加 nums[1] 得到 nums = [1,3,3] 。
请你返回使 nums 严格递增 的 最少 操作次数。
我们称数组 nums 是 严格递增的 ，当它满足对于所有的 0 <= i < nums.length - 1 都有 nums[i] < nums[i+1] 。
一个长度为 1 的数组是严格递增的一种特殊情况。
示例 1：
输入：nums = [1,1,1]
输出：3
解释：你可以进行如下操作：
1) 增加 nums[2] ，数组变为 [1,1,2] 。
2) 增加 nums[1] ，数组变为 [1,2,2] 。
3) 增加 nums[2] ，数组变为 [1,2,3] 。
示例 2：
输入：nums = [1,5,2,4,1]
输出：14
示例 3：
输入：nums = [8]
输出：0
提示：
1 <= nums.length <= 5000
1 <= nums[i] <= 104

思路：双周赛第一题，模拟（4min26s）
先取第一个值给建立值，然后遍历给定数组剩下的项，如果当前值大于建立值就直接把当前值给建立值
否则取双方差值加一，并将结果累加进结果值（累加次数和），然后把建立值加一
最后返回结果值即可

上代码：
class Solution {
public:
    int res = 0;
    
    int minOperations(vector<int>& nums) {
        int cur = nums[0];
        for(int i = 1; i < nums.size(); i++) {
            if(nums[i] > cur) cur = nums[i];
            else {
                int cha = cur + 1 - nums[i];
                res += cha;
                cur += 1;
            }
        }
        return res;
    }
};