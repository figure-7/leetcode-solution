题目难度：MEDIUM

根据百度百科，生命游戏，简称为生命，是英国数学家约翰・何顿・康威在1970年发明的细胞自动机。

给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 live（1）即为活细胞， 或 dead（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：

如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。

示例:

输入: 
[
  [0,1,0],
  [0,0,1],
  [1,1,1],
  [0,0,0]
]
输出: 
[
  [0,0,0],
  [1,0,1],
  [0,1,1],
  [0,1,0]
]
进阶:

你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？

思路：BFS，广度遍历判断，依次遍历判断每个数的周围（按照题目给定判断条件）
之后把每个结果保存到临时数组中，注意这里要传参的时候要带指针，否则922！！！
然后在用新数组的值放入二维数组，之后再把原数组更新了即可

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
91.58%
的用户
内存消耗 :
8.8 MB
, 在所有 C++ 提交中击败了
23.53%
的用户

上代码：
class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        int res[100][100];
        for (int i = 0; i < board.size(); i++) {
            vector<int> curr;
		    for (int j = 0; j < board[0].size(); j++) {
                BFS(curr, board, i, j);
                res[i][j] = curr[j];
                //printf("%d",curr[j]);
		    }
	    }
        for (int i = 0; i < board.size(); i++) {
		    for (int j = 0; j < board[0].size(); j++) {
                board[i][j] = res[i][j];
		    }
	    }
    }
    void BFS(vector<int>& curr, vector<vector<int>>& board, int x, int y) {
        int sum = 0;
        if (x >= 0 && x < board.size() && y >= 0 && y < board[0].size()) {
		    sum += bfs(board, x - 1, y, sum);
            //printf("%d\n",sum);
		    sum += bfs(board, x + 1, y, sum);
		    sum += bfs(board, x, y - 1, sum);
		    sum += bfs(board, x, y + 1, sum);
            sum += bfs(board, x + 1, y + 1, sum);
            //printf("%d\n",sum);
            sum += bfs(board, x - 1, y + 1, sum);
            sum += bfs(board, x + 1, y - 1, sum);
            sum += bfs(board, x - 1, y - 1, sum);
            //printf("%d\n",sum);
            if(board[x][y] == 1) {
                if(sum > 3 || sum < 2) {
                    curr.push_back(0);
                }
                else {
                    curr.push_back(1);
                }
            }
            else {
                if(sum == 3) {
                    curr.push_back(1);
                }
                else {
                    curr.push_back(0);
                }
            }
	    }
    }
    int bfs(vector<vector<int>>& board, int a, int b, int level) {
        if(a >= 0 && a < board.size() && b >= 0 && b < board[0].size()) {
            if(board[a][b] == 1) {
                return 1;
            }
        }
        return 0;
    }
};

进阶算法：矩阵的元素是同时改变的，也就是说不能用更新后的元素进行计算，但是原地算法又不能使用额外的空间存储更新后的元素，所以想到了用原矩阵同时保存原始数据和新数据。

为了同时保存两个数据，那么原来的0和1两个变量就不能满足要求了，由于一共有四种可能，活-活，活-死，死-活，死-死。
所以使用四个标识符来记录信息。
活-死用2表示，死-活用-1表示。遍历一次矩阵后把所有2改成0，-1改成1。

neiour函数用于更新细胞状态

。

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
63.95%
的用户
内存消耗 :
8.4 MB
, 在所有 C++ 提交中击败了
99.26%
的用户

上代码：
class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        for(int i=0;i<board.size();i++)
            for(int j=0;j<board[0].size();j++)
                neiour(board,i,j);
        for(int i=0;i<board.size();i++)
            for(int j=0;j<board[0].size();j++)
            {
                if(board[i][j] == 2)
                    board[i][j] = 0;
                if(board[i][j] == -1)
                    board[i][j] = 1;
            }
        
    }
    void neiour(vector<vector<int>>& board,int x,int y)
    {
        int live = 0;
        if(x>0)
        {
            if(board[x-1][y]>0)
                live++;
            if(y>0 && board[x-1][y-1]>0)
                live++;
            if(y<board[0].size()-1 && board[x-1][y+1]>0)
                live++; 
        }
        if(x<board.size()-1)
        {
            if(board[x+1][y]>0)
                live++;
            if(y>0 && board[x+1][y-1]>0)
                live++;
            if(y<board[0].size()-1 && board[x+1][y+1]>0)
                live++; 
        }
        if(y >0 && board[x][y-1]>0)
            live++;
        if(y < board[0].size()-1 && board[x][y+1]>0)
            live++;
        if(board[x][y] == 1)
        {
            if(live<2||live>3)
                board[x][y] = 2;
        }
        else if(live == 3)
            board[x][y] = -1;
    }
};