题目难度：MEDIUM

  显示英文描述  
用户通过次数 338
用户尝试次数 475
通过次数 347
提交次数 1384
题目难度 Medium
你是一名行政助理，手里有两位客户的空闲时间表：slots1 和 slots2，以及会议的预计持续时间 duration，请你为他们安排合适的会议时间。

「会议时间」是两位客户都有空参加，并且持续时间能够满足预计时间 duration 的 最早的时间间隔。

如果没有满足要求的会议时间，就请返回一个 空数组。

 

「空闲时间」的格式是 [start, end]，由开始时间 start 和结束时间 end 组成，表示从 start 开始，到 end 结束。 

题目保证数据有效：同一个人的空闲时间不会出现交叠的情况，也就是说，对于同一个人的两个空闲时间 [start1, end1] 和 [start2, end2]，要么 start1 > end2，要么 start2 > end1。

 

示例 1：

输入：slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8
输出：[60,68]
示例 2：

输入：slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12
输出：[]
 

提示：

1 <= slots1.length, slots2.length <= 10^4
slots1[i].length, slots2[i].length == 2
slots1[i][0] < slots1[i][1]
slots2[i][0] < slots2[i][1]
0 <= slots1[i][j], slots2[i][j] <= 10^9
1 <= duration <= 10^6

思路：这题为了优化考虑了好久，最后改为暴力后woc，过了。。
首先两个数组排个序，然后依次遍历两个数组取交集
之后分别取四个区间内的最小值，看时间是否充裕即可
遍历第二个数组时可以优化，但是下标应该是多加了一位，导致报了个错误案例
另外利用到找到符合条件的数组对就利用flag进行break退循环优化

上代码：
class Solution {
public:
    vector<int> minAvailableDuration(vector<vector<int>>& slots1, vector<vector<int>>& slots2, int duration) {
        sort(slots1.begin(), slots1.end());
        sort(slots2.begin(), slots2.end());
        bool flag = false;
        int begin = 0;
        int zou;
        for(int i = 0; i < slots1.size(); i++) {
            if(slots1[i][1] - slots1[i][0] >= duration) {
                for(int j = 0; j < slots2.size(); j++) {
                    if(slots2[j][1] > slots1[i][0] && slots1[i][1] > slots2[j][0]) {
                        int curra = min((slots2[j][1] - slots1[i][0]), (slots1[i][1] - slots1[i][0]));
                        int curr = min(curra, (slots1[i][1] - slots2[j][0]));
                        int res = min(curr, (slots2[j][1] - slots2[j][0]));
                        if(res >= duration) {
                            cout<<res;
                            zou = max(slots2[j][0], slots1[i][0]);
                            flag = true;
                            break;
                        }
                    }
                }
            }
            if(flag)
                break;
        }
        int aim = zou + duration;
        if(flag)
            return {zou,aim};
        else
            return {};
            
    }
};