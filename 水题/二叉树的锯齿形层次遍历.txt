题目难度：MEDIUM
给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回锯齿形层次遍历如下：

[
  [3],
  [20,9],
  [15,7]
]
思路：还是先算树的深度，分配空间，遍历赋值
不同的是在对数组奇数项执行reverse翻转就OK了
上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int num=0;
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> a;
        if(!root) {
            return a;
        }
        traval(root,1);
        vector<vector<int>> m(num);
        getsolution(m,root,0);
        for(int i=1; i<num; i=i+2) {
            reverse(m[i].begin(), m[i].end());
        }
        return m;
    }
    void getsolution(vector<vector<int>>& ret, TreeNode* root, int level) {
        if(root == NULL) {
            return ;
        }
        ret[level].push_back(root->val);
        getsolution(ret,root->left,level+1);
        getsolution(ret,root->right,level+1);
    }
    void traval(TreeNode *node, int level) {
        if(node->left) {
            traval(node->left,level+1);
        }
        if(node->right) {               //注意这里不能用else判断，因为递归
            traval(node->right,level+1);//不能被全部执行
        }
        if(!node->left && !node->right) {
            num = max(num,level);
            return ;			//减少程序耗时
        }
    }
};