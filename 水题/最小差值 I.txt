题目难度：EASY

给你一个整数数组 A，对于每个整数 A[i]，我们可以选择处于区间 [-K, K] 中的任意数 x ，将 x 与 A[i] 相加，结果存入 A[i] 。

在此过程之后，我们得到一些数组 B。

返回 B 的最大值和 B 的最小值之间可能存在的最小差值。

 

示例 1：

输入：A = [1], K = 0
输出：0
解释：B = [1]
示例 2：

输入：A = [0,10], K = 2
输出：6
解释：B = [2,8]
示例 3：

输入：A = [1,3,6], K = 3
输出：0
解释：B = [3,3,3] 或 B = [4,4,4]
 

提示：

1 <= A.length <= 10000
0 <= A[i] <= 10000
0 <= K <= 10000

思路：模拟
遍历得到数组的最大值最小值
最后返回判断最大值减去最小值差值是不是小于等于给定值的二倍，是的话返回0即可
否则返回差值减去给定值的二倍即可

执行用时 :
28 ms
, 在所有 C++ 提交中击败了
65.20%
的用户
内存消耗 :
14.8 MB
, 在所有 C++ 提交中击败了
50.00%
的用户
（时空都一般）

上代码：
class Solution {
public:
    int xiao = 10005, da = -1;
    
    int smallestRangeI(vector<int>& A, int K) {
        for(int i = 0; i < A.size(); i++) {
            xiao = min(xiao, A[i]);
            da = max(da, A[i]);
        }
        return (da - xiao) <= 2 * K ? 0 : da - xiao - 2 * K;
    }
};