题目难度：MEDIUM

给你一个整数数组 arr。你可以从中选出一个整数集合，并删除这些整数在数组中的每次出现。

返回 至少 能删除数组中的一半整数的整数集合的最小大小。

 

示例 1：

输入：arr = [3,3,3,3,5,5,5,2,2,7]
输出：2
解释：选择 {3,7} 使得结果数组为 [5,5,5,2,2]、长度为 5（原数组长度的一半）。
大小为 2 的可行集合有 {3,5},{3,2},{5,2}。
选择 {2,7} 是不可行的，它的结果数组为 [3,3,3,3,5,5,5]，新数组长度大于原数组的二分之一。
示例 2：

输入：arr = [7,7,7,7,7,7]
输出：1
解释：我们只能选择集合 {7}，结果数组为空。
示例 3：

输入：arr = [1,9]
输出：1
示例 4：

输入：arr = [1000,1000,3,7]
输出：1
示例 5：

输入：arr = [1,2,3,4,5,6,7,8,9,10]
输出：5
 

提示：

1 <= arr.length <= 10^5
arr.length 为偶数
1 <= arr[i] <= 10^5

思路：周赛第二题，贪心
先遍历一次数组，然后开数组保存每个数字出现次数
然后排序一维数组，从后遍历每次次数加一，当累加值大于等于给你定数组长度除2加给定数组长度模2（WA点1）时，结束循环
返回结果次数即可

上代码：
class Solution {
public:
    int sum = 0, res = 0;
    
    int minSetSize(vector<int>& arr) {
        vector<int> curr(100005, 0);
        for(int i = 0; i < arr.size(); i++)
            curr[arr[i]]++;
        sort(curr.begin(), curr.end());
        for(int i = curr.size() - 1; i >= 0; i--) {
            res++;
            sum += curr[i];
            if(sum >= arr.size() / 2 + arr.size() % 2)
                break;
        }
        return res;
    }
};