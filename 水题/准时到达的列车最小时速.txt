题目难度：MEDIUM

给你一个浮点数 hour ，表示你到达办公室可用的总通勤时间。
要到达办公室，你必须按给定次序乘坐 n 趟列车。
另给你一个长度为 n 的整数数组 dist ，其中 dist[i] 表示第 i 趟列车的行驶距离（单位是千米）。
每趟列车均只能在整点发车，所以你可能需要在两趟列车之间等待一段时间。
例如，第 1 趟列车需要 1.5 小时，那你必须再等待 0.5 小时，搭乘在第 2 小时发车的第 2 趟列车。
返回能满足你准时到达办公室所要求全部列车的 最小正整数 时速（单位：千米每小时），如果无法准时到达，则返回 -1 。
生成的测试用例保证答案不超过 107 ，且 hour 的 小数点后最多存在两位数字 。
示例 1：
输入：dist = [1,3,2], hour = 6
输出：1
解释：速度为 1 时：
- 第 1 趟列车运行需要 1/1 = 1 小时。
- 由于是在整数时间到达，可以立即换乘在第 1 小时发车的列车。
第 2 趟列车运行需要 3/1 = 3 小时。
- 由于是在整数时间到达，可以立即换乘在第 4 小时发车的列车。
第 3 趟列车运行需要 2/1 = 2 小时。
- 你将会恰好在第 6 小时到达。
示例 2：
输入：dist = [1,3,2], hour = 2.7
输出：3
解释：速度为 3 时：
- 第 1 趟列车运行需要 1/3 = 0.33333 小时。
- 由于不是在整数时间到达，故需要等待至第 1 小时才能搭乘列车。
第 2 趟列车运行需要 3/3 = 1 小时。
- 由于是在整数时间到达，可以立即换乘在第 2 小时发车的列车。
第 3 趟列车运行需要 2/3 = 0.66667 小时。
- 你将会在第 2.66667 小时到达。
示例 3：
输入：dist = [1,3,2], hour = 1.9
输出：-1
解释：不可能准时到达，因为第 3 趟列车最早是在第 2 小时发车。
提示：
n == dist.length
1 <= n <= 105
1 <= dist[i] <= 105
1 <= hour <= 109
hours 中，小数点后最多存在两位数字

思路：周赛第二题，二分
先取结果值可能的最大值和最小值
然后套二分板子，先遍历数组统计当前值对应数组除最后一项的所有项所需的时间
先用数组值除以当前值然后如果有余数再加一（必须是整数时间才有车）
然后再算最后一项需要消耗的时间（保留小数）
然后计算出给定值减去数组除最后一项的累计值（剩下的时间且保留小数）
如果这个值大于数组最后一项的时间，那么区间取左半
否则区间右半
最后遍历一次数组累计当前二分出来的结果的时间值（保留小数），方法同上
如果时间值比给定值大或者时间值小于1e7（最大时间），那么时间值加一
最后返回时间值即可

上代码：
class Solution {
public:
    int big = 0, add = 0;
    
    int minSpeedOnTime(vector<int>& dist, double hour) {
        if(hour <= dist.size() - 1) return -1;
        int begin = 1, end = 1e7;
        while(begin < end) {
            int mid = (end + begin) / 2, sum = 0;
            for(int i = 0; i < dist.size() - 1; i++) {
                sum += dist[i] / mid;
                if(dist[i] % mid != 0) sum++;
            }
            double cur = (double)dist[dist.size() - 1] / mid;
            double aim = (double)(hour - sum);
            if(cur < aim) end = mid - 1;
            else begin = mid + 1;
        }
        for(int i = 0; i < dist.size() - 1; i++) {
            add += dist[i] / begin;
            if(dist[i] % begin != 0) add++;
        }
        double a = (double)dist[dist.size() - 1] / begin;
        double aa = (double)(hour - add);
        if(a > aa && begin < 1e7) return begin + 1;
        return begin;
    }
};