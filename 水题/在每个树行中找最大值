题目难度：MEDIUM

给定一棵二叉树的根节点 root ，请找出该二叉树中每一层的最大值。
示例1：
输入: root = [1,3,2,5,3,null,9]
输出: [1,3,9]
示例2：
输入: root = [1,2,3]
输出: [1,3]
提示：
二叉树的节点个数的范围是 [0,104]
-231 <= Node.val <= 231 - 1

思路：树+DFS
套带高度树的DFS板子，得到二维数组存节点值和高度
遍历每一高度的得到最大值存进结果数组
最后返回结果数组即可

执行用时：
52 ms
, 在所有 C++ 提交中击败了
5.32%
的用户
内存消耗：
63.1 MB
, 在所有 C++ 提交中击败了
5.02%
的用户
（时空都炸了...）

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > curr;
    vector<int> res;

    vector<int> largestValues(TreeNode* root) {
        if(root == nullptr) return res;
        vector<vector<int> > aim(10005);
        curr = aim;
        DFS(root, 0);
        for(int i = 0; i < 10005; i++) {
            int sum = 1<<31;
            for(int j = 0; j < curr[i].size(); j++) sum = max(sum, curr[i][j]);
            if(curr[i].size() != 0) res.push_back(sum);
        }
        return res;
    }

    void DFS(TreeNode* node, int len) {
        curr[len].push_back(node->val);
        if(node->left != nullptr) DFS(node->left, len + 1);
        if(node->right != nullptr) DFS(node->right, len + 1);
        return ;
    }
};
