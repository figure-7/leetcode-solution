题目难度：EASY

国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如:
'a' 对应 ".-" ，
'b' 对应 "-..." ，
'c' 对应 "-.-." ，以此类推。
为了方便，所有 26 个英文字母的摩尔斯密码表如下：
[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
给你一个字符串数组 words ，每个单词可以写成每个字母对应摩尔斯密码的组合。
例如，"cab" 可以写成 "-.-..--..." ，(即 "-.-." + ".-" + "-..." 字符串的结合)。
我们将这样一个连接过程称作 单词翻译 。
对 words 中所有单词进行单词翻译，返回不同 单词翻译 的数量。
示例 1：
输入: words = ["gin", "zen", "gig", "msg"]
输出: 2
解释: 
各单词翻译如下:
"gin" -> "--...-."
"zen" -> "--...-."
"gig" -> "--...--."
"msg" -> "--...--."
共有 2 种不同翻译, "--...-." 和 "--...--.".
示例 2：
输入：words = ["a"]
输出：1
提示：
1 <= words.length <= 100
1 <= words[i].length <= 12
words[i] 由小写英文字母组成

思路：模拟
直接把给定数组所有字符串对应的给定摩尔斯序列计算出来
之后对应数组每个元素用哈希表判断有多少个不同的就可以了
返回不同的结果即可

执行用时：
4 ms
, 在所有 C++ 提交中击败了
58.65%
的用户
内存消耗：
8.2 MB
, 在所有 C++ 提交中击败了
91.35%
的用户
（时间一般，空间不错）

上代码：
class Solution {
public:
    int res = 0;
    unordered_map<string ,int> map;
    string curr[26] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."};
    
    int uniqueMorseRepresentations(vector<string>& words) {
        for(int i = 0; i < words.size(); i++) {
            string str = "";
            for(int j = 0; j < words[i].size(); j++) str += curr[words[i][j] - 'a'];
            if(map.find(str) == map.end()) res++;
            map[str] = 1;
        }
        return res;
    }
};