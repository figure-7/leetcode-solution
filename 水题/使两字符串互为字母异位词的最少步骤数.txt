题目难度：MEDIUM

给你两个字符串 s 和 t 。
在一步操作中，你可以给 s 或者 t 追加 任一字符 。
返回使 s 和 t 互为 字母异位词 所需的最少步骤数。
字母异位词 指字母相同但是顺序不同（或者相同）的字符串。
示例 1：
输入：s = "leetcode", t = "coats"
输出：7
解释：
- 执行 2 步操作，将 "as" 追加到 s = "leetcode" 中，得到 s = "leetcodeas" 。
- 执行 5 步操作，将 "leede" 追加到 t = "coats" 中，得到 t = "coatsleede" 。
"leetcodeas" 和 "coatsleede" 互为字母异位词。
总共用去 2 + 5 = 7 步。
可以证明，无法用少于 7 步操作使这两个字符串互为字母异位词。
示例 2：
输入：s = "night", t = "thing"
输出：0
解释：给出的字符串已经互为字母异位词。
因此，不需要任何进一步操作。
提示：
1 <= s.length, t.length <= 2 * 105
s 和 t 由小写英文字符组成

思路：周赛第二题（4min36s），模拟
建立两个数组初始化26空间值为0用来保存两个字符串所有字母个数
遍历给定的两个字符串分别统计每个字符个数存进建立数组中
遍历26个字母，累加两个数组每一项的差值的绝对值给结果值（初值0）
返回结果值即可

上代码：
class Solution {
public:
    int curra[26] = {0}, currb[26] = {0};
    int res = 0;
    
    int minSteps(string s, string t) {
        for(char ch : s) curra[ch - 'a']++;
        for(char ch : t) currb[ch - 'a']++;
        for(int i = 0; i < 26; i++) if(curra[i] != currb[i]) res += abs(curra[i] - currb[i]);
        return res;
    }
};