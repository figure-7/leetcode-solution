题目难度：MEDIUM

给你两个 m x n 的二进制矩阵 grid1 和 grid2 ，它们只包含 0 （表示水域）和 1 （表示陆地）。
一个 岛屿 是由 四个方向 （水平或者竖直）上相邻的 1 组成的区域。
任何矩阵以外的区域都视为水域。
如果 grid2 的一个岛屿，被 grid1 的一个岛屿 完全 包含，也就是说 grid2 中该岛屿的每一个格子都被 grid1 中同一个岛屿完全包含，那么我们称 grid2 中的这个岛屿为 子岛屿 。
请你返回 grid2 中 子岛屿 的 数目 。
示例 1：
输入：grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]
输出：3
解释：如上图所示，左边为 grid1 ，右边为 grid2 。
grid2 中标红的 1 区域是子岛屿，总共有 3 个子岛屿。
示例 2：
输入：grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]
输出：2 
解释：如上图所示，左边为 grid1 ，右边为 grid2 。
grid2 中标红的 1 区域是子岛屿，总共有 2 个子岛屿。
提示：
m == grid1.length == grid2.length
n == grid1[i].length == grid2[i].length
1 <= m, n <= 500
grid1[i][j] 和 grid2[i][j] 都要么是 0 要么是 1 。

思路：周赛第三题（11min超时...）BFS
（多亏第二道大模拟题把我整傻了，这个简单的没时间，服）
直接套岛屿数量板子
然后把BFS里在加一个给定第一个数组参数
在BFS循环内部判断给定第一个数组值是不是一
不是就把布尔值反转（不是子岛屿）
最后BFS结束出来如果布尔值没变总数在加一即可

上代码：
class Solution {
public:
    int sum = 0;
    bool flag = true;
    
    void bfs(vector<vector<int>>& grida, vector<vector<int>>& gridb, int x, int y) {
        if (x >= 0 && x < grida.size() && y >= 0 && y < grida[0].size() && grida[x][y] == 1) {
            if(gridb[x][y] == 0) flag = false;
            grida[x][y] = 0;
            bfs(grida, gridb, x - 1, y);
            bfs(grida, gridb, x + 1, y);
            bfs(grida, gridb, x, y - 1);
            bfs(grida, gridb, x, y + 1);
        }
    }
        
    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        for (int i = 0; i < grid2.size(); i++) {
            for (int j = 0; j < grid2[0].size(); j++) {
                if (grid2[i][j] == 1 && grid1[i][j] == 1) {
                    flag = true;
                    bfs(grid2, grid1, i, j);
                    if(flag) sum++;
                }
            }
        }
        return sum;
    }
};
