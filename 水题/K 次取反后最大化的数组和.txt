题目难度：EASY

给定一个整数数组 A，我们只能用以下方法修改该数组：

我们选择某个个索引 i 并将 A[i] 替换为 -A[i]，然后总共重复这个过程 K 次。

（我们可以多次选择同一个索引 i。）

以这种方式修改数组后，返回数组可能的最大和。

 

示例 1：

输入：A = [4,2,3], K = 1
输出：5
解释：选择索引 (1,) ，然后 A 变为 [4,-2,3]。
示例 2：

输入：A = [3,-1,0,2], K = 3
输出：6
解释：选择索引 (1, 2, 2) ，然后 A 变为 [3,1,0,2]。
示例 3：

输入：A = [2,-3,-1,5,-4], K = 2
输出：13
解释：选择索引 (1, 4) ，然后 A 变为 [2,3,-1,5,4]。
 

提示：

1 <= A.length <= 10000
1 <= K <= 10000
-100 <= A[i] <= 100

思路：模拟
（WA点1,2,3,4,5,6,马虎莽的...）
先排序数组，然后遍历数组，对于负数并且K大于0，就变反，然后K减一
否则就再拍一次序（WA点7：因为有的负数变反后比原数组最小的整数小）
然后判断K是奇数那么就将数组第一个值变反，然后结束循环，结果值为数组和
最后返回结果即可

上代码：
class Solution {
public:
    int res = 0;
    
    int largestSumAfterKNegations(vector<int>& A, int K) {
        sort(A.begin(), A.end());
        for(int i = 0; i < A.size() && K > 0; i++) {
            if(A[i] >= 0) {
                sort(A.begin(), A.end());
                if(K % 2 != 0)
                    A[0] = -A[0];
                break;
            }
            K--;
            A[i] = -A[i];
        }
        for(int i = 0; i < A.size(); i++)
            res += A[i];
        return res;
    }
};