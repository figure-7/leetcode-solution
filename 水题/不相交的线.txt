题目难度：MEDIUM

我们在两条独立的水平线上按给定的顺序写下 A 和 B 中的整数。

现在，我们可以绘制一些连接两个数字 A[i] 和 B[j] 的直线，只要 A[i] == B[j]，且我们绘制的直线不与任何其他连线（非水平线）相交。

以这种方法绘制线条，并返回我们可以绘制的最大连线数。

 

示例 1：



输入：A = [1,4,2], B = [1,2,4]
输出：2
解释：
我们可以画出两条不交叉的线，如上图所示。
我们无法画出第三条不相交的直线，因为从 A[1]=4 到 B[2]=4 的直线将与从 A[2]=2 到 B[1]=2 的直线相交。
示例 2：

输入：A = [2,5,1,2,5], B = [10,5,2,1,5,2]
输出：3
示例 3：

输入：A = [1,3,7,1,7,5], B = [1,9,2,5,1]
输出：2
 

提示：

1 <= A.length <= 500
1 <= B.length <= 500
1 <= A[i], B[i] <= 2000

思路：DP
实际上就是套DP->最长公共子序列板子即可
只要把字符串改为数组，最后返回结果值即可

执行用时 :
16 ms
, 在所有 C++ 提交中击败了
52.46%
的用户
内存消耗 :
18.7 MB
, 在所有 C++ 提交中击败了
5.09%
的用户
（时间一般，空间炸了）

上代码：
class Solution {
public:
    int lcs(vector<int>& A, vector<int>& B, vector<vector<int>>& vec) {
        int len1 = A.size();
        int len2 = B.size();
        vector<vector<int>> c(len1 + 1, vector<int>(len2 + 1, 0));
        for (int i = 0; i <= len1; i++) {
            for (int j = 0; j <= len2; j++) {
                if (i == 0 || j == 0) {
                    c[i][j] = 0;
                }
                else if (A[i - 1] == B[j - 1]) {
                    c[i][j] = c[i - 1][j - 1] + 1;
                    vec[i][j] = 0;
                }
                else if (c[i - 1][j] >= c[i][j - 1]) {
                    c[i][j] = c[i - 1][j];
                    vec[i][j] = 1;
                }
                else {
                    c[i][j] = c[i][j - 1];
                    vec[i][j] = 2;
                }
            }
        }

        return c[len1][len2];
    }
    
    int maxUncrossedLines(vector<int>& A, vector<int>& B) {
        vector<vector<int>> vec(A.size() + 1, vector<int>(B.size() + 1, -1));
        int result = lcs(A, B, vec);
        return result;
    }
};