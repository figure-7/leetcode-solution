题目难度：EASY

在一个给定的数组nums中，总是存在一个最大元素 。

查找数组中的最大元素是否至少是数组中每个其他数字的两倍。

如果是，则返回最大元素的索引，否则返回-1。

示例 1:

输入: nums = [3, 6, 1, 0]
输出: 1
解释: 6是最大的整数, 对于数组中的其他整数,
6大于数组中其他元素的两倍。6的索引是1, 所以我们返回1.
 

示例 2:

输入: nums = [1, 2, 3, 4]
输出: -1
解释: 4没有超过3的两倍大, 所以我们返回 -1.
 

提示:

nums 的长度范围在[1, 50].
每个 nums[i] 的整数范围在 [0, 100].

思路：模拟
先找最大值并记录下标，然后遍历一次看有几个数的2倍大于最大数
如果结果大于1，返回-1，否则返回下标即可

执行用时 :
8 ms
, 在所有 cpp 提交中击败了
36.61%
的用户
内存消耗 :
8.5 MB
, 在所有 cpp 提交中击败了
73.67%
的用户
（效率时间比较迷，太低，空间原地）

上代码：
class Solution {
public:
    int da = -999999;
    int sum = 0;
    int res = 0;
    
    int dominantIndex(vector<int>& nums) {
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] > da) {
                da = nums[i];
                res = i;
            }
        }
        for(int i = 0; i < nums.size(); i++)
            if(da < nums[i] * 2) sum++;
        if(sum > 1) return -1;
        return res;
    }
};