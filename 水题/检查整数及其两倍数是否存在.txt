题目难度：EASY

给你一个整数数组 arr，请你检查是否存在两个整数 N 和 M，满足 N 是 M 的两倍（即，N = 2 * M）。

更正式地，检查是否存在两个下标 i 和 j 满足：

i != j
0 <= i, j < arr.length
arr[i] == 2 * arr[j]
 

示例 1：

输入：arr = [10,2,5,3]
输出：true
解释：N = 10 是 M = 5 的两倍，即 10 = 2 * 5 。
示例 2：

输入：arr = [7,1,14,11]
输出：true
解释：N = 14 是 M = 7 的两倍，即 14 = 2 * 7 。
示例 3：

输入：arr = [3,1,7,11]
输出：false
解释：在该情况下不存在 N 和 M 满足 N = 2 * M 。
 

提示：

2 <= arr.length <= 500
-10^3 <= arr[i] <= 10^3

思路：周赛第一题，哈希表
遍历一次将数组值存入哈希表，然后在遍历一次找哈希表有无当前元素的2倍值
有的话返回true，否则返回false即可
注意0的话另外讨论，次数大于等于2返回true即可

上代码：
class Solution {
public:
    unordered_map<int, int> map;
    int sum = 0;
    
    bool checkIfExist(vector<int>& arr) {
        for(int i = 0; i < arr.size(); i++) {
            if(arr[i] == 0)
                sum++;
            map[arr[i]] = i;
            if(sum == 2)
                return true;
        }
        for(int i = 0; i < arr.size(); i++)
            if(map.find(arr[i] * 2) != map.end() && arr[i] != 0)
                return true;
        return false;
    }
};