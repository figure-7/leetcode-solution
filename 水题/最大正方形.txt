题目难度：MEDIUM

在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。

示例:

输入: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

输出: 4

思路：二维前缀和+DP
思路与二维前缀和->元素和小于等于阈值的正方形的最大边长一题类似
不同的是需要将给定数组值减去字符'0'的ASCII值作为数组值（WA了三发，笨）
此外返回循环内部值该为l * l，加上空数组判断即可（WA了一发）

执行用时 :
92 ms
, 在所有 C++ 提交中击败了
5.01%
的用户
内存消耗 :
11 MB
, 在所有 C++ 提交中击败了
51.67%
的用户
（时间炸了。。。空间一般）

上代码：
class Solution {
public:
    int sum[350][350];
    
    int get(int x, int y, int l){
        int x0 = x + l - 1, y0 = y + l -1;
        return sum[x0][y0] - sum[x - 1][y0] - sum[x0][y - 1] + sum[x - 1][y - 1];
    }
    
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.size() == 0)
            return 0;
        int n = matrix.size(), m = matrix[0].size();
        memset(sum, 0, sizeof(sum));
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= m; j++)
                sum[i][j] = matrix[i - 1][j - 1] - '0';
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= m; j++)
                sum[i][j] += sum[i][j - 1];
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= m; j++)
                sum[i][j] += sum[i - 1][j];
        for (int l = min(n, m); l >= 1; l--) {
            for (int i = 1; i + l - 1 <= n; i++) {
                for (int j = 1; j + l - 1 <= m; j++) {
                    if (get(i, j, l) >= l * l) {
                        cout<<get(i, j, l)<<endl;
                        return l * l;
                    }
                }
            }
        }
        return 0;
    }
};