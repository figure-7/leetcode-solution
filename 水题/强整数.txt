题目难度：EASY

给定两个正整数 x 和 y，如果某一整数等于 x^i + y^j，其中整数 i >= 0 且 j >= 0，那么我们认为该整数是一个强整数。

返回值小于或等于 bound 的所有强整数组成的列表。

你可以按任何顺序返回答案。在你的回答中，每个值最多出现一次。

 

示例 1：

输入：x = 2, y = 3, bound = 10
输出：[2,3,4,5,7,9,10]
解释： 
2 = 2^0 + 3^0
3 = 2^1 + 3^0
4 = 2^0 + 3^1
5 = 2^1 + 3^1
7 = 2^2 + 3^1
9 = 2^3 + 3^0
10 = 2^0 + 3^2
示例 2：

输入：x = 3, y = 5, bound = 15
输出：[2,4,6,8,10,14]
 

提示：

1 <= x <= 100
1 <= y <= 100
0 <= bound <= 10^6

思路：哈希表
二维遍历平方小于给定值的范围，用累计次数去结束循环（磕碜写法）（TLE.WA点：死循环了，外部跟内部之不能一样，否则会少结果）
哈希表判断重复元素，不重复入哈希表，入数组
最后返回数组即可

执行用时 :
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗 :
6.7 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时空完杀！！！无敌了）

上代码：
class Solution {
public:
    vector<int> res;
    int a = 0, b = 0, cnt = 0;
    unordered_map<int, int> map;
    
    vector<int> powerfulIntegers(int x, int y, int bound) {
        for(int i = 0; pow(x, i) <= bound; i++) {
            a = pow(x, i);
            for(int j = 0; pow(y, j) <= bound; j++) {
                cnt++;
                b = pow(y, j);
                if(map.find(a + b) == map.end() && a + b <= bound) {
                    map[a + b] = 1;
                    res.push_back(a + b);
                }
                if(cnt > 80)
                    break;
            }
            if(cnt > 160)
                    break;
        }
        return res;
    }
};