题目难度：MEDIUM

给你一个数组 points ，其中 points[i] = [xi, yi] ，表示第 i 个点在二维平面上的坐标。
多个点可能会有 相同 的坐标。
同时给你一个数组 queries ，其中 queries[j] = [xj, yj, rj] ，表示一个圆心在 (xj, yj) 且半径为 rj 的圆。
对于每一个查询 queries[j] ，计算在第 j 个圆 内 点的数目。
如果一个点在圆的 边界上 ，我们同样认为它在圆 内 。
请你返回一个数组 answer ，其中 answer[j]是第 j 个查询的答案。
示例 1：
输入：points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]
输出：[3,2,2]
解释：所有的点和圆如上图所示。
queries[0] 是绿色的圆，queries[1] 是红色的圆，queries[2] 是蓝色的圆。
示例 2：
输入：points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]
输出：[2,3,2,4]
解释：所有的点和圆如上图所示。
queries[0] 是绿色的圆，queries[1] 是红色的圆，queries[2] 是蓝色的圆，queries[3] 是紫色的圆。
提示：
1 <= points.length <= 500
points[i].length == 2
0 <= x​​​​​​i, y​​​​​​i <= 500
1 <= queries.length <= 500
queries[j].length == 3
0 <= xj, yj <= 500
1 <= rj <= 500
所有的坐标都是整数。

思路：双周赛第二题，模拟（7min16s）
外部遍历查询数组，建立结果值
内部遍历点数组，每次计算当前点与外部数组对应圆心距离的平方，比较与对应半径的平方大小
如果小于等于半径平方就把结果值加一（当前点在圆内部），否则继续
内部遍历结束吧结果值放入结果数组
最后返回结果数组即可

上代码：
class Solution {
public:
    vector<int> result;
    
    vector<int> countPoints(vector<vector<int>>& points, vector<vector<int>>& queries) {
        for(int i = 0; i < queries.size(); i++) {
            int res = 0;
            for(int j = 0; j < points.size(); j++) {
                int a = abs(queries[i][0] - points[j][0]), b = abs(queries[i][1] - points[j][1]);
                int cur = a * a + b * b;
                if(cur <= queries[i][2] * queries[i][2]) res++;
            }
            result.push_back(res);
        }
        return result;
    }
};