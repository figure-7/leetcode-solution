题目难度：EASY

给你一个下标从 0 开始的整数数组 nums ，该数组的大小为 n ，请你计算 nums[j] - nums[i] 能求得的 最大差值 ，其中 0 <= i < j < n 且 nums[i] < nums[j] 。
返回 最大差值 。
如果不存在满足要求的 i 和 j ，返回 -1 。
示例 1：
输入：nums = [7,1,5,4]
输出：4
解释：
最大差值出现在 i = 1 且 j = 2 时，nums[j] - nums[i] = 5 - 1 = 4 。
注意，尽管 i = 1 且 j = 0 时 ，nums[j] - nums[i] = 7 - 1 = 6 > 4 ，但 i > j 不满足题面要求，所以 6 不是有效的答案。
示例 2：
输入：nums = [9,4,3,2]
输出：-1
解释：
不存在同时满足 i < j 和 nums[i] < nums[j] 这两个条件的 i, j 组合。
示例 3：
输入：nums = [1,5,2,10]
输出：9
解释：
最大差值出现在 i = 0 且 j = 3 时，nums[j] - nums[i] = 10 - 1 = 9 。
提示：
n == nums.length
2 <= n <= 1000
1 <= nums[i] <= 109

思路：模拟
二重（内部下标从外部下标加一开始）遍历数组，分别取前后两项的差值与结果值（初值0）的最大值即可
最后返回三目运算符如果结果值等于0返回-1即可
否则返回结果值即可
（WA点：审题错误）

执行用时：
20 ms
, 在所有 C++ 提交中击败了
40.79%
的用户
内存消耗：
8.1 MB
, 在所有 C++ 提交中击败了
62.82%
的用户
（时空都一般）

class Solution {
public:
    int res = 0;
    
    int maximumDifference(vector<int>& nums) {
        for(int i = 0; i < nums.size() - 1; i++) for(int j = 1; j < nums.size(); j++) res = max(res, nums[j] - nums[i]);
        return res;
    }
};