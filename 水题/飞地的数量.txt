题目难度：MEDIUM

给出一个二维数组 A，每个单元格为 0（代表海）或 1（代表陆地）。

移动是指在陆地上从一个地方走到另一个地方（朝四个方向之一）或离开网格的边界。

返回网格中无法在任意次数的移动中离开网格边界的陆地单元格的数量。

 

示例 1：

输入：[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
输出：3
解释： 
有三个 1 被 0 包围。一个 1 没有被包围，因为它在边界上。
示例 2：

输入：[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
输出：0
解释：
所有 1 都在边界上或可以到达边界。
 

提示：

1 <= A.length <= 500
1 <= A[i].length <= 500
0 <= A[i][j] <= 1
所有行的大小都相同

思路：BFS+队列
先套带布尔数组四象封印模板，然后设立一个布尔值，初值true
外部二重遍历取消外围一圈，因为外围的话肯定不是飞地，不需要讨论（WA点1：边界写对）
设置一个计数值，四象对所有为1的区域累加，然后遇见相连的边界值为1时，把布尔值改为false（不是飞地）
（WA点2，布尔数组空间大小没改，炸了...）
内部循环结束如果布尔值为true，内部值累加给结果值，否则把布尔值改为true
最后返回结果值即可

执行用时 :
80 ms
, 在所有 C++ 提交中击败了
26.40%
的用户
内存消耗 :
22.9 MB
, 在所有 C++ 提交中击败了
13.75%
的用户
（时空都不咋地...）

上代码：
class Solution {
public:
    int res = 0;
    bool flag[505][505] = {false};
    bool ok = true;
    int dict[4][2] = {{0,1}, {1,0}, {-1,0}, {0,-1}};
    
    int numEnclaves(vector<vector<int>>& A) {
        queue<pair<int, int> > que;
        for(int i = 1; i <A.size() - 1; i++) {
            for(int j = 1; j < A[i].size() - 1; j++) {
                int cur = 0;
                if(A[i][j] == 1 && flag[i][j] == false) {
                    que.push(make_pair(i, j));
                    while (!que.empty()) {
                        int a = que.front().first, b = que.front().second;
                        que.pop();
                        flag[a][b] = true;
                        cur++;
                        for (int i = 0; i < 4; i++) {
                            int c = a + dict[i][0], d = b + dict[i][1];
                            if (c > 0 && c < A.size() - 1 && d > 0 && d < A[i].size() - 1 && flag[c][d] == false && A[c][d] == 1) {
                                que.push(make_pair(c, d));
                                flag[c][d] = true;
                            } else if((c == 0 || c == A.size() - 1 || d == 0 || d == A[i].size() - 1) && A[c][d] == 1) {
                                flag[c][d] = true;
                                ok = false;
                            } else
                                continue;
                        }
                    }
                }
                if(ok)
                    res += cur;
                else
                    ok = true;
            }
        }
        return res;
    }
};