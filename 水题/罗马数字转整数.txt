题目难度：EASY

罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。

字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。

示例 1:

输入: "III"
输出: 3
示例 2:

输入: "IV"
输出: 4
示例 3:

输入: "IX"
输出: 9
示例 4:

输入: "LVIII"
输出: 58
解释: L = 50, V= 5, III = 3.
示例 5:

输入: "MCMXCIV"
输出: 1994
解释: M = 1000, CM = 900, XC = 90, IV = 4.

思路：使用HASHMAP将各个字符对应值作为下标放入哈希表中
前面的字符对应下标值如果小于下一个就累加小于的值
如果相等就直接加上其值，
如果大于就判断前面有没有比他小的值，将对应累加值个前面的值减去，在加到结果里即可。

执行用时 : 32 ms, 在Roman to Integer的C++提交中击败了75.50% 的用户
内存消耗 : 10.7 MB, 在Roman to Integer的C++提交中击败了78.01% 的用户

上代码：
class Solution {
public:
    int romanToInt(string s) {
        int a = 0;
        int b = 0;
        map<char, int> hashmap;
        int aim = 0;
        hashmap.insert(map<char,int>::value_type('I',1));
        hashmap.insert(map<char,int>::value_type('V',5));
        hashmap.insert(map<char,int>::value_type('X',10));
        hashmap.insert(map<char,int>::value_type('L',50));
        hashmap.insert(map<char,int>::value_type('C',100));
        hashmap.insert(map<char,int>::value_type('D',500));
        hashmap.insert(map<char,int>::value_type('M',1000));
        int sum = 0;
        if(s.length()==1) {
            sum += hashmap[s[0]];
        }
        for(int i = 0; i < s.length()-1; i++) {
            if(hashmap[s[i]] > hashmap[s[i+1]]) {
                if(a!=0){
                    aim = hashmap[s[i]];
                    for(int j = 0; j < a+b; j++) {
                        aim -= hashmap[s[i-j-1]];
                    }
                    if(i+1==s.length()-1) {
                        sum += hashmap[s[i+1]];
                    }
                    sum += aim;
                    aim = 0;
                    a = 0;
                    b = 0;
                }
                else{
                    if(i+1==s.length()-1) {
                        sum += hashmap[s[i+1]];
                    }
                    sum += hashmap[s[i]];
                }
            }
            else if(hashmap[s[i]] < hashmap[s[i+1]]) {
                a++;
                if(i+1==s.size()-1) {
                    aim = hashmap[s[i+1]];
                    for(int j = 0; j < a+b; j++) {
                        aim -= hashmap[s[i-j]];
                    }
                    sum += aim;
                }
            }
            else{
                sum += hashmap[s[i]];
                if(i+1==s.length()-1) {
                    sum += hashmap[s[i+1]];
                }
            }
        }
        return sum;
    }
};