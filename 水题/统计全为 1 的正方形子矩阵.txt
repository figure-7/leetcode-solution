题目难度：MEDIUM

给你一个?m * n?的矩阵，矩阵中的元素不是 0 就是 1，请你统计并返回其中完全由 1 组成的 正方形 子矩阵的个数。

?



示例 1：

输入：matrix =
[
? [0,1,1,1],
? [1,1,1,1],
? [0,1,1,1]
]

输出：15

解释： 
边长为 1 的正方形有 10 个。

边长为 2 的正方形有 4 个。

边长为 3 的正方形有 1 个。

正方形的总数 = 10 + 4 + 1 = 15.


示例 2：

输入：matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]

输出：7

解释：
边长为 1 的正方形有 6 个。 

边长为 2 的正方形有 1 个。

正方形的总数 = 6 + 1 = 7.
?


提示：

1 <= arr.length?<= 300
1 <= arr[0].length?<= 300
0 <= arr[i][j] <= 1



思路：周赛第三题，由于上册所晚了5分钟，结果在考试结束后4分钟AC，震怒！
dp实现，终于手写dp出来了一题！
dp表达式：dp[i][j] += 1  if(matrix[i][j] && matrix[i-1][j] && matrix[i][j - 1] && matrix[i - 1][j - 1])
dp[i][j] += 1 while(dp[i - k][j - a] && dp[i - a][j - k]);a++
初始化先对第一行和第一列的dp值赋0，（无法构成二维以上子矩阵）
二维遍历数组（剪枝，都从1下标开始）针对没个下标对应的值
先判断斜上方值，上方值，左方值，本值是否都为1，都为1就对应dp值加一
然后按层向前遍历，分别取每一层左边界和上边界的dp值做判断，如果出现dp值为0，就表示这个位置没有可以扩展实现的正方形矩阵
那么也就不能扩展这一层了
（例如：
110
111
111
dp[2][2] = 1时,遍历外层即dp[2][1]dp[1][1]dp[1][2]，其中dp[1][2]==0，无法扩展）
如果可以dp就再加一
当出现不符合情况的时候直接退出循环即可
循环结束后在进行一次二重遍历数组，把等于1的原数组值也加起来（单值也算子矩阵，，，），以及对应dp值加起来
结束后放回累加结果即可

上代码：
class Solution {
public:
    int res = 0;
    int countSquares(vector<vector<int>>& matrix) {
        int dp[matrix.size()][matrix[0].size()] = {0};
        for(int i = 0; i < matrix[0].size(); i++)
            dp[0][i] = 0;
        for(int i = 1; i < matrix.size(); i++)
            dp[i][0] = 0;
        for(int i = 1; i < matrix.size(); i++) {
            for(int j = 1; j < matrix[0].size(); j++) {
                if(matrix[i][j] && matrix[i-1][j] && matrix[i][j - 1] && matrix[i - 1][j - 1]) {
                    dp[i][j]++;
                    int a = 1;
                    bool flag = true;
                    while(flag && i - a >= 0 && j - a >= 0) {
                        for(int k = 0; k <= a; k++) {
                            if(dp[i - k][j - a] && dp[i - a][j - k]) {
                            }
                            else {
                                flag = false;
                            }
                        }
                        if(flag)
                            dp[i][j]++;
                        a++;
                    }
                }
            }
        }
        for(int i = 0; i < matrix.size(); i++) {
            for(int j = 0; j < matrix[0].size(); j++) {
                res += matrix[i][j];
                res += dp[i][j];
            }
        }
        return res;
    }
};