题目难度：EASY

给你一个非递减的 有序 整数数组，已知这个数组中恰好有一个整数，它的出现次数超过数组元素总数的 25%。

请你找到并返回这个整数

 

示例：

输入：arr = [1,2,2,6,6,6,6,7,10]
输出：6
 

提示：

1 <= arr.length <= 10^4
0 <= arr[i] <= 10^5

思路：周赛第一题，这个还炸了一次。。。
先针对每个数值出现次数，如果大于数组长度除以4就返回该元素
遍历结束没有取到值就返回-1即可

上代码：
class Solution {
public:
    int sum = 1;
    int findSpecialInteger(vector<int>& arr) {
        if(arr.size() == 1)
            return arr[0];
        int aim = arr[0];
        int chu = arr.size() / 4;
        for(int i = 1; i < arr.size(); i++) {
            if(aim == arr[i])
                sum++;
            else {
                sum = 1;
                aim = arr[i];
            }
            if(sum > chu) {
                return aim;
                break;
            }
        }
        return -1;
    }
};