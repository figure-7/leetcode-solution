题目难度：EASY

给定一个未经排序的整数数组，找到最长且连续的的递增序列。

示例 1:

输入: [1,3,5,4,7]
输出: 3
解释: 最长连续递增序列是 [1,3,5], 长度为3。
尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。 
示例 2:

输入: [2,2,2,2,2]
输出: 1
解释: 最长连续递增序列是 [2], 长度为1。
注意：数组长度不会超过10000。

思路：模拟
（乍一看以为是DP（误），实则大水题（误(））
直接遍历一次，下标1开始，当当前项比前一项大是中间变量加一，然后与结果取最大值
否则中间变量置1，初始化结果为1（解决了数组长度为1或者单调递减或者全相等的问题）
最后三元运算符判断数组长度是否为空，空就返回0，否则返回结果（这里WA一发。。）

执行用时 :
12 ms
, 在所有 C++ 提交中击败了
89.28%
的用户
内存消耗 :
9.3 MB
, 在所有 C++ 提交中击败了
58.45%
的用户
（时间不错，空间一般，还是原地，，，迷）

上代码：
class Solution {
public:
    int sum = 1, res = 1;
    
    int findLengthOfLCIS(vector<int>& nums) {
        for(int i = 1; i < nums.size(); i++) {
            if(nums[i] > nums[i - 1])
                sum++;
            else
                sum = 1;
            res = max(res, sum);
        }
        return nums.size() == 0 ? 0 : res;
    }
};