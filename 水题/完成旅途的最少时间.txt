题目难度：MEDIUM

给你一个数组 time ，其中 time[i] 表示第 i 辆公交车完成 一趟旅途 所需要花费的时间。
每辆公交车可以 连续 完成多趟旅途，也就是说，一辆公交车当前旅途完成后，可以 立马开始 下一趟旅途。
每辆公交车 独立 运行，也就是说可以同时有多辆公交车在运行且互不影响。
给你一个整数 totalTrips ，表示所有公交车 总共 需要完成的旅途数目。
请你返回完成 至少 totalTrips 趟旅途需要花费的 最少 时间。
示例 1：
输入：time = [1,2,3], totalTrips = 5
输出：3
解释：
- 时刻 t = 1 ，每辆公交车完成的旅途数分别为 [1,0,0] 。
  已完成的总旅途数为 1 + 0 + 0 = 1 。
- 时刻 t = 2 ，每辆公交车完成的旅途数分别为 [2,1,0] 。
  已完成的总旅途数为 2 + 1 + 0 = 3 。
- 时刻 t = 3 ，每辆公交车完成的旅途数分别为 [3,1,1] 。
  已完成的总旅途数为 3 + 1 + 1 = 5 。
所以总共完成至少 5 趟旅途的最少时间为 3 。
示例 2：
输入：time = [2], totalTrips = 1
输出：2
解释：
只有一辆公交车，它将在时刻 t = 2 完成第一趟旅途。
所以完成 1 趟旅途的最少时间为 2 。
提示：
1 <= time.length <= 105
1 <= time[i], totalTrips <= 107

思路：周赛第三题（29min50s），二分
先排序数组，之后设置二分尾指针为数组第一项乘以给定值（即总旅途数最大值）
二分头指针为0，套二分板子
需要注意类型为long long（WA点1，2：没看好题爆int了，太那啥了）
最后结果值如果尾指针不满足大于等于给定值返回尾指针加一即可
否则返回尾指针即可
（WA点3：二分错误）

上代码：
class Solution {
public:
    long long begin = 0, aim = 0;
    
    long long minimumTime(vector<int>& time, int totalTrips) {
        sort(time.begin(), time.end());
        long long end = time[0];
        end *= totalTrips;
        while(begin < end) {
            long long cur = 0, mid = (begin + end) / 2;
            for(int i = 0; i < time.size(); i++) cur += mid / time[i];
            if(cur >= totalTrips) end = mid - 1;
            else begin = mid + 1;
        }
        for(int cur : time) aim += end / cur;
        return aim < totalTrips ? end + 1 : end;
    }
};