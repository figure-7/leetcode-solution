题目难度：MEDIUM

给你三个正整数 a、b 和 c。

你可以对 a 和 b 的二进制表示进行位翻转操作，返回能够使按位或运算   a OR b == c  成立的最小翻转次数。

「位翻转操作」是指将一个数的二进制表示任何单个位上的 1 变成 0 或者 0 变成 1 。

 

示例 1：



输入：a = 2, b = 6, c = 5
输出：3
解释：翻转后 a = 1 , b = 4 , c = 5 使得 a OR b == c
示例 2：

输入：a = 4, b = 2, c = 7
输出：1
示例 3：

输入：a = 1, b = 2, c = 3
输出：0
 

提示：

1 <= a <= 10^9
1 <= b <= 10^9
1 <= c <= 10^9

思路：周赛第二题，模拟
我的思路是当三个数大于0时进入while循环，内部先判断当前三个数除以2的余数，初始化结果变量为0，分以下四种情况：
1：c余数为0，a余数为1且b余数为1，那么要想或运算结束后得到c，最少进行两次操作（即把a，b余数都变0），结果变量加2
2：除1外，c余数为0，a余数为1或b余数为1，那么要想或运算结束后得到c，最少进行一次操作（即把a，b中余数为1的变0），结果变量加1
3：c余数为1，a余数为0且b余数为0，那么要想或运算结束后得到c，最少进行一次操作（即把a，b中的一个余数都变1），结果变量加1
4：此外不进行操作即可
之后将三者数值除2，继续循环（判断二进制上一位变换情况）
最后返回结果变量的值即可
（一开始思路错了，WA了一发，后来重写过的，，，）

上代码：
class Solution {
public:
    int res = 0;
    int yu = 2;
    
    int minFlips(int a, int b, int c) {
        while(a > 0 || b > 0 || c > 0) {
            if(c % yu == 0) {
                if(a % yu == 1 && b % yu == 1)
                    res += 2;
                else if(a % yu == 1 || b % yu == 1)
                    res += 1;
                else
                    res = res;
            }
            if(c % yu == 1)
                if(a % yu == 0 && b % yu ==0)
                    res++;
            a /= 2;
            b /= 2;
            c /= 2;
        }
        return res;
    }
};