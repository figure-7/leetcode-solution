题目难度：EASY

给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。

对数组进行排序，以便当 A[i] 为奇数时，i 也是奇数；

当 A[i] 为偶数时， i 也是偶数。

你可以返回任何满足上述条件的数组作为答案。

 

示例：

输入：[4,2,5,7]
输出：[4,5,2,7]
解释：[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。
 

提示：

2 <= A.length <= 20000
A.length % 2 == 0
0 <= A[i] <= 1000

思路：模拟
初始化奇偶数所放置的下标位置
遍历数组，当前是奇数就放到结果数组奇数下标位置，奇数下标加二
否则就放到结果数组偶数下标位置，偶数下标加二
最后返回结果数组即可

执行用时 :
40 ms
, 在所有 C++ 提交中击败了
33.14%
的用户
内存消耗 :
20.6 MB
, 在所有 C++ 提交中击败了
7.14%
的用户
（时间不咋地，空间炸了）

上代码：
class Solution {
public:
    int ji = 1, ou = 0;
    
    vector<int> sortArrayByParityII(vector<int>& A) {
        vector<int> res(A.size(), 0);
        for(int i = 0; i < A.size(); i++) {
            if(A[i] % 2 == 0) {
                res[ou] = A[i];
                ou += 2;
            } else {
                res[ji] = A[i];
                ji += 2;
            }
        }
        return res;
    }
};