题目难度：MEDIUM

我们有一个由平面上的点组成的列表 points。需要从中找出 K 个距离原点 (0, 0) 最近的点。

（这里，平面上两点之间的距离是欧几里德距离。）

你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。

 

示例 1：

输入：points = [[1,3],[-2,2]], K = 1
输出：[[-2,2]]
解释： 
(1, 3) 和原点之间的距离为 sqrt(10)，
(-2, 2) 和原点之间的距离为 sqrt(8)，
由于 sqrt(8) < sqrt(10)，(-2, 2) 离原点更近。
我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。
示例 2：

输入：points = [[3,3],[5,-1],[-2,4]], K = 2
输出：[[3,3],[-2,4]]
（答案 [[-2,4],[3,3]] 也会被接受。）
 

提示：

1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000

思路：散列表
遍历数组，将数组没项的元素平方和插入建立数组，并作为散列表下标，对应插入值为数组当前下标
给建立数组排序
遍历建立数组，先取当前数组值对应散列表下标的长度减一加给外部下标，然后遍历当前下标散列表，值对应数组的值粗内二维数组
内部判断当二维数组长度为K时直接返回该数组，否则继续
最后返回二维数组即可

执行用时 :
244 ms
, 在所有 C++ 提交中击败了
70.17%
的用户
内存消耗 :
74.3 MB
, 在所有 C++ 提交中击败了
15.68%
的用户
（时间不错，空间不咋地）

上代码：
class Solution {
public:
    vector<int> curr;
    vector<vector<int> > res;
    unordered_map<int, set<int> > map;
    
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        for(int i = 0; i < points.size(); i++) {
            map[points[i][0] * points[i][0] + points[i][1] * points[i][1]].insert(i);
            curr.push_back(points[i][0] * points[i][0] + points[i][1] * points[i][1]);
        }
        sort(curr.begin(), curr.end());
        for(int i = 0; i < K; i++) {
            int cur = map[curr[i]].size();
            for(auto i : map[curr[i]]) {
                res.push_back(points[i]);
                if(res.size() == K)
                    return res;
            }
            i += cur - 1;
        }
        return res;
    }
};