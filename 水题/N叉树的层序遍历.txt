题目难度：MEDIUM

给定一个 N 叉树，返回其节点值的层序遍历。 

(即从左到右，逐层遍历)。

例如，给定一个 3叉树 :

 



 

返回其层序遍历:

[
     [1],
     [3,2,4],
     [5,6]
]
 

说明:

树的深度不会超过 1000。
树的节点总数不会超过 5000。

思路：树+DFS
这里我开了四个数组，就不用两次DFS了直接办两次DFS的板子写法综合了
之后注意转换成N叉树就行，开指定结果数组空间用综合写的
之后在继承临时数组，最后返回结果数组即可

执行用时 :
64 ms
, 在所有 C++ 提交中击败了
79.89%
的用户
内存消耗 :
15.2 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间不错，空间完杀！（空间击败100认真的！？？？））

上代码：
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int> > currmodtwo, res;
    int len = 0;
    
    void DFS(Node* node, int level) {
        len = max(len, level);
        if(node == nullptr) return ;
        currmodtwo[level].push_back(node->val);
        vector<Node*> nodes;
        nodes.insert(nodes.begin(), node->children.begin(), node->children.end());
        for(int i = 0; i < nodes.size(); i++) DFS(nodes[i], level + 1);
    }
    
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int> > curr(1005);
        currmodtwo = curr;
        DFS(root, 0);
        for(int i = 0; i < currmodtwo.size(); i++) {
            if(currmodtwo[i].size() != 0) {
                vector<int> currmodfour;
                for(int j = 0; j < currmodtwo[i].size(); j++) currmodfour.push_back(currmodtwo[i][j]);
                res.push_back(currmodfour);
            }
        }
        return res;
    }
};