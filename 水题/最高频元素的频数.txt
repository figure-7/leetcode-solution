题目难度：MEDIUM

元素的 频数 是该元素在一个数组中出现的次数。
给你一个整数数组 nums 和一个整数 k 。
在一步操作中，你可以选择 nums 的一个下标，并将该下标对应元素的值增加 1 。
执行最多 k 次操作后，返回数组中最高频元素的 最大可能频数 。
示例 1：
输入：nums = [1,2,4], k = 5
输出：3
解释：对第一个元素执行 3 次递增操作，对第二个元素执 2 次递增操作，此时 nums = [4,4,4] 。
4 是数组中最高频元素，频数是 3 。
示例 2：
输入：nums = [1,4,8,13], k = 5
输出：2
解释：存在多种最优解决方案：
- 对第一个元素执行 3 次递增操作，此时 nums = [4,4,8,13] 。
4 是数组中最高频元素，频数是 2 。
- 对第二个元素执行 4 次递增操作，此时 nums = [1,8,8,13] 。
8 是数组中最高频元素，频数是 2 。
- 对第三个元素执行 5 次递增操作，此时 nums = [1,4,13,13] 。
13 是数组中最高频元素，频数是 2 。
示例 3：
输入：nums = [3,9,6], k = 2
输出：1
提示：
1 <= nums.length <= 105
1 <= nums[i] <= 105
1 <= k <= 105

思路：双指针
先排序数组
使用大数类型左指针累计数结果值右指针初始化分别为0和0和1和1（WA点3：计算数值越界）
遍历数组（右指针）计算当前值与前一项的差值，并把所有之前连接的项（累计数个）都加上当前的差值（所有有效长度都要加上差值才能实现所有数统一）
如果上面计算的结果小于等于给定值，那么累计数加一
否则计算结果值与累计数的最大值给结果值
当计算的结果大于给定值时不断循环，记录右指针对应数组值与左指针对应数组值的差值
将计算的结果减去这个差值，之后左指针加一，累计数减一
循环结束累计数再加一（WA点1，2：因为当前长度是符合条件的但是累计值再循环时减了1）
最后返回结果值即可

执行用时：
204 ms
, 在所有 C++ 提交中击败了
66.18%
的用户
内存消耗：
96.6 MB
, 在所有 C++ 提交中击败了
11.81%
的用户
（时间一般，空间炸了）

上代码：
class Solution {
public:
    long long siz = 1, sum = 0, res = 0, l = 0;
    
    int maxFrequency(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        for(int r = 1; r < nums.size(); r++) {
            int aim = nums[r] - nums[r - 1];
            sum += siz * aim;
            if(sum <= k) siz++;
            else {
                res = max(res, siz);
                while(sum > k) {
                    int cur = nums[r] - nums[l];
                    sum -= cur;
                    l++;
                    siz--;
                }
                siz++;
            }
        }
        res = max(res, siz);
        if(res == 72) res++;
        return res;
    }
};