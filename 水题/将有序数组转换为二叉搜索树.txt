题目难度：EASY
将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。

本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。

示例:

给定有序数组: [-10,-3,0,5,9],

一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：

      0
     / \
   -3   9
   /   /
 -10  5
思路：从头至尾遍历，第一次下标为0到num.size()
进入调用函数进行二分，去中间的值父亲节点的值，左右孩子就在分开的两个区域里递归调用就完了。
上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(nums.size()==0) {
            return NULL;
        }
        return build(0, nums.size(), nums);
    }
    TreeNode* build(double start, double end, vector<int>& num) {
        if(start == end) {
            return NULL;
        }
        int mid = (end+start)/2;
        TreeNode* node = new TreeNode(num[mid]);
        node->left = build(start, mid, num);
        node->right = build(mid+1, end, num);
        return node;
    }
};