题目难度：EASY

给你一个二进制字符串 s 。
如果字符串中由 1 组成的 最长 连续子字符串 严格长于 由 0 组成的 最长 连续子字符串，返回 true ；
否则，返回 false 。
例如，s = "110100010" 中，由 1 组成的最长连续子字符串的长度是 2 ，由 0 组成的最长连续子字符串的长度是 3 。
注意，如果字符串中不存在 0 ，此时认为由 0 组成的最长连续子字符串的长度是 0 。
字符串中不存在 1 的情况也适用此规则。
示例 1：
输入：s = "1101"
输出：true
解释：
由 1 组成的最长连续子字符串的长度是 2："1101"
由 0 组成的最长连续子字符串的长度是 1："1101"
由 1 组成的子字符串更长，故返回 true 。
示例 2：
输入：s = "111000"
输出：false
解释：
由 1 组成的最长连续子字符串的长度是 3："111000"
由 0 组成的最长连续子字符串的长度是 3："111000"
由 1 组成的子字符串不比由 0 组成的子字符串长，故返回 false 。
示例 3：
输入：s = "110100010"
输出：false
解释：
由 1 组成的最长连续子字符串的长度是 2："110100010"
由 0 组成的最长连续子字符串的长度是 3："110100010"
由 1 组成的子字符串不比由 0 组成的子字符串长，故返回 false 。
提示：
1 <= s.length <= 100
s[i] 不是 '0' 就是 '1'

思路：周赛第一题，模拟
先记录字符串第一个字符，对应的计数值（初值0）加一
然后遍历剩下的字符，如果跟记录字符相同，看是字符0还是1，对应的计数值加一
否则取两个字符结果值（初值0）与记录值的最大值给结果值
遍历结束后在统计一次结果值
最后返回判断两个结果值是否符合题意，符合返回true即可
否则返回false即可

上代码：
class Solution {
public:
    int a = 0, b = 0, resa = 0, resb = 0;
    
    bool checkZeroOnes(string s) {
        char ch = s[0];
        if(s[0] == '0') a = 1;
        else b = 1;
        for(int i = 1; i < s.size(); i++) {
            if(s[i] == ch) {
                if(s[i] == '0') a++;
                else b++;
            } else {
                resa = max(resa, a);
                resb = max(resb, b);
                ch = s[i];
                if(s[i] == '0') a = 1;
                else b = 1;
            }
        }
        resa = max(resa, a);
        resb = max(resb, b);
        return resa >= resb ? false : true;
    }
};