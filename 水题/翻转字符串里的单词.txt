题目难度：MEIDUM

给定一个字符串，逐个翻转字符串中的每个单词。

 

示例 1：

输入: "the sky is blue"
输出: "blue is sky the"
示例 2：

输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
示例 3：

输入: "a good   example"
输出: "example good a"
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
 

说明：

无空格字符构成一个单词。
输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
 

进阶：

请选用 C 语言的用户尝试使用 O(1) 额外空间复杂度的原地解法。

思路：模拟
先根据空格把每个字符串保存进数组里，然后逆向输出，并在字符串中间插入空格返回即可

执行用时 :
8 ms
, 在所有 cpp 提交中击败了
87.03%
的用户
内存消耗 :
11 MB
, 在所有 cpp 提交中击败了
43.56%
的用户
（时间不错。空间题目让C语言用原地，我又不是C语言（滑稽））

上代码：
class Solution {
public:
    string cur = "";
    vector<string> res;
    string ss = "";
    
    string reverseWords(string s) {
        for(int i = 0; i < s.length(); i++) {
            if(s[i] != ' ')
                cur += s[i];
            else {
                if(cur.length() != 0)
                    res.push_back(cur);
                cur = ss;
            }
        }
        if(cur.length() != 0)
            res.push_back(cur);
        for(int i = res.size() - 1; i >= 0; i--) {
            ss += res[i];
            if(i != 0)
                ss += ' ';
        }
        return ss;
    }
};