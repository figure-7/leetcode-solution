题目难度：EASY

给你一个字符串 s 和一个字符 c ，且 c 是 s 中出现过的字符。
返回一个整数数组 answer ，其中 answer.length == s.length 且 answer[i] 是 s 中从下标 i 到离它 最近 的字符 c 的 距离 。
两个下标 i 和 j 之间的 距离 为 abs(i - j) ，其中 abs 是绝对值函数。
示例 1：
输入：s = "loveleetcode", c = "e"
输出：[3,2,1,0,1,0,0,1,2,2,1,0]
解释：字符 'e' 出现在下标 3、5、6 和 11 处（下标从 0 开始计数）。
距下标 0 最近的 'e' 出现在下标 3 ，所以距离为 abs(0 - 3) = 3 。
距下标 1 最近的 'e' 出现在下标 3 ，所以距离为 abs(1 - 3) = 2 。
对于下标 4 ，出现在下标 3 和下标 5 处的 'e' 都离它最近，但距离是一样的 abs(4 - 3) == abs(4 - 5) = 1 。
距下标 8 最近的 'e' 出现在下标 6 ，所以距离为 abs(8 - 6) = 2 。
示例 2：
输入：s = "aaab", c = "b"
输出：[3,2,1,0]
提示：
1 <= s.length <= 104
s[i] 和 c 均为小写英文字母
题目数据保证 c 在 s 中至少出现一次

思路：双指针
先将给定字符在给定字符串中出现的位置下标存进建立数组中
左指针右指针初始化为建立数组第一项
遍历给定字符串，每次取当前下标与左指针的差值和当前下标与右指针的差值的最小值存进结果数组（WA点：右指针计算没取绝对值）
如果当前字符等于给定字符，那么右指针给左指针，右指针为数组下一项，如果数组没有下一项就不变
最后返回结果数组即可

执行用时：
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗：
6.9 MB
, 在所有 C++ 提交中击败了
5.16%
的用户
（时间完杀！！！空间炸了）

上代码：
class Solution {
public:
    vector<int> curr, res;
    int a = 1;

    vector<int> shortestToChar(string s, char c) {
        for(int i = 0; i < s.size(); i++) if(s[i] == c) curr.push_back(i);
        int begin = curr[0], end = curr[0];
        for(int i = 0; i < s.size(); i++) {
            int cur = abs(end - i), aim = abs(i - begin);
            cur = min(cur, aim);
            if(cur == 0) {
                begin = end;
                if(a < curr.size()) {
                    end = curr[a];
                    a++;
                }
            }
            res.push_back(cur);
        }
        return res;
    }
};
