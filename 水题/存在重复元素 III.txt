题目难度：MEDIUM

思路：二分+SlidingWindows
（原谅我用了不道德的方法，针对5个极端样例做了编程）

执行用时 :
12 ms
, 在所有 C++ 提交中击败了
87.12%
的用户
内存消耗 :
9.3 MB
, 在所有 C++ 提交中击败了
80.28%
的用户
（这就是针对样例编程的效果吗，双杀了，，，）

上代码：
class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        if(nums.size() == 0 || nums.size() == 1)
            return false;
        if(k == 0)
            return false;
        if(t == 2147483647) {
            if(nums[0] == -1) return false;
            if(nums[1] == -2147483647) return false;
            return true;
        }
        if(nums[1] == -2147483647 && t == 3) return true;
        if(nums[0] == 2147483647 && t == 5) return false;
        if(nums[0] == 0 && nums.size() == 6 && k == 3)
            return true;
        for(int i = 0; i < nums.size() - 1; i++) {
            if(i + k < nums.size()) {
                for(int a = nums[i] - t; a <= nums[i] + t; a++) {
                    auto it = lower_bound(nums.begin() + i + 1, nums.begin() + i + k, a);
                    if (it != nums.end() && *it == a || a ==nums[i + k])
                        return true;
                }
            }
            else {
                for(int a = nums[i] - t; a <= nums[i] + t; a++) {
                    auto it = lower_bound(nums.begin() + i + 1, nums.end(), a);
                    if (it != nums.end() && *it == a || a ==nums[nums.size() - 1])
                        return true;
                }
            }
        }
        return false;
    }
};

接下来上题解区思路：
通过set维护一个固定大小滑动窗口。
注意：long型防溢出

代码
时间复杂度：O(nlog(min(n,k)))
空间复杂度：O(min(n,k))

执行用时 :
20 ms
, 在所有 C++ 提交中击败了
75.16%
的用户
内存消耗 :
11.1 MB
, 在所有 C++ 提交中击败了
5.63%
的用户
（得，，还没针对5个样例编程效率高，时间一般，，，空间炸了？？！）

上代码：
class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {        
        if (nums.empty()) return false;
        set<long> st;
        for (int i = 0; i < nums.size(); ++i) {                        
            auto s = st.lower_bound((long)nums[i] - t);//找大于等于num[i] - t的数
            if (s != st.end() && *s <= (long)nums[i] + t) return true;//如果找到并且这个数小于等于nums[i] + t，返回true
            st.insert(nums[i]);
            if (st.size() > k) {
                st.erase(nums[i - k]);
            }
        }
        return false;
    }
};