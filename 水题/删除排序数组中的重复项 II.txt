题目难度：MEDIUM

给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

示

例?1:

给定 nums = [1,1,1,2,2,3],

函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。


你不需要考虑数组中超出新长度后面的元素。


示例?2:

给定 nums = [0,0,1,1,1,1,2,3,3],

函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为?0, 0, 1, 1, 2, 3, 3 。


你不需要考虑数组中超出新长度后面的元素。


说明:

为什么返回数值是整数，但输出的答案是数组呢?


请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。


你可以想象内部操作如下:


// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);


// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。

for (int i = 0; i < len; i++) 
{
? ? 
	print(nums[i]);

}

思路：这个跟一相比有点难度，因为返回的是int而输出是数组，所以数组页要做符合规则的调整才行
还不能使用unique函数，因为只能删三次及以上重复次数的数，那么先取出现三次重复数的下标
直接调用vector<int>::iterator函数，并对下标同时减一，遍历即可

上代码：
class Solution {
public:
    int aim = 1;
    int removeDuplicates(vector<int>& nums) {
        if(nums.size() == 0) {
            return nums.size();
        }
        for(int i = 0; i < nums.size()-1; i++) {
            if(nums[i] == nums[i+1]) {
                aim++;
            }
            else {
                aim = 1;
            }
            if(aim > 2) {
                vector<int>::iterator it = nums.begin()+i;
                nums.erase(it);
                i--;
            }
        }
        return nums.size();
    }
};