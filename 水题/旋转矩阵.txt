题目难度：MEDIUM

给你一幅由 N × N 矩阵表示的图像，其中每个像素的大小为 4 字节。

请你设计一种算法，将图像旋转 90 度。

不占用额外内存空间能否做到？

 

示例 1:

给定 matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

原地旋转输入矩阵，使其变为:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]
示例 2:

给定 matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
], 

原地旋转输入矩阵，使其变为:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]

思路：模拟，直接按列外部遍历，内部按行从下到上遍历存值进中间
然后按顺序二重遍历数组，把中间数组值按顺序赋值给二维数组
最后返回二维数组即可

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
68.61%
的用户
内存消耗 :
7.2 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间一般，空间完杀！！！（不是原地击败100..?））

上代码：
class Solution {
public:
    vector<int> curr;
    int siz = 0;
    
    void rotate(vector<vector<int>>& matrix) {
        for(int i = 0; i < matrix.size(); i++) for(int j = matrix.size() - 1; j >= 0; j--) curr.push_back(matrix[j][i]);
        for(int i = 0; i < matrix.size(); i++) {
            for(int j = 0; j < matrix.size(); j++) {
                matrix[i][j] = curr[siz];
                siz++;
            }
        }
    }
};