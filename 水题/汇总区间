题目难度：EASY

给定一个  无重复元素 的 有序 整数数组 nums 。
返回 恰好覆盖数组中所有数字 的 最小有序 区间范围列表 。
也就是说，nums 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 nums 的数字 x 。
列表中的每个区间范围 [a,b] 应该按如下格式输出：
"a->b" ，如果 a != b
"a" ，如果 a == b
示例 1：
输入：nums = [0,1,2,4,5,7]
输出：["0->2","4->5","7"]
解释：区间范围是：
[0,2] --> "0->2"
[4,5] --> "4->5"
[7,7] --> "7"
示例 2：
输入：nums = [0,2,3,4,6,8,9]
输出：["0","2->4","6","8->9"]
解释：区间范围是：
[0,0] --> "0"
[2,4] --> "2->4"
[6,6] --> "6"
[8,9] --> "8->9"
提示：
0 <= nums.length <= 20
-231 <= nums[i] <= 231 - 1
nums 中的所有值都 互不相同
nums 按升序排列

思路：模拟
遍历数组，建立布尔值（初始为字符串开始状态）判断是否为字符串开始状态
如果是修改状态并且将当前数组项转化为字符串赋值给建立字符串（初始化空）
否则判断数组当前项是否比前一项大一，是就修改建立值（初值0）为1
同时判断如果当前项是数组最后一项那么就把建立字符串加上->字符串和当前数组项对应字符串存进结果数组（初始化空），再把字符串清空
否则判断如果建立值为0，将建立字符串存进结果数组，建立字符串清空
否则就建立值清0，把建立字符串加上->字符串和当前数组前一项对应字符串存进结果数组（初始化空），再把字符串清空
结束后转换布尔值并把下标减一
遍历结束后如果建立字符串不为空就把建立字符串存进结果数组
最后返回结果数组即可
（WA点1,2：算法错误）

执行用时：
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗：
6.8 MB
, 在所有 C++ 提交中击败了
7.02%
的用户
（时间完杀！！！空间炸了）

上代码：
class Solution {
public:
    bool flag = false;
    int sum = 0;
    vector<string> res;
    string s = "";

    vector<string> summaryRanges(vector<int>& nums) {
        for(int i = 0; i < nums.size(); i++) {
            if(!flag) {
                s += to_string(nums[i]);
                flag = true;
            }
            else {
                if(nums[i] - 1 == nums[i - 1]) {
                    sum = 1;
                    if(i == nums.size() - 1) {
                        s += "->";
                        s += to_string(nums[i]);
                        res.push_back(s);
                        s = "";
                    }
                }
                else {
                    if(sum == 0) {
                        res.push_back(s);
                        s = "";
                    } else {
                        sum = 0;
                        s += "->";
                        s += to_string(nums[i - 1]);
                        res.push_back(s);
                        s = "";
                    }
                    i--;
                    flag = false;
                }
            }
        }
        if(!s.empty()) res.push_back(s);
        return res;
    }
};
