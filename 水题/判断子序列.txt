题目难度：EASY

给定字符串 s 和 t ，判断 s 是否为 t 的子序列。
字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。
（例如，"ace"是"abcde"的一个子序列，而"aec"不是）。
进阶：
如果有大量输入的 S，称作 S1, S2, ... , Sk 其中 k >= 10亿，你需要依次检查它们是否为 T 的子序列。
在这种情况下，你会怎样改变代码？
致谢：
特别感谢 @pbrother 添加此问题并且创建所有测试用例。
示例 1：
输入：s = "abc", t = "ahbgdc"
输出：true
示例 2：
输入：s = "axc", t = "ahbgdc"
输出：false
提示：
0 <= s.length <= 100
0 <= t.length <= 10^4
两个字符串都只由小写字符组成。

思路：模拟
暴力遍历如果
进阶：可以用哈希表存给定模板字符串的所有字母出现的位置进哈希表，这样时间复杂度会大大降低从而不必遍历字符串是否为子序列

执行用时：
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗：
6.1 MB
, 在所有 C++ 提交中击败了
90.43%
的用户
(时间完杀！！！空间不错)

上代码：
class Solution {
public:
    int begin = 0;

    bool isSubsequence(string s, string t) {
        for(int i = 0; i < t.size(); i++) if(begin < s.size() && t[i] == s[begin]) begin++;
        return begin == s.size() ? true : false;
    }
};
