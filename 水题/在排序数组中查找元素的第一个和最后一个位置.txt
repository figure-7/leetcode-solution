给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

你的算法时间复杂度必须是 O(log n) 级别。

如果数组中不存在目标值，返回 [-1, -1]。

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]
示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]

思路：利用二分函数查找到第一个位置和最后一个位置的下一个元素下标
注意当前者小于0或后者减一小于0或前者大于后者减一时返回{-1， -1}
此外返回前者和后者减一的数组即可

执行用时 :
4 ms
, 在所有 cpp 提交中击败了
98.99%
的用户
内存消耗 :
10.3 MB
, 在所有 cpp 提交中击败了
80.30%
的用户
（C++四行，无敌了，双杀）

上代码：
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int begin = lower_bound(nums.begin(), nums.end(), target) - nums.begin();
        int end = upper_bound(nums.begin(), nums.end(), target) - nums.begin();
        if(begin < 0 || (end - 1) < 0 || begin > (end - 1)) return {-1,-1};
        return {begin, end - 1};
    }
};