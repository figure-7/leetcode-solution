题目难度：MEDIUM

给定一棵二叉树的根 root，请你考虑它所有 从根到叶的路径：

从根到任何叶的路径。

（所谓一个叶子节点，就是一个没有子节点的节点）

假如通过节点 node 的每种可能的 “根-叶” 路径上值的总和全都小于给定的 limit，则该节点被称之为「不足节点」，需要被删除。

请你删除所有不足节点，并返回生成的二叉树的根。

 

示例 1：


输入：root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1

输出：[1,2,3,4,null,null,7,8,9,null,14]
示例 2：


输入：root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22

输出：[5,4,8,11,null,17,4,7,null,null,null,5]
示例 3：


输入：root = [5,-6,-6], limit = 0
输出：[]
 

提示：

给定的树有 1 到 5000 个节点
-10^5 <= node.val <= 10^5
-10^9 <= limit <= 10^9

思路：树+DFS
主函数调用一次dfs用来遍历每个节点的所有路径
dfs内部初始调用一次DFS（为了判断根节点符不符合条）累加值参数为0，之后再向左右遍历DFS，内部值为和值
都是先初始化bool值为true，DFS用来判断当前节点所有子路径的和，有大于等于给定值的就把bool值赋值false
然后dfs判断DFS结果为true时，把对应子节点赋空，否则就向下DFS，这时和值加上当前节点的值
最后主函数返回根节点即可

执行用时 :
52 ms
, 在所有 C++ 提交中击败了
54.08%
的用户
内存消耗 :
24.3 MB
, 在所有 C++ 提交中击败了
8.77%
的用户
（时间一般，空间炸了）

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool flag = true;
    
    void DFS(TreeNode *node, int limit, int sum) {
        sum += node->val;
        if(node->left == nullptr && node->right == nullptr)
            if(sum >= limit)
                flag = false;
        if(node->left != nullptr)
            DFS(node->left, limit, sum);
        if(node->right != nullptr)
            DFS(node->right, limit, sum);
    }
    
	TreeNode* dfs(TreeNode *t, int limit,int summodtwo) {
        flag = true;
        DFS(t, limit, summodtwo);
        if(flag) {
            t = nullptr;
            return t;
        }
        if(t->left != nullptr) {
            flag = true;
            DFS(t->left, limit, summodtwo + t->val);
            if(flag)
                t->left = nullptr;
            else
                t->left = dfs(t->left, limit, summodtwo + t->val);
        }
        if(t->right != nullptr) {
            flag = true;
            DFS(t->right, limit, summodtwo + t->val);
            if(flag)
                t->right = nullptr;
            else
                t->right = dfs(t->right, limit, summodtwo + t->val);
        }
		return t;
	}
    
    TreeNode* sufficientSubset(TreeNode* root, int limit) {
    	root = dfs(root, limit, 0);
	return root; 
    }
};