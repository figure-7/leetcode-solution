题目难度：MEDIUM

给定一个方形整数数组 A，我们想要得到通过 A 的下降路径的最小和。

下降路径可以从第一行中的任何元素开始，并从每一行中选择一个元素。

在下一行选择的元素和当前行所选元素最多相隔一列。

 

示例：

输入：[[1,2,3],[4,5,6],[7,8,9]]
输出：12
解释：
可能的下降路径有：
[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]
[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]
[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]
和最小的下降路径是 [1,4,7]，所以答案是 12。

 

提示：

1 <= A.length == A[0].length <= 100
-100 <= A[i][j] <= 100

思路：DP
dp[i][j]表示第i行j列的最小路径
初始化dp[0][i] = A[0][i]
DP表达式：dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]) + A[i][0];
          dp[i][j] = min(dp[i - 1][j], min(dp[i - 1][j - 1], dp[i - 1][j + 1])) + A[i][j];
          dp[i][A[i].size() - 1] = min(dp[i - 1][A[i - 1].size() - 1], dp[i - 1][A[i - 1].size() - 2]) + A[i][A[i].size() - 1];
每次计算都取上面符合范围的最小dp值加上当前项数组值
最后遍历数组最后一行对应dp值与结果（初值最大）取最小值
返回结果即可

执行用时 :
24 ms
, 在所有 C++ 提交中击败了
21.35%
的用户
内存消耗 :
8.8 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间不咋地，空间完杀！）

上代码：
class Solution {
public:
    int res = 10005;
    
    int minFallingPathSum(vector<vector<int>>& A) {
        int dp[A.size()][A[0].size()];
        for(int i = 0; i < A[0].size(); i++) dp[0][i] = A[0][i];
        for(int i = 1; i < A.size(); i++) {
            dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]) + A[i][0];
            for(int j = 1; j < A[i].size() - 1; j++) dp[i][j] = min(dp[i - 1][j], min(dp[i - 1][j - 1], dp[i - 1][j + 1])) + A[i][j];
            dp[i][A[i].size() - 1] = min(dp[i - 1][A[i - 1].size() - 1], dp[i - 1][A[i - 1].size() - 2]) + A[i][A[i].size() - 1];
        }
        for(int i = 0; i < A[0].size(); i++) res = min(res, dp[A.size() - 1][i]);  
        return res;
    }
};