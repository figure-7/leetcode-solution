题目难度：EASY

有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。

例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。

如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。

给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。

对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。

 

示例 1：

输入："(()())(())"
输出："()()()"
解释：
输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。
示例 2：

输入："(()())(())(()(()))"
输出："()()()()(())"
解释：
输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
删除每隔部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。
示例 3：

输入："()()"
输出：""
解释：
输入字符串为 "()()"，原语化分解得到 "()" + "()"，
删除每个部分中的最外层括号后得到 "" + "" = ""。
 

提示：

S.length <= 10000
S[i] 为 "(" 或 ")"
S 是一个有效括号字符串

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-outermost-parentheses
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

思路：模拟
遍历给定字符串，之后分一下四种情况：
1：当前字符为'('，如果'('次数为0，那么次数加一
2：当前字符为'('，如果'('次数大于0，那么次数加一，然后字符入数组
3：当前字符为')'，如果'('次数大于1，那么次数减一，然后字符入数组
4：当前字符为')'，如果'('次数为1，那么次数减一

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
92.92%
的用户
内存消耗 :
9.4 MB
, 在所有 C++ 提交中击败了
12.04%
的用户
（时间很好，空间不咋地）

上代码：
class Solution {
public:
    vector<char> s;
    string res = "";
    int cnt = 0;
    
    string removeOuterParentheses(string S) {
        for(int i = 0; i < S.size(); i++) {
            if(S[i] == '(' && cnt == 0)
                cnt++;
            else if(S[i] == '(') {
                s.push_back(S[i]);
                cnt++;
            } else if(S[i] == ')' &&cnt > 1) {
                s.push_back(S[i]);
                cnt--;
            } else
                cnt--;
        }
        for(char c : s)
            res += c;
        return res;
    }
};