题目难度：MEDIUM

给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列。

一个字符串的 子序列 是指这样一个新的字符串：
它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。
例如，"ace" 是 "abcde" 的子序列，但 "aec" 不是 "abcde" 的子序列。
两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。

若这两个字符串没有公共子序列，则返回 0。

 

示例 1:

输入：text1 = "abcde", text2 = "ace" 
输出：3  
解释：最长公共子序列是 "ace"，它的长度为 3。
示例 2:

输入：text1 = "abc", text2 = "abc"
输出：3
解释：最长公共子序列是 "abc"，它的长度为 3。
示例 3:

输入：text1 = "abc", text2 = "def"
输出：0
解释：两个字符串没有公共子序列，返回 0。
 

提示:

1 <= text1.length <= 1000
1 <= text2.length <= 1000
输入的字符串只含有小写英文字符。

思路：DP
直接套入LCS的ACM模板，返回结果长度即可

执行用时 :
44 ms
, 在所有 C++ 提交中击败了
6.01%
的用户
内存消耗 :
21.2 MB
, 在所有 C++ 提交中击败了
5.08%
的用户
（时空都炸了...）

上代码：
class Solution {
public:
    int lcs(string str1, string str2, vector<vector<int>>& vec) {
        int len1 = str1.size();
        int len2 = str2.size();
        vector<vector<int>> c(len1 + 1, vector<int>(len2 + 1, 0));
        for (int i = 0; i <= len1; i++) {
            for (int j = 0; j <= len2; j++) {
                if (i == 0 || j == 0) {
                    c[i][j] = 0;
                }
                else if (str1[i - 1] == str2[j - 1]) {
                    c[i][j] = c[i - 1][j - 1] + 1;
                    vec[i][j] = 0;
                }
                else if (c[i - 1][j] >= c[i][j - 1]) {
                    c[i][j] = c[i - 1][j];
                    vec[i][j] = 1;
                }
                else {
                    c[i][j] = c[i][j - 1];
                    vec[i][j] = 2;
                }
            }
        }

        return c[len1][len2];
    }
    
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>> vec(text1.size() + 1, vector<int>(text2.size() + 1, -1));
        int result = lcs(text1, text2, vec);
        return result;
    }
};