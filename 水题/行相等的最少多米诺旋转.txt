题目难度：MEDIUM

在一排多米诺骨牌中，A[i] 和 B[i] 分别代表第 i 个多米诺骨牌的上半部分和下半部分。

（一个多米诺是两个从 1 到 6 的数字同列平铺形成的 —— 该平铺的每一半上都有一个数字。）

我们可以旋转第 i 张多米诺，使得 A[i] 和 B[i] 的值交换。

返回能使 A 中所有值或者 B 中所有值都相同的最小旋转次数。

如果无法做到，返回 -1.

 

示例 1：



输入：A = [2,1,2,4,2,2], B = [5,2,6,2,3,2]
输出：2
解释：
图一表示：在我们旋转之前， A 和 B 给出的多米诺牌。
如果我们旋转第二个和第四个多米诺骨牌，我们可以使上面一行中的每个值都等于 2，如图二所示。
示例 2：

输入：A = [3,5,1,2,3], B = [3,6,3,3,4]
输出：-1
解释：
在这种情况下，不可能旋转多米诺牌使一行的值相等。
 

提示：

1 <= A[i], B[i] <= 6
2 <= A.length == B.length <= 20000

思路：模拟
先取结果为最大，初始化两个bool变量为true
先取两个数组第一个元素，遍历数组判断前面两个元素是否在每个下标都有（如果是多米诺那么形成多米诺的数字不是A[0]就是B[0]）
否则把对应的布尔值置false，然后把布尔值为true对应的数组值放入建立的一个数组中
遍历该数组，分别判断再AB中有多少与当前数组元素不一致的数取最小（形成多米诺的最少改变次数）（WA点：忘了两个数组都要算...）
最后返回三元运算符，如果是初始化的值返回-1（无法形成多米诺），否则的返回当前值即可

执行用时 :
180 ms
, 在所有 C++ 提交中击败了
14.47%
的用户
内存消耗 :
105.6 MB
, 在所有 C++ 提交中击败了
5.09%
的用户
（时间不咋地，空间炸了）

上代码：
class Solution {
public:
    bool flaga = true, flagb = true;
    vector<int> curr;
    int res = 20005;
    
    int minDominoRotations(vector<int>& A, vector<int>& B) {
        int n = A.size();
        int cur = A[0], curmodtwo = B[0];
        for(int i = 1; i < A.size(); i++) {
            if(A[i] != cur && B[i] != cur)
                flaga = false;
            if(A[i] != curmodtwo && B[i] != curmodtwo)
                flagb = false;
        }
        if(flaga)
            curr.push_back(cur);
        if(flagb)
            curr.push_back(curmodtwo);
        for(int i = 0; i < curr.size(); i++) {
            int cnt = 0;
            for(int j = 0; j < A.size(); j++)
                if(A[j] != curr[i])
                    cnt++;
            cnt = min(cnt, n - cnt);
            res = min(cnt, res);
            cnt = 0;
            for(int j = 0; j < B.size(); j++)
                if(B[j] != curr[i])
                    cnt++;
            cnt = min(cnt, n - cnt);
            res = min(cnt, res);
        }
        return res == 20005 ? -1 : res;
    }
};