题目难度：MEDIUM

给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。

请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。

示例 1:

输入: 1->2->3->4->5->NULL
输出: 1->3->5->2->4->NULL
示例 2:

输入: 2->1->3->5->6->4->7->NULL 
输出: 2->3->6->7->1->5->4->NULL
说明:

应当保持奇数节点和偶数节点的相对顺序。
链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。

思路：利用SlidingWindow双指针的方法，建立快慢指针
快指针初值为第二个节点的值，慢指针初值为第一个节点的值，并将慢指针的值存入数组
一次遍历，快指针每次走两步，慢指针每次走一步，每次把快指针的值给慢指针，并判断快指针有无下一个节点
有的话就把值入数组，并且累计走两步，否则慢指针走一步直接退出遍历
结束后从慢指针开始一步一步分别按顺序赋值为数组的值，最后返回原链表即可

执行用时 :
12 ms
, 在所有 cpp 提交中击败了
99.69%
的用户
内存消耗 :
9.5 MB
, 在所有 cpp 提交中击败了
87.43%
的用户
（时间最速，空间居然也不错，NICE！）

上代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> slowr;
    
    ListNode* oddEvenList(ListNode* head) {
        if(head == nullptr || head->next == nullptr) return head;
        ListNode* fast = head->next->next;
        ListNode* slow = head->next;
        slowr.push_back(slow->val);
        while(fast != nullptr && slow != nullptr) {
            slow->val = fast->val;
            fast = fast->next;
            if(fast != nullptr) {
                slowr.push_back(fast->val);
                fast = fast->next;
            } else  {
                slow = slow->next;
                break;
            }
            slow = slow->next;
        }
        int i = 0;
        while(slow != nullptr && i < slowr.size()) {
            cout<<slowr[i];
            slow->val = slowr[i];
            i++;
            slow = slow->next;
        }
        return head;
    }
};