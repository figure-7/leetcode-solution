题目难度：MEDIUM

你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：
写出一个秘密数字，并请朋友猜这个数字是多少。
朋友每猜测一次，你就会给他一个包含下述信息的提示：
猜测数字中有多少位属于数字和确切位置都猜对了（称为 "Bulls"，公牛），
有多少位属于数字猜对了但是位置不对（称为 "Cows"，奶牛）。
也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。
给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。
提示的格式为 "xAyB" ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。
请注意秘密数字和朋友猜测的数字都可能含有重复数字。
示例 1：
输入：secret = "1807", guess = "7810"
输出："1A3B"
解释：数字和位置都对（公牛）用 '|' 连接，数字猜对位置不对（奶牛）的采用斜体加粗标识。
"1807"
  |
"7810"
示例 2：
输入：secret = "1123", guess = "0111"
输出："1A1B"
解释：数字和位置都对（公牛）用 '|' 连接，数字猜对位置不对（奶牛）的采用斜体加粗标识。
"1123"        "1123"
  |      or     |
"0111"        "0111"
注意，两个不匹配的 1 中，只有一个会算作奶牛（数字猜对位置不对）。
通过重新排列非公牛数字，其中仅有一个 1 可以成为公牛数字。
提示：
1 <= secret.length, guess.length <= 1000
secret.length == guess.length
secret 和 guess 仅由数字组成

思路：哈希表
遍历给定第一个字符串
如果给定第一个字符串的字符等于给定第二个字符串的字符，那么累加值1加一
否则存进哈希表（值为字符出现次数）
遍历给定第二个字符串
如果给定第一个字符串的字符不等于给定第二个字符串的字符，并且哈希表里有当前字符，并且哈希表对应值不为0，那么哈希表对应值减一，累加值2加一
最后返回结果字符串格式为累加值1转字符串加A加累加值2转字符串加B即可
（WA点：算法错误）

执行用时：
4 ms
, 在所有 C++ 提交中击败了
75.23%
的用户
内存消耗：
6.4 MB
, 在所有 C++ 提交中击败了
60.50%
的用户
（时间不错，空间一般）

上代码：
class Solution {
public:
    unordered_map<char, int> map;
    int a = 0, b = 0;

    string getHint(string secret, string guess) {
        for(int i = 0; i < secret.size(); i++) {
            if(secret[i] == guess[i]) a++;
            else {
                if(map.find(secret[i]) == map.end()) map[secret[i]] = 1;
                else map[secret[i]]++;
            }
        }
        for(int i = 0; i < secret.size(); i++) {
            if(secret[i] != guess[i]) {
                if(map.find(guess[i]) != map.end() && map[guess[i]] != 0) {
                    map[guess[i]]--;
                    b++;
                }
            }
        }
        string res = to_string(a);
        res += "A";
        res += to_string(b);
        return res + "B";
    }
};
