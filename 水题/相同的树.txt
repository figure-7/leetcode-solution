题目难度：EASY
给定两个二叉树，编写一个函数来检验它们是否相同。

如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。

示例 1:

输入:       1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

输出: true
示例 2:

输入:      1          1
          /           \
         2             2

        [1,2],     [1,null,2]

输出: false
示例 3:

输入:       1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

输出: false
思路：这题没什么，直接两棵树同时遍历比较值就完了
上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        return isSame(p,q);
    }
    bool isSame(TreeNode* a, TreeNode* b) {
        if(a == NULL && b != NULL) {
            return false;
        }
        if(b == NULL && a != NULL) {
            return false;
        }
        if(b == NULL && a == NULL) {
            return true;
        }
        bool same1 = a->val == b->val;
        if(!same1) {
            return false;
        }
        bool same2 = isSame(a->left, b->left);
        bool same3 = isSame(a->right, b->right);
        return same1 && same2 &&same3;
    }
};