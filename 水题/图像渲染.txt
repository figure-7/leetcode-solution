题目难度：EASY

有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。

给你一个坐标 (sr, sc) 表示图像渲染开始的像素值（行 ，列）和一个新的颜色值 newColor，让你重新上色这幅图像。

为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，……，重复该过程。
将所有有记录的像素点的颜色值改为新的颜色值。

最后返回经过上色渲染后的图像。

示例 1:

输入: 
image = [[1,1,1],[1,1,0],[1,0,1]]
sr = 1, sc = 1, newColor = 2
输出: [[2,2,2],[2,2,0],[2,0,1]]
解析: 
在图像的正中间，(坐标(sr,sc)=(1,1)),
在路径上所有符合条件的像素点的颜色都被更改成2。
注意，右下角的像素没有更改为2，
因为它不是在上下左右四个方向上与初始点相连的像素点。
注意:

image 和 image[0] 的长度在范围 [1, 50] 内。
给出的初始点将满足 0 <= sr < image.length 和 0 <= sc < image[0].length。
image[i][j] 和 newColor 表示的颜色值在范围 [0, 65535]内。

思路：BFS+队列
完全就是基本的BFS模板，四象封印，带上布尔数组
注意pair类型的使用，返回计算后原数组即可
（做过很多遍了不细说，不过最开始审错题了WA了一发，，，）

执行用时 :
40 ms
, 在所有 cpp 提交中击败了
21.43%
的用户
内存消耗 :
12.1 MB
, 在所有 cpp 提交中击败了
27.49%
的用户
（这效率。。啊♂？双高）

上代码：
class Solution {
public:
    vector<vector<int>> directs = {{-1,0}, {1,0}, {0,1}, {0,-1}};
    
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        vector<vector<bool>> vis(55, vector<bool>(55, false));
        queue<pair<int, int>> q;
        int result = image[sr][sc];
        q.push(make_pair(sr, sc));
        while(!q.empty()) {
            cout<<q.size();
            int x = q.front().first;
            int y = q.front().second;
            image[x][y] = newColor;
            q.pop();
            vis[x][y] = true;
            for(int i = 0; i < directs.size(); i++) {
                int dx = x + directs[i][0];
                int dy = y + directs[i][1];
                if(dx >= 0 && dx < image.size() && dy >= 0 && dy < image[0].size() && image[dx][dy] == result && !vis[dx][dy])
                    q.push(make_pair(dx, dy));
            }
        }
        return image;
    }
};