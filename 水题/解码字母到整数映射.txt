题目难度：EASY

给你一个字符串 s，它由数字（'0' - '9'）和 '#' 组成。
我们希望按下述规则将 s 映射为一些小写英文字符：

字符（'a' - 'i'）分别用（'1' - '9'）表示。
字符（'j' - 'z'）分别用（'10#' - '26#'）表示。 
返回映射之后形成的新字符串。

题目数据保证映射始终唯一。

 

示例 1：

输入：s = "10#11#12"
输出："jkab"
解释："j" -> "10#" , "k" -> "11#" , "a" -> "1" , "b" -> "2".
示例 2：

输入：s = "1326#"
输出："acz"
示例 3：

输入：s = "25#"
输出："y"
示例 4：

输入：s = "12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#"
输出："abcdefghijklmnopqrstuvwxyz"
 

提示：

1 <= s.length <= 1000
s[i] 只包含数字（'0'-'9'）和 '#' 字符。
s 是映射始终存在的有效字符串。

思路：周赛第一题，模拟
逆序遍历，找到'#'就去遍历前两个字符，得到数值结果存进结果数组里
否则就遍历一个字符得到的数字存进结果数组即可
（今天疯狂看错题，一看是还以为0-9后面页有'#'就直接单纯按'#'分割了，笨了，10分钟。。）

上代码;
class Solution {
public:
    int sum = 0;
    char aim[26] ={'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
    string res = "";
    
    string freqAlphabets(string s) {
        for(int i = s.length() - 1; i >= 0; i--) {
            if(s[i] == '#') {
                i--;
                sum += s[i] - '0';
                i--;
                sum += 10 * (s[i] - '0');
                res += aim[sum - 1];
                sum = 0;
            }
            else{
                res += aim[s[i] - '0' - 1];
            }
        }
        reverse(res.begin(), res.end());
        return res;
    }
};