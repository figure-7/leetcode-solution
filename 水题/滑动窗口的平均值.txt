题目难度：EASY

给定一个整数数据流和一个窗口大小，根据该滑动窗口的大小，计算滑动窗口里所有数字的平均值。
实现 MovingAverage 类：
MovingAverage(int size) 用窗口大小 size 初始化对象。
double next(int val) 成员函数 next 每次调用的时候都会往滑动窗口增加一个整数，请计算并返回数据流中最后 size 个值的移动平均值，即滑动窗口里所有数字的平均值。
示例：
输入：
inputs = ["MovingAverage", "next", "next", "next", "next"]
inputs = [[3], [1], [10], [3], [5]]
输出：
[null, 1.0, 5.5, 4.66667, 6.0]
解释：
MovingAverage movingAverage = new MovingAverage(3);
movingAverage.next(1); // 返回 1.0 = 1 / 1
movingAverage.next(10); // 返回 5.5 = (1 + 10) / 2
movingAverage.next(3); // 返回 4.66667 = (1 + 10 + 3) / 3
movingAverage.next(5); // 返回 6.0 = (10 + 3 + 5) / 3
提示：
1 <= size <= 1000
-105 <= val <= 105
最多调用 next 方法 104 次

思路：设计问题+队列
MovingAverage：继承长度值作为队列空间
next：如果队列值个数小于队列空间，返回队列值和除以队列长度即可
否则队列出队一次，新值入队，返回队列值和处理队列长度即可

执行用时：
12 ms
, 在所有 C++ 提交中击败了
99.06%
的用户
内存消耗：
13.6 MB
, 在所有 C++ 提交中击败了
49.21%
的用户
（时间绝杀！空间一般）

上代码：
class MovingAverage {
public:
    int len = 0, sum = 0;
    queue<int> q;

    /** Initialize your data structure here. */
    MovingAverage(int size) {
        len = size;
    }
    
    double next(int val) {
        if(q.size() < len) {
            q.push(val);
            sum += val;
            return (double)sum / (double)q.size();
        }
        int cur = q.front();
        q.pop();
        q.push(val);
        sum -= cur;
        sum += val;
        return (double)sum / (double)len;
    }
};

/**
 * Your MovingAverage object will be instantiated and called as such:
 * MovingAverage* obj = new MovingAverage(size);
 * double param_1 = obj->next(val);
 */