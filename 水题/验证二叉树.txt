题目难度：MEDIUM

二叉树上有 n 个节点，按从 0 到 n - 1 编号，其中节点 i 的两个子节点分别是 leftChild[i] 和 rightChild[i]。

只有 所有 节点能够形成且 只 形成 一颗 有效的二叉树时，返回 true；

否则返回 false。

如果节点 i 没有左子节点，那么 leftChild[i] 就等于 -1。

右子节点也符合该规则。

注意：节点没有值，本问题中仅仅使用节点编号。

 

示例 1：



输入：n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]
输出：true
示例 2：



输入：n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]
输出：false
示例 3：



输入：n = 2, leftChild = [1,0], rightChild = [-1,-1]
输出：false
示例 4：



输入：n = 6, leftChild = [1,-1,-1,4,-1,-1], rightChild = [2,-1,-1,5,-1,-1]
输出：false
 

提示：

1 <= n <= 10^4
leftChild.length == rightChild.length == n
-1 <= leftChild[i], rightChild[i] <= n - 1

思路：周赛第二题，树
先把每个节点的左右位置情况分别进左右数组中，同时判断如果左子节点等于给定左节点数组的长度或者右子节点等于给定右节点数组的长度时返回false（会形成环）
然后遍历节点数下标对应数组，如果当前节点在两个数组中的值都不为0，就返回false（当前节点即使左子节点又是右子节点，是不可能的）
记录节点在两个数组中的值都为0的节点数，如果大于1了就返回false（两个节点都不是左子节点或右子节点就无法在一棵树上了，因为一棵树只有根节点没有父节点）
此外就都符合条件了，返回true即可

上代码：
class Solution {
public:
    int left = 0, right = 0, sum = 0;
    
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {
        int curra[n] = {0}, currb[n] = {0};
        for(int i = 0; i < leftChild.size(); i++) {
            if(leftChild[i] != -1) {
                left++;
                curra[leftChild[i]] = 1;
            }
            if(rightChild[i] != -1) {
                right++;
                currb[rightChild[i]] = 1;
            }
        }
        if(left == leftChild.size() || right == rightChild.size())
            return false;
        for(int i = 0; i < n; i++) {
            if(curra[i] != 0 && currb[i] != 0)
                return false;
            if(curra[i] == 0 && currb[i] == 0)
                sum++;
            if(sum > 1)
                return false;
        }
        return true;
    }
};