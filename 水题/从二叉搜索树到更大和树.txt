题目难度：MEDIUM

给出二叉搜索树的根节点，该二叉树的节点值各不相同，修改二叉树，使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。

提醒一下，二叉搜索树满足下列约束条件：

节点的左子树仅包含键小于节点键的节点。
节点的右子树仅包含键大于节点键的节点。
左右子树也必须是二叉搜索树。
 

示例：



输入：[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
输出：[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
 

提示：

树中的节点数介于 1 和 100 之间。
每个节点的值介于 0 和 100 之间。
给定的树为二叉搜索树。

思路：树+DFS
DFS两边，第一遍将所有节点的值保存进数组中
第二遍遍历所有节点，内保部先遍历数组取所有大于当前节点的节点值和
然后把结果更新给当前节点，最后返回根节点即可

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
24.01%
的用户
内存消耗 :
10.4 MB
, 在所有 C++ 提交中击败了
5.22%
的用户
（时间不咋地，空间炸了）

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> curr;
    
    void DFS(TreeNode* node) {
        curr.push_back(node->val);
        if(node->left != nullptr)
            DFS(node->left);
        if(node->right != nullptr)
            DFS(node->right);
    }
    
    void dfs(TreeNode* node) {
        int cur = 0;
        for(int i = 0; i < curr.size(); i++)
            if(curr[i] >= node->val)
                cur += curr[i];
        node->val = cur;
        if(node->left != nullptr)
            dfs(node->left);
        if(node->right != nullptr)
            dfs(node->right);
    }
    
    TreeNode* bstToGst(TreeNode* root) {
        DFS(root);
        dfs(root);
        return root;
    }
};