题目难度：EASY

给你一个正整数 num 。
你可以交换 num 中 奇偶性 相同的任意两位数字（即，都是奇数或者偶数）。
返回交换 任意 次之后 num 的 最大 可能值。
示例 1：
输入：num = 1234
输出：3412
解释：交换数字 3 和数字 1 ，结果得到 3214 。
交换数字 2 和数字 4 ，结果得到 3412 。
注意，可能存在其他交换序列，但是可以证明 3412 是最大可能值。
注意，不能交换数字 4 和数字 1 ，因为它们奇偶性不同。
示例 2：
输入：num = 65875
输出：87655
解释：交换数字 8 和数字 6 ，结果得到 85675 。
交换数字 5 和数字 7 ，结果得到 87655 。
注意，可能存在其他交换序列，但是可以证明 87655 是最大可能值。
提示：
1 <= num <= 109

思路：周赛第一题（21min4s），模拟
分两个数组记录给定数值奇数和偶数
遍历数值将每一位对应奇偶数变为相应数组中排序好的值
最后返回遍历后得到的结果值即可
（好吧，
我就是
懒得写
太多
麻烦的
步骤）
（CE点：这题有毛病！返回是INT，过程中最大的值就是返回值了，结果爆INT？？？）

上代码：
class Solution {
public:
    long long res = 0, aim = 1;
    vector<int> curra, currb;
    
    int largestInteger(int num) {
        int sum = num;
        while(num > 0) {
            int cur = num % 10;
            if(cur % 2 == 0) curra.push_back(cur);
            else currb.push_back(cur);
            num /= 10;
        }
        sort(curra.begin(), curra.end());
        sort(currb.begin(), currb.end());
        int i = 0, j = 0;
        while(sum > 0) {
            int cur = sum % 10;
            if(cur % 2 == 0) {
                long long siz = aim * curra[i];
                res += siz;
                i++;
            } else {
                long long siz = aim * currb[j];
                res += siz;
                j++;
            }
            aim *= 10;
            sum /= 10;
        }
        return res;
    }
};