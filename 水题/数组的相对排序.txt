题目难度：EASY

给你两个数组，arr1 和 arr2，

arr2 中的元素各不相同
arr2 中的每个元素都出现在 arr1 中
对 arr1 中的元素进行排序，使 arr1 中项的相对顺序和 arr2 中的相对顺序相同。
未在 arr2 中出现过的元素需要按照升序放在 arr1 的末尾。

 

示例：

输入：arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
输出：[2,2,2,1,4,3,3,9,6,7,19]
 

提示：

arr1.length, arr2.length <= 1000
0 <= arr1[i], arr2[i] <= 1000
arr2 中的元素 arr2[i] 各不相同
arr2 中的每个元素 arr2[i] 都出现在 arr1 中

思路：模拟
先遍历一次第一个数组将值存进哈希表，哈希表值为个数
然后遍历第二个数组，如果哈希表有对应值就将对应次数个值放入结果数组中
然后遍历第一个数组，将没有用掉的哈希表个数个值放过如临时数组中，并排序
遍历一次临时数组，将值插入结果数组末尾，返回结果数组即可

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
59.79%
的用户
内存消耗 :
9.4 MB
, 在所有 C++ 提交中击败了
5.17%
的用户
（时间一般，空间炸了）

上代码：
class Solution {
public:
    unordered_map<int, int> map;
    vector<int> curr, res;
    
    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {
        for(int i = 0; i < arr1.size(); i++) {
            if(map.find(arr1[i])== map.end())
                map[arr1[i]] = 1;
            else
                map[arr1[i]]++;
        }
        for(int i = 0; i < arr2.size(); i++) {
            if(map.find(arr2[i]) != map.end()) {
                while(map[arr2[i]] != 0) {
                    res.push_back(arr2[i]);
                    map[arr2[i]]--;
                }
            }
        }
        for(int i = 0; i < arr1.size(); i++) {
            while(map[arr1[i]] != 0) {
                curr.push_back(arr1[i]);
                map[arr1[i]]--;
            }
        }
        sort(curr.begin(), curr.end());
        for(int i = 0; i < curr.size(); i++)
            res.push_back(curr[i]);
        return res;
    }
};