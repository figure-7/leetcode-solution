题目难度：EASY

给你两个整数 left 和 right ，在闭区间 [left, right] 范围内，统计并返回 计算置位位数为质数 的整数个数。
计算置位位数 就是二进制表示中 1 的个数。
例如， 21 的二进制表示 10101 有 3 个计算置位。
示例 1：
输入：left = 6, right = 10
输出：4
解释：
6 -> 110 (2 个计算置位，2 是质数)
7 -> 111 (3 个计算置位，3 是质数)
9 -> 1001 (2 个计算置位，2 是质数)
10-> 1010 (2 个计算置位，2 是质数)
共计 4 个计算置位为质数的数字。
示例 2：
输入：left = 10, right = 15
输出：5
解释：
10 -> 1010 (2 个计算置位, 2 是质数)
11 -> 1011 (3 个计算置位, 3 是质数)
12 -> 1100 (2 个计算置位, 2 是质数)
13 -> 1101 (3 个计算置位, 3 是质数)
14 -> 1110 (3 个计算置位, 3 是质数)
15 -> 1111 (4 个计算置位, 4 不是质数)
共计 5 个计算置位为质数的数字。
提示：
1 <= left <= right <= 106
0 <= right - left <= 104

思路：模拟
遍历给定区间，得到每个遍历的数值的二进制中1的个数
套素数模板，如果1的个数为素数就把结果值（初值0）加一
最后返回结果值即可

执行用时：
8 ms
, 在所有 C++ 提交中击败了
65.03%
的用户
内存消耗：
5.8 MB
, 在所有 C++ 提交中击败了
75.96%
的用户
（时间一般，空间不错）

上代码：
class Solution {
public:
    int res = 0;
    
    bool su(int a){
        if(a == 1) return 0;
        if(a == 2 || a == 3) return 1;
        if(a % 6 != 1 && a % 6 != 5) return 0;
        int temp = sqrt(a);
        for(int i = 5; i <= temp; i += 6) if(a % i == 0 || a % (i + 2) == 0) return 0;
        return 1;
    }
    
    int countPrimeSetBits(int left, int right) {
        for(int i = left; i <= right; i++) {
            int cur = 0, siz = i;
            while(siz > 0) {
                cur += siz % 2;
                siz /= 2;
            }
            bool flag = su(cur);
            if(flag) res++;
        }
        return res;
    }
};
