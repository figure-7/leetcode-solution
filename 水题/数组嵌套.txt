题目难度：MEDIUM

索引从0开始长度为N的数组A，包含0到N - 1的所有整数。
找到最大的集合S并返回其大小，其中 S[i] = {A[i], A[A[i]], A[A[A[i]]], ... }且遵守以下的规则。
假设选择索引为i的元素A[i]为S的第一个元素，S的下一个元素应该是A[A[i]]，之后是A[A[A[i]]]... 
以此类推，不断添加直到S出现重复的元素。
示例 1:
输入: A = [5,4,0,3,1,6,2]
输出: 4
解释: 
A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.
其中一种最长的 S[K]:
S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}
提示：
N是[1, 20,000]之间的整数。
A中不含有重复的元素。
A中的元素大小在[0, N-1]之间。

思路：哈希表
遍历数组，内部二维遍历按照题目规则
将见到的数组值存进哈希表，内部遍历条件为如果哈希表存在当前值或者当前下标数组值超出数组范围则结束
每次二维遍历取累计次数，内部遍历结束取次数与结果值（初值0）的最大值给结果值
最后返回结果值即可
（TLE点：暴力二维遍历所有值）

执行用时：
280 ms
, 在所有 C++ 提交中击败了
19.12%
的用户
内存消耗：
136.2 MB
, 在所有 C++ 提交中击败了
14.53%
的用户
（时空都炸了）

上代码：
class Solution {
public:
    int res = 0;
    unordered_map<int, int> map;

    int arrayNesting(vector<int>& nums) {
        for(int i = 0; i < nums.size(); i++) {
            int cur = nums[i], sum = 0;
            while(cur < nums.size() && map.find(cur) == map.end()) {
                map[cur] = 1;
                sum++;
                cur = nums[cur];
            }
            res = max(sum, res);
        }
        return res;
    }
};
