题目难度：MEDIUM

这里有一幅服务器分布图，服务器的位置标识在?m * n?的整数矩阵网格?grid?中，1 表示单元格上有服务器，0 表示没有。


如果两台服务器位于同一行或者同一列，我们就认为它们之间可以进行通信。

请你统计并返回能够与至少一台其他服务器进行通信的服务器的数量。

?



示例 1：



输入：grid = [[1,0],[0,1]]

输出：0

解释：没有一台服务器能与其他服务器进行通信。


示例 2：



输入：grid = [[1,0],[1,1]]

输出：3

解释：所有这些服务器都至少可以与一台别的服务器进行通信。


示例 3：



输入：grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]

输出：4

解释：第一行的两台服务器互相通信，第三列的两台服务器互相通信，但右下角的服务器无法与其他服务器通信。
?


提示：

m == grid.length	
n == grid[i].length	
1 <= m <= 250
	1 <= n <= 250
	grid[i][j] == 0 or 1



思路：首先想到的是BFS，但是不知道咋写好，后来看了一下数据，直接模拟注意剪枝就行了，十多分钟搞定
遍历数组，当前元素如果是1就上下遍历有没有等于1的即可，有就值加一
剪枝只要当横向或纵向找到1了就直接加一退出判断下一个数即可
最后返回结果即可（还是很水的一题，当然数据大的话可能另说）

上代码：
class Solution {
public:
    int res = 0;
    int countServers(vector<vector<int>>& grid) {
        for(int i = 0; i < grid.size(); i++) {
            for(int j = 0; j < grid[i].size(); j++) {
                bool flag = true;
                if(grid[i][j] == 1) {
                    if(flag) {
                        for(int a = 0; a < i; a++) {
                            if(grid[a][j] == grid[i][j]) {
                                res++;
                                flag = false;
                                break;
                            }
                        }
                    }
                    if(flag) {
                        for(int a = i + 1; a < grid.size(); a++) {
                            if(grid[a][j] == grid[i][j]) {
                                res++;
                                flag = false;
                                break;
                            }
                        }
                    }
                    if(flag) {
                        for(int a = 0; a < j; a++) {
                            if(grid[i][a] == grid[i][j]) {
                                res++;
                                flag = false;
                                break;
                            }
                        }
                    }
                    if(flag) {
                        for(int a = j + 1; a < grid[i].size(); a++) {
                            if(grid[i][a] == grid[i][j]) {
                                res++;
                                flag = false;
                                break;
                            }
                        }
                    }
                }
            }
        }
        return res;
    }
};