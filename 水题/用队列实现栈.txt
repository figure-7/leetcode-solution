题目难度：EASY

使用队列实现栈的下列操作：

push(x) -- 元素 x 入栈
pop() -- 移除栈顶元素
top() -- 获取栈顶元素
empty() -- 返回栈是否为空
注意:

你只能使用队列的基本操作-- 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。
你所使用的语言也许不支持队列。 
你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。
你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。

思路：队列
具体跟上一个栈实现队列方法差不多，区别在于top函数要都出队并记录首元素，然后再回带队列中（为了顺序正确）
别的都一样方法即可

执行用时 :
4 ms
, 在所有 cpp 提交中击败了
66.44%
的用户
内存消耗 :
8.8 MB
, 在所有 cpp 提交中击败了
62.19%
的用户
（这个反倒时空都一般了，，，）

上代码：
class MyStack {
public:
    queue<int> q;
    queue<int> qq;
    
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        q.push(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        while(q.size() > 1) {
            qq.push(q.front());
            q.pop();
        }
        int res= q.front();
        q.pop();
        while(!qq.empty()) {
            q.push(qq.front());
            qq.pop();
        }
        return res;
    }
    
    /** Get the top element. */
    int top() {
        while(q.size() > 1) {
            qq.push(q.front());
            q.pop();
        }
        int res = q.front();
        qq.push(q.front());
        q.pop();
        while(!qq.empty()) {
            q.push(qq.front());
            qq.pop();
        }
        return res;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return q.empty() ? true : false;
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */