题目难度：MEDIUM

给你 root1 和 root2 这两棵二叉搜索树。

请你返回一个列表，其中包含 两棵树 中的所有整数并按 升序 排序。.

 

示例 1：



输入：root1 = [2,1,4], root2 = [1,0,3]
输出：[0,1,1,2,3,4]
示例 2：

输入：root1 = [0,-10,10], root2 = [5,1,7,0,2]
输出：[-10,0,0,1,2,5,7,10]
示例 3：

输入：root1 = [], root2 = [5,1,7,0,2]
输出：[0,1,2,5,7]
示例 4：

输入：root1 = [0,-10,10], root2 = []
输出：[-10,0,10]
示例 5：



输入：root1 = [1,null,8], root2 = [8,1]
输出：[1,1,8,8]
 

提示：

每棵树最多有 5000 个节点。
每个节点的值在 [-10^5, 10^5] 之间。

思路：周赛第二题，DFS深搜
直接遍历两个树，然后把各个节点的值放入数组
返回排序后数组即可，水题

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> res;
    
    void DFS(TreeNode* root) {
        res.push_back(root->val);
        if(root->left != nullptr)
            DFS(root->left);
        if(root->right != nullptr)
            DFS(root->right);
        if(root->left == nullptr && root->right == nullptr)
            return;
    }
    
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        if(root1 != nullptr)
            DFS(root1);
        if(root2 != nullptr)
            DFS(root2);
        sort(res.begin(), res.end());
        return res;
    }
};