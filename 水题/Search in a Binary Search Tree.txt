题目难度：EASY

给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 
返回以该节点为根的子树。 
如果节点不存在，则返回 NULL。

例如，

给定二叉搜索树:

        4
       / \
      2   7
     / \
    1   3

和值: 2
你应该返回如下子树:

      2     
     / \   
    1   3
在上述示例中，如果要找的值是 5，但因为没有节点值为 5，我们应该返回 NULL。

思路：二叉搜索树
利用二叉搜索树的特性，当根节点为空是返回nullptr
否则遍历当前值如果等于节点的值就退出循环，大了就取当前节点的右节点，小了就取当前节点的左节点
之前要判断有无左节点或右节点，没有就返回nullptr，函数最后返回当前遍历节点即可

执行用时 :
52 ms
, 在所有 C++ 提交中击败了
79.02%
的用户
内存消耗 :
29.2 MB
, 在所有 C++ 提交中击败了
54.81%
的用户
（时间较好，空间一般，原地，，，迷）

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        if(root == nullptr)
            return nullptr;
        while(root->val != val) {
            if(root->val > val && root->left != nullptr)
                root = root->left;
            else if(root->val < val && root->right != nullptr)
                root = root->right;
            else
                return nullptr;
        }
        return root;
    }
};