题目难度：MEDIUM

给你一个字符串 s ，返回 s 中 长度为 3 的不同回文子序列 的个数。
即便存在多种方法来构建相同的子序列，但相同的子序列只计数一次。
回文 是正着读和反着读一样的字符串。
子序列 是由原字符串删除其中部分字符（也可以不删除）且不改变剩余字符之间相对顺序形成的一个新字符串。
例如，"ace" 是 "abcde" 的一个子序列。
示例 1：
输入：s = "aabca"
输出：3
解释：长度为 3 的 3 个回文子序列分别是：
- "aba" ("aabca" 的子序列)
- "aaa" ("aabca" 的子序列)
- "aca" ("aabca" 的子序列)
示例 2：
输入：s = "adc"
输出：0
解释："adc" 不存在长度为 3 的回文子序列。
示例 3：
输入：s = "bbcbaba"
输出：4
解释：长度为 3 的 4 个回文子序列分别是：
- "bbb" ("bbcbaba" 的子序列)
- "bcb" ("bbcbaba" 的子序列)
- "bab" ("bbcbaba" 的子序列)
- "aba" ("bbcbaba" 的子序列)
提示：
3 <= s.length <= 105
s 仅由小写英文字母组成

思路；周赛第二题（16min36s），模拟
（TLE点：暴力遍历字符串超时）
先建立26空间二维数组
遍历给定字符串保存每个字符的位置，存入二维数组
外部遍历26个数组空间
如果当前数组下标对应内部一维空间有值，那么就去第一个下标对应的数组值跟最后一个下标对应的数组值的区间遍历（也就代表着字符串对应字符之间的最远范围）
建立哈希表用来保存字符是否出现过
遍历两者之间的值（不包括这两者），对应给定字符串的字符如果没出现过，就把当前字符存进哈希表，结果值（初值0）加一
最后返回结果值即可

上代码：
class Solution {
public:
    int res = 0;
    
    int countPalindromicSubsequence(string s) {
        vector<vector<int> > curr(26);
        for(int i = 0; i < s.size(); i++) curr[s[i] - 'a'].push_back(i);
        for(int i = 0; i < 26; i++) {
            if(curr[i].size() != 0) {
                int l = curr[i][0], r = curr[i][curr[i].size() - 1];
                unordered_map<char, int> map;
                for(int j = l + 1; j < r; j++) {
                    if(map.find(s[j]) == map.end()) {
                        map[s[j]] = 1;
                        res++;
                    }
                }
            }
        }
        return res;
    }
};