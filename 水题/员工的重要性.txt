题目难度：EASY

给定一个保存员工信息的数据结构，它包含了员工 唯一的 id ，重要度 和 直系下属的 id 。
比如，员工 1 是员工 2 的领导，员工 2 是员工 3 的领导。
他们相应的重要度为 15 , 10 , 5 。
那么员工 1 的数据结构是 [1, 15, [2]] ，员工 2的 数据结构是 [2, 10, [3]] ，员工 3 的数据结构是 [3, 5, []] 。
注意虽然员工 3 也是员工 1 的一个下属，但是由于 并不是直系 下属，因此没有体现在员工 1 的数据结构中。
现在输入一个公司的所有员工信息，以及单个员工 id ，返回这个员工和他所有下属的重要度之和。
示例：
输入：[[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1
输出：11
解释：
员工 1 自身的重要度是 5 ，他有两个直系下属 2 和 3 ，而且 2 和 3 的重要度均为 3 。
因此员工 1 的总重要度是 5 + 3 + 3 = 11 。
提示：
一个员工最多有一个 直系 领导，但是可以有多个 直系 下属
员工数量不超过 2000 。

思路：结构体+队列
新建队列，一维数组，二维数组分别保存给定员工号，每个员工的重要度，每个员工的下属
当队列不空循环，更新当前给定值为队顶元素
然后当前给定值为下标的二维数组值入队列
再把结果值（初值0）加上当前给定值的一维数组值
最后返回结果值即可

上代码：
/*
// Definition for Employee.
class Employee {
public:
    int id;
    int importance;
    vector<int> subordinates;
};
*/

class Solution {
public:
    queue<int> q;
    int res = 0;
    
    int getImportance(vector<Employee*> employees, int id) {
        q.push(id);
        vector<int> important(2005, 0);
        vector<vector<int> > curr(2005);
        for(int i = 0; i < employees.size(); i++) {
            important[employees[i]->id] = employees[i]->importance;
            for(int j = 0; j < employees[i]->subordinates.size(); j++) curr[employees[i]->id].push_back(employees[i]->subordinates[j]);
        }
        while(!q.empty()) {
            id = q.front();
            for(int i = 0; i < curr[id].size(); i++) q.push(curr[id][i]);
            res += important[id];
            q.pop();
        }
        return res;
    }
};