题目难度：MEDIUM

给你一个有 n 个节点的 有向无环图（DAG），请你找出所有从节点 0 到节点 n-1 的路径并输出（不要求按特定顺序）
二维数组的第 i 个数组中的单元都表示有向图中 i 号节点所能到达的下一些节点，空就是没有下一个结点了。
译者注：有向图是有方向的，即规定了 a→b 你就不能从 b→a 。
示例 1：
输入：graph = [[1,2],[3],[3],[]]
输出：[[0,1,3],[0,2,3]]
解释：有两条路径 0 -> 1 -> 3 和 0 -> 2 -> 3
示例 2：
输入：graph = [[4,3,1],[3,2,4],[3],[4],[]]
输出：[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
示例 3：
输入：graph = [[1],[]]
输出：[[0,1]]
示例 4：
输入：graph = [[1,2,3],[2],[3],[]]
输出：[[0,1,2,3],[0,2,3],[0,3]]
示例 5：
输入：graph = [[1,3],[2],[3],[]]
输出：[[0,1,2,3],[0,3]]
提示：
n == graph.length
2 <= n <= 15
0 <= graph[i][j] < n
graph[i][j] != i（即，不存在自环）
graph[i] 中的所有元素 互不相同
保证输入为 有向无环图（DAG）

思路：BFS+BackTracking
直接套回溯模板，需要设置广搜结束条件为起点与终点相同
最后返回回溯得到的数组即可

执行用时：
192 ms
, 在所有 C++ 提交中击败了
5.11%
的用户
内存消耗：
72.1 MB
, 在所有 C++ 提交中击败了
5.00%
的用户
（时空都炸了）

上代码：
class Solution {
public:
    unordered_map<int, int> mp;
    vector<vector<int> > res;
    vector<int> route;
    
    void BFS(vector<vector<int>> curr, vector<int> aim, unordered_map<int, int> map, int begin, int end) {
        aim.push_back(begin);
        if(begin == end) {
            res.push_back(aim);
            return ;
        }
        for(int i = 0; i < curr[begin].size(); i++) {
            if(map.count(curr[begin][i]) && map[curr[begin][i]] == 1) continue;
            map[curr[begin][i]] = 1;
            BFS(curr, aim, map, curr[begin][i], end);
            map[curr[begin][i]] = 0;
        }
    }
    
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        BFS(graph, route, mp, 0, graph.size() - 1);
        return res;
    }
};