题目难度：MEDIUM

给定一个长度为偶数的整数数组 A，只有对 A 进行重组后可以满足 “对于每个 0 <= i < len(A) / 2，都有 A[2 * i + 1] = 2 * A[2 * i]” 时，返回 true；

否则，返回 false。

 

示例 1：

输入：[3,1,3,6]
输出：false
示例 2：

输入：[2,1,2,6]
输出：false
示例 3：

输入：[4,-2,2,-4]
输出：true
解释：我们可以用 [-2,-4] 和 [2,4] 这两组组成 [-2,-4,2,4] 或是 [2,4,-2,-4]
示例 4：

输入：[1,2,4,16,8,4]
输出：false
 

提示：

0 <= A.length <= 30000
A.length 为偶数
-100000 <= A[i] <= 100000

思路：哈希表
（WA点1，2，3：一开始用的错误模拟方法）
如果数组长度为0返回true
遍历数组，使用哈希表存数组值，值为对应下标值的个数
排序数组
然后遍历，当小于0时且哈希表对应下标值大于0（还有这个数没用）就查找对应数值的/2，有的话就把该值跟对应数值的/2值对应哈希表下标值减一（一个组合被使用）
否则返回false
当大于0时且哈希表对应下标值大于0（还有这个数没用）就查找对应数值的*2，有的话就把该值跟对应数值的*2值对应哈希表下标值减一（一个组合被使用）
否则返回false
遇见0记录次数
最后三元运算符返回0的个数为偶数为true（正好够几对）
否则返回false

执行用时 :
800 ms
, 在所有 C++ 提交中击败了
5.07%
的用户
内存消耗 :
55 MB
, 在所有 C++ 提交中击败了
18.18%
的用户
（时间炸了，空间不咋地）

上代码：
class Solution {
public:
    vector<int> curr, currmodtwo;
    int cnt = 0;
    unordered_map<int, int> map;
    
    bool canReorderDoubled(vector<int>& A) {
        if(A.size() == 0) return true;
        for(int i = 0; i < A.size(); i++) {
            if(map.find(A[i]) != map.end()) map[A[i]]++;
            else map[A[i]] = 1;
        }
        sort(A.begin(), A.end());
        for(int i = 0; i < A.size(); i++) {
            if(A[i] < 0) {
                if(map[A[i]] != 0) {
                    if(map.find(A[i] / 2) != map.end() && map[A[i] / 2] != 0) {
                        map[A[i]]--;
                        map[A[i] / 2]--;
                    } else return false;
                }
            } else if(A[i] > 0){
                if(map[A[i]] != 0) {
                    if(map.find(A[i] * 2) != map.end() && map[A[i] * 2] != 0) {
                        map[A[i]]--;
                        map[A[i] * 2]--;
                    } else return false;
                }
            } else cnt++;
        }
        return cnt % 2 == 0 ? true :false;
    }
};