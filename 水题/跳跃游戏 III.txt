题目难度：MEDIUM

这里有一个非负整数数组 arr，你最开始位于该数组的起始下标 start 处。当你位于下标 i 处时，你可以跳到 i + arr[i] 或者 i - arr[i]。

请你判断自己是否能够跳到对应元素值为 0 的 任意 下标处。

注意，不管是什么情况下，你都无法跳到数组之外。

 

示例 1：

输入：arr = [4,2,3,0,3,1,2], start = 5
输出：true
解释：
到达值为 0 的下标 3 有以下可能方案： 
下标 5 -> 下标 4 -> 下标 1 -> 下标 3 
下标 5 -> 下标 6 -> 下标 4 -> 下标 1 -> 下标 3 
示例 2：

输入：arr = [4,2,3,0,3,1,2], start = 0
输出：true 
解释：
到达值为 0 的下标 3 有以下可能方案： 
下标 0 -> 下标 4 -> 下标 1 -> 下标 3
示例 3：

输入：arr = [3,0,2,1,2], start = 2
输出：false
解释：无法到达值为 0 的下标 1 处。 
 

提示：

1 <= arr.length <= 5 * 10^4
0 <= arr[i] < arr.length
0 <= start < arr.length

思路：周赛第三题，BFS广搜
比较典型的BFS（甚至是简化版），二向封印，每次BFS对当前位置下标加上当前值做为下标以及当前位置下标减去当前值作为下标递归
同时用一个布尔数组辨识当前下标位置是否走过，走过就true，否则false
当超出边界就直接return；如果当前值为0就直接结束BFS并将结果改为true
否则遍历结束返回false
也是水题。。。

上代码：
class Solution {
public:
    bool res = false;
    
    void BFS(vector<int>& arr, int begin, vector<bool> flag) {
        if(begin < 0 || begin >= arr.size())
            return;
        if(arr[begin] == 0) {
            res = true;
            return;
        }
        if(!flag[begin]) {
            flag[begin] = true;
            BFS(arr, begin + arr[begin], flag);
            BFS(arr, begin - arr[begin], flag);
        }
    }
        
    bool canReach(vector<int>& arr, int start) {
        vector<bool> flag(50005, 0);
        BFS(arr, start, flag);
        return res;
    }
};