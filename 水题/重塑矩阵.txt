题目难度：EASY

在MATLAB中，有一个非常有用的函数 reshape，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。
给出一个由二维数组表示的矩阵，以及两个正整数r和c，分别表示想要的重构的矩阵的行数和列数。
重构后的矩阵需要将原始矩阵的所有元素以相同的行遍历顺序填充。
如果具有给定参数的reshape操作是可行且合理的，则输出新的重塑矩阵；
否则，输出原始矩阵。
示例 1:
输入: 
nums = 
[[1,2],
 [3,4]]
r = 1, c = 4
输出: 
[[1,2,3,4]]
解释:
行遍历nums的结果是 [1,2,3,4]。
新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。
示例 2:
输入: 
nums = 
[[1,2],
 [3,4]]
r = 2, c = 4
输出: 
[[1,2],
 [3,4]]
解释:
没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 
所以输出原矩阵。
注意：
给定矩阵的宽和高范围在 [1, 100]。
给定的 r 和 c 都是正数。

思路：模拟
先判断给定两个数的积是否等于数组值的个数，不等于就返回原数组（需要的值个数与给定数组值的个数不同肯定不能进行重塑）
否则开给定空间数组初始化为0，把原数组重塑到新的数组中即可

执行用时：
12 ms
, 在所有 C++ 提交中击败了
95.37%
的用户
内存消耗：
10.4 MB
, 在所有 C++ 提交中击败了
81.63%
的用户
（时间完杀！空间很好）

上代码：
class Solution {
public:
    int a = 0, b = 0, sum = 0;
    
    vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {
        if(r * c != nums.size() * nums[0].size()) return nums;
        vector<vector<int>> res(r, vector<int>(c, 0));
        for(int i = 0; i < nums.size(); i++) {
            for(int j = 0; j < nums[0].size(); j++) {
                if(sum == c) {
                    a++;
                    b = 0;
                    sum = 0;
                }
                sum++;
                res[a][b] = nums[i][j];
                b++;
            }
        }
        return res;
    }
};