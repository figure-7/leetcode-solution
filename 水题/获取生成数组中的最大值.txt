题目难度：EASY

给你一个整数 n 。
按下述规则生成一个长度为 n + 1 的数组 nums ：
nums[0] = 0
nums[1] = 1
当 2 <= 2 * i <= n 时，nums[2 * i] = nums[i]
当 2 <= 2 * i + 1 <= n 时，nums[2 * i + 1] = nums[i] + nums[i + 1]
返回生成数组 nums 中的 最大 值。
示例 1：
输入：n = 7
输出：3
解释：根据规则：
  nums[0] = 0
  nums[1] = 1
  nums[(1 * 2) = 2] = nums[1] = 1
  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2
  nums[(2 * 2) = 4] = nums[2] = 1
  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3
  nums[(3 * 2) = 6] = nums[3] = 2
  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3
因此，nums = [0,1,1,2,1,3,2,3]，最大值 3
示例 2：
输入：n = 2
输出：1
解释：根据规则，nums[0]、nums[1] 和 nums[2] 之中的最大值是 1
示例 3：
输入：n = 3
输出：2
解释：根据规则，nums[0]、nums[1]、nums[2] 和 nums[3] 之中的最大值是 2
提示：
0 <= n <= 100

思路：模拟
首先给定值等于0和1时分别返回0和1
把0,1放入建立数组中，从2开始到n遍历
每次当前遍历值为偶数就把当前遍历值除二对应下标的数组值放入给定数组
否则把当前遍历值除二对应下标的数组值与当前遍历值除二加一对应下标的数组值放入给定数组
排序后返回数组最后一项即可

执行用时：
4 ms
, 在所有 C++ 提交中击败了
19.77%
的用户
内存消耗：
6.2 MB
, 在所有 C++ 提交中击败了
39.55%
的用户
（时空都不咋地）

上代码：
class Solution {
public:
    vector<int> curr;
    
    int getMaximumGenerated(int n) {
        if(n == 0) return 0;
        curr.push_back(0);
        curr.push_back(1);
        for(int i = 2; i <= n; i++) {
            if(i % 2 == 0) curr.push_back(curr[i / 2]);
            else curr.push_back(curr[i / 2] + curr[i / 2 + 1]);
        }
        sort(curr.begin(), curr.end());
        return n == 1 ? 1 : curr[curr.size() - 1];
    }
};