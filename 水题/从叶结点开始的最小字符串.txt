题目难度：MEDIUM

给定一颗根结点为 root 的二叉树，书中的每个结点都有一个从 0 到 25 的值，分别代表字母 'a' 到 'z'：

值 0 代表 'a'，值 1 代表 'b'，依此类推。

找出按字典序最小的字符串，该字符串从这棵树的一个叶结点开始，到根结点结束。

（小贴士：字符串中任何较短的前缀在字典序上都是较小的：

例如，在字典序上 "ab" 比 "aba" 要小。叶结点是指没有子结点的结点。）

 

示例 1：



输入：[0,1,2,3,4,3,4]
输出："dba"
示例 2：



输入：[25,1,3,1,3,0,2]
输出："adz"
示例 3：



输入：[2,2,1,null,1,0,null,0]
输出："abc"
 

提示：

给定树的结点数介于 1 和 8500 之间。
树中的每个结点都有一个介于 0 和 25 之间的值。

思路：树+DFS
套DFS板子，内部DFS参数字符串加上当前节点对应字符，然后为叶子结点时也要加上当前字符
然后翻转字符串取与结果字符串的最小给结果字符串（初始化数据范围个z，即最大）
最后返回结果字符串即可

执行用时 :
16 ms
, 在所有 C++ 提交中击败了
71.07%
的用户
内存消耗 :
23.6 MB
, 在所有 C++ 提交中击败了
8.77%
的用户
（时间不错，空间炸了，原地...）

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    string res = "";
    
    void DFS(TreeNode* node, string s) {
        if(node->left == nullptr && node->right == nullptr) {
            char ch = node->val + 'a';
            s += ch;
            reverse(s.begin(), s.end());
            res = min(s, res);
            return ;
        }
        if(node->left) {
            char ch = node->val + 'a';
            DFS(node->left, s + ch);
        }
        if(node->right) {
            char ch = node->val + 'a';
            DFS(node->right, s + ch);
        }
    }
    
    string smallestFromLeaf(TreeNode* root) {
        for(int i = 0; i < 8505; i++)
            res += 'z';
        DFS(root, "");
        return res;
    }
};