题目难度：EASY

给你一个下标从 0 开始、严格递增 的整数数组 nums 和一个正整数 diff 。
如果满足下述全部条件，则三元组 (i, j, k) 就是一个 算术三元组 ：
i < j < k ，
nums[j] - nums[i] == diff 且
nums[k] - nums[j] == diff
返回不同 算术三元组 的数目。
示例 1：
输入：nums = [0,1,4,6,7,10], diff = 3
输出：2
解释：
(1, 2, 4) 是算术三元组：7 - 4 == 3 且 4 - 1 == 3 。
(2, 4, 5) 是算术三元组：10 - 7 == 3 且 7 - 4 == 3 。
示例 2：
输入：nums = [4,5,6,7,8,9], diff = 2
输出：2
解释：
(0, 2, 4) 是算术三元组：8 - 6 == 2 且 6 - 4 == 2 。
(1, 3, 5) 是算术三元组：9 - 7 == 2 且 7 - 5 == 2 。
提示：
3 <= nums.length <= 200
0 <= nums[i] <= 200
1 <= diff <= 50
nums 严格 递增

思路：周赛第一题（3min34s），模拟
三维遍历数组所有三目数对，其中前两个数差值等于后两个数差值并且差值等于给定值就把结果值（初值0）加一
最后返回结果值即可

上代码：
class Solution {
public:
    int res = 0;
    
    int arithmeticTriplets(vector<int>& nums, int diff) {
        for(int i = 0; i < nums.size() - 2; i++) for(int j = i + 1; j < nums.size() - 1; j++) for(int k = 0; k < nums.size(); k++) if(nums[k] - nums[j] == nums[j] - nums[i] && nums[j] - nums[i] == diff) res++;
        return res;
    }
};
