题目难度：EASY

在二叉树中，根节点位于深度 0 处，每个深度为 k 的节点的子节点位于深度 k+1 处。

如果二叉树的两个节点深度相同，但父节点不同，则它们是一对堂兄弟节点。

我们给出了具有唯一值的二叉树的根节点 root，以及树中两个不同节点的值 x 和 y。

只有与值 x 和 y 对应的节点是堂兄弟节点时，才返回 true。

否则，返回 false。

 

示例 1：


输入：root = [1,2,3,4], x = 4, y = 3
输出：false
示例 2：


输入：root = [1,2,3,null,4,null,5], x = 5, y = 4
输出：true
示例 3：



输入：root = [1,2,3,null,4], x = 2, y = 3
输出：false
 

提示：

二叉树的节点数介于 2 到 100 之间。
每个节点的值都是唯一的、范围为 1 到 100 的整数。

思路：树+DFS
直接套层数的DFS板子，内部先判断当前节点左右节点都不为空时
如果两个子节点正好值与给定的数相等，就返回false（来自一个父亲）否则判断当前节点等于其中一个给定值时，记录层数
最后如果不来自一个父亲，就三元运算符返回，当两个节点同一层数返回true
否则返回false即可

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int a = -1, b = -1;
    bool flag = true;
    
    void DFS(TreeNode* node, int level, int x, int y) {
        if(node->left != nullptr && node->right != nullptr)
            if((node->left->val == x && node->right->val == y) || (node->left->val == y && node->right->val == x))
                flag = false;
        if(node->val == x)
            a = level;
        if(node->val == y)
            b = level;
        if(a != -1 && b != -1)
            return ;
        if(node->left != nullptr)
            DFS(node->left, level + 1, x, y);
        if(node->right != nullptr)
            DFS(node->right, level + 1, x, y);
    }
    
    bool isCousins(TreeNode* root, int x, int y) {
        DFS(root, 0, x, y);
        if(!flag)
            return false;
        return a == b ? true : false;
    }
};