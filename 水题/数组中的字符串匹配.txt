题目难度：EASY

给你一个字符串数组 words ，数组中的每个字符串都可以看作是一个单词。

请你按 任意 顺序返回 words 中是其他单词的子字符串的所有单词。

如果你可以删除 words[j] 最左侧和/或最右侧的若干字符得到 word[i] ，那么字符串 words[i] 就是 words[j] 的一个子字符串。

 

示例 1：

输入：words = ["mass","as","hero","superhero"]
输出：["as","hero"]
解释："as" 是 "mass" 的子字符串，"hero" 是 "superhero" 的子字符串。
["hero","as"] 也是有效的答案。
示例 2：

输入：words = ["leetcode","et","code"]
输出：["et","code"]
解释："et" 和 "code" 都是 "leetcode" 的子字符串。
示例 3：

输入：words = ["blue","green","bu"]
输出：[]
 

提示：

1 <= words.length <= 100
1 <= words[i].length <= 30
words[i] 仅包含小写英文字母。
题目数据 保证 每个 words[i] 都是独一无二的。

思路：模拟
遍历每个字符串，依次查找数组其余项有没有完全包含该串的字符串
有的话当前串入结果数组，结束内部循环，否则继续
然后注意去除重复元素（WA点，有重复元素）
最后返回结果数组即可

上代码：
class Solution {
public:
    vector<string> res;
    int siz = 0;
    bool flag = false;
    
    vector<string> stringMatching(vector<string>& words) {
        for(int i = 0; i < words.size(); i++) {
            for(int k = 0; k < i; k++) {
                int siz = 0;
                for(int j = 0; j < words[k].size(); j++) {
                    int cur = j;
                    while(words[i][siz] == words[k][j]) {
                        siz++;
                        j++;
                        if(siz == words[i].size()) {
                            res.push_back(words[i]);
                            flag = true;
                            break;
                        }
                        if(j == words[k].size()) break;
                    }
                    j = cur;
                    siz = 0;
                    if(flag) break;
                }
            }
            for(int k = i + 1; k < words.size(); k++) {
                if(flag) break;
                for(int j = 0; j < words[k].size(); j++) {
                    int cur = j;
                    while(words[i][siz] == words[k][j]) {
                        siz++;
                        j++;
                        if(siz == words[i].size()) {
                            res.push_back(words[i]);
                            flag = true;
                            break;
                        }
                        if(j == words[k].size()) break;
                    }
                    j = cur;
                    siz = 0;
                    if(flag) break;
                }
            }
            flag = false;
        }
        sort(res.begin(),res.end());
        res.erase(unique(res.begin(), res.end()), res.end());
        return res;
    }
};