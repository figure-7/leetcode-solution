题目难度：MEDIUM

当 A 的子数组 A[i], A[i+1], ..., A[j] 满足下列条件时，我们称其为湍流子数组：

若 i <= k < j，当 k 为奇数时， A[k] > A[k+1]，且当 k 为偶数时，A[k] < A[k+1]；
或 若 i <= k < j，当 k 为偶数时，A[k] > A[k+1] ，且当 k 为奇数时， A[k] < A[k+1]。
也就是说，如果比较符号在子数组中的每个相邻元素对之间翻转，则该子数组是湍流子数组。

返回 A 的最大湍流子数组的长度。

 

示例 1：

输入：[9,4,2,10,7,8,8,1,9]
输出：5
解释：(A[1] > A[2] < A[3] > A[4] < A[5])
示例 2：

输入：[4,8,12,16]
输出：2
示例 3：

输入：[100]
输出：1
 

提示：

1 <= A.length <= 40000
0 <= A[i] <= 10^9

思路：模拟
直接用一个中间bool变量保存当前增大减小状态即可，数组长度为1返回1，初始化为数组前两项判断
然后遍历数组，初始化和值2，结果值2，分以下5种情况：
1：当前两个值大小关系可以继承上面的状态，和值加一，状态反转
2：同上
3：当前两个值大小关系不可以继承上面的状态，和值改为2，状态改为当前状态
4：同上
5：两个值相等，和值改为1
然后每步结束取结果与和值最大值给结果
最后返回结果即可

执行用时 :
80 ms
, 在所有 C++ 提交中击败了
96.33%
的用户
内存消耗 :
39.5 MB
, 在所有 C++ 提交中击败了
6.45%
的用户
（时间绝杀！空间炸了，原地......）

上代码：
class Solution {
public:
    int res = 1, sum = 2;
    bool flag = true;
    
    int maxTurbulenceSize(vector<int>& A) {
        if(A.size() == 1)
            return 1;
        if(A[1] > A[0])
            flag = false;
        for(int i = 1; i < A.size() - 1; i++) {
            if(!flag && A[i] > A[i + 1]) {
                sum++;
                flag = true;
            } else if(flag && A[i] < A[i + 1]) {
                sum++;
                flag = false;
            } else if(A[i] > A[i + 1]) {
                sum = 2;
                flag = true;
            } else if(A[i] < A[i + 1]) {
                sum = 2;
                flag = false;
            } else
                sum = 1;
            res = max(res, sum);
        }
        return res;
    }
};

思路（补）：该题补充了数据会报错了，只需要在前面判断如果给定数组长度等于二并且两个数组值不相等就返回2即可
（WA点1,2,3：算法错误）美化代码

执行用时：
92 ms
, 在所有 C++ 提交中击败了
86.91%
的用户
内存消耗：
39.3 MB
, 在所有 C++ 提交中击败了
83.45%
的用户
（时空都不错）

上代码：
class Solution {
public:
    int res = 1, sum = 2;
    bool flag = true;
    
    int maxTurbulenceSize(vector<int>& A) {
        if(A.size() == 1) return 1;
        if(A.size() == 2 && A[0] != A[1]) return 2;
        if(A[1] > A[0]) flag = false;
        for(int i = 1; i < A.size() - 1; i++) {
            if(!flag && A[i] > A[i + 1]) {
                sum++;
                flag = true;
            } else if(flag && A[i] < A[i + 1]) {
                sum++;
                flag = false;
            } else if(A[i] > A[i + 1]) {
                sum = 2;
                flag = true;
            } else if(A[i] < A[i + 1]) {
                sum = 2;
                flag = false;
            } else
                sum = 1;
            res = max(res, sum);
        }
        return res;
    }
};
