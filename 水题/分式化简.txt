题目难度：EASY

有一个同学在学习分式。

他需要将一个连分数化成最简分数，你能帮助他吗？



连分数是形如上图的分式。

在本题中，所有系数都是大于等于0的整数。

 

输入的cont代表连分数的系数（cont[0]代表上图的a0，以此类推）。
返回一个长度为2的数组[n, m]，使得连分数的值等于n / m，且n, m最大公约数为1。

 

示例 1：

输入：cont = [3, 2, 0, 2]
输出：[13, 4]
解释：原连分数等价于3 + (1 / (2 + (1 / (0 + 1 / 2))))。
注意[26, 8], [-13, -4]都不是正确答案。
示例 2：

输入：cont = [0, 0, 3]
输出：[3, 1]
解释：如果答案是整数，令分母为1即可。
限制：

cont[i] >= 0
1 <= cont的长度 <= 10
cont最后一个元素不等于0
答案的n, m的取值都能被32位int整型存下（即不超过2 ^ 31 - 1）。

思路：LCP第二题，模拟
（四个月前的秋季赛，很可惜漏了一种情况结果没过。。。）
就加了两行判断单个值的结果然后正常思路没想了

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
68.59%
的用户
内存消耗 :
8.7 MB
, 在所有 C++ 提交中击败了
5.03%
的用户
（时间一般，空间炸了）

上代码：
class Solution {
public:
    vector<int> fraction(vector<int>& cont) {
        vector<int> res;
        if(cont.size() == 1)
            return {cont[0], 1};
        int zi = 1;
        int mu = cont[cont.size()-1];
        if(cont.size() == 1) {
            res.push_back(zi);
            res.push_back(mu);
            return res;
        }
        for(int i = cont.size()-2; i>=0; i--) {
            zi = zi+cont[i]*mu;
            int temp = mu;
            mu = zi;
            zi = temp;
        }
        int aim = measure(mu,zi);
        if(aim!=1) {
            res.push_back(mu/aim);
            res.push_back(zi/aim);
        }
        else {
            res.push_back(mu);
            res.push_back(zi);
        }
        return res;
    }
    int measure(int x, int y)
    {	
        int z = y;
        while(x%y!=0)
        {
            z = x%y;
            x = y;
            y = z;	
        }
        return z;
    }
};