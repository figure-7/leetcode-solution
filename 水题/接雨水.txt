题目难度：HARD

给定?n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。




上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。?

示例:

输入: [0,1,0,2,1,0,1,3,2,1,2,1]
输出: 6



思路：先找出最高点，然后左右双向，每次判断与最大值差值，最大值初始化分别为height[0]和height[height.size()-1]
大了就更新最大值，小了就将差值累加到结果变量中即可，这题很难？？？
看到官方还有暴力解法，甚至用栈的，空间O(N),时间O(N)
我只想到了当时之前做的最大矩阵面积那题需要转化为多个条形图，需要用栈和二维数组，这个真的水

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
83.17%
的用户
内存消耗 :
9.2 MB
, 在所有 C++ 提交中击败了
75.37%
的用户

上代码：
class Solution {
public:
    int aim = 0;
    int res = 0;
    int trap(vector<int>& height) {
        if(height.size() == 0) {
            return 0;
        }
        int curr = height[0];
        for(int i = 1; i < height.size(); i++) {
            if(height[i] > curr) {
                curr = height[i];
                aim = i;
            }
        }
        int da = height[0];
        for(int i = 1; i < aim; i++) {
            if(height[i] > da) {
                da = height[i];
            }
            else {
                int suma = da - height[i];
                res += suma;
                cout<<res;
            }
        }
        //cout<<res;
        da = height[height.size()-1];
        for(int i = height.size()-1; i > aim; i--) {
            if(height[i] > da) {
                da = height[i];
            }
            else {
                int sumb = da - height[i];
                res += sumb;
            }
        }
        //cout<<res;
        return res;
    }
};