题目难度：MEDIUM

给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 
返回插入后二叉搜索树的根节点。 
保证原始二叉搜索树中不存在新值。

注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 
你可以返回任意有效的结果。

例如, 

给定二叉搜索树:

        4
       / \
      2   7
     / \
    1   3

和 插入的值: 5
你可以返回这个二叉搜索树:

         4
       /   \
      2     7
     / \   /
    1   3 5
或者这个树也是有效的:

         5
       /   \
      2     7
     / \   
    1   3
         \
          4

思路：二叉搜索树
思路大致与水题->Search in a Binary Search Tree相同
不同点开始先设置一个继承节点继承给定树的根节点（因为要用那个根节点移动遍历）
当遍历到叶子结点时，根据当前叶子结点值与给定值大小，设置一个给定值的节点分别作为叶子结点的左或右孩子
最后返回开始的继承节点即可

执行用时 :
64 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗 :
33 MB
, 在所有 C++ 提交中击败了
46.95%
的用户
（时间完杀！！！空间一般，原地啊。。。）

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        TreeNode* res = root;
        while(root != nullptr) {
            if(root->val > val) {
                if(root->left != nullptr)
                    root = root->left;
                else {
                    TreeNode* node = new TreeNode(val);
                    root->left = node;
                    break;
                }
            }
            else if(root->val < val) {
                if(root->right != nullptr)
                    root = root->right;
                else {
                    TreeNode* node = new TreeNode(val);
                    root->right = node;
                    break;
                }
            }
        }
        return res;
    }
};