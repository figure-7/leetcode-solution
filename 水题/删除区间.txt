题目难度：MEDIUM

给你一个?有序的?不相交区间列表 intervals 和一个要删除的区间 toBeRemoved，?intervals?中的每一个区间?intervals[i] = [a, b]?都表示满足?a <= x < b 的所有实数? x?的集合。


我们将?intervals 中任意区间与?toBeRemoved 有交集的部分都删除。

返回删除所有交集区间后，?intervals?剩余部分的?有序?列表。

?



示例 1：

输入：intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]

输出：[[0,1],[6,7]]


示例 2：

输入：intervals = [[0,5]], toBeRemoved = [2,3]

输出：[[0,2],[3,5]]
?


提示：

1 <= intervals.length <= 10^4
	-10^9 <= intervals[i][0] < intervals[i][1] <= 10^9



思路：丢人思路，先排序，然后分四种情况：
1：删除区间大于等于区间列表的区间，什么也不做
2：删除区间小于区间列表的区间，分割开列表的区间然后用中间一维数组将结果放入二维数组中
3：删除区间左值在区间列表的区间中，列表的区间的右值变为删除区间左值后用中间一维数组将结果放入二维数组中
4：删除区间右值在区间列表的区间中，列表的区间的左值变为删除区间右值后用中间一维数组将结果放入二维数组中
5：其余表示没有交集，就直接用中间一维数组将结果放入二维数组中即可

上代码：
class Solution {
public:
    vector<vector<int> > res;
    bool flag = false;
    vector<vector<int>> removeInterval(vector<vector<int>>& intervals, vector<int>& toBeRemoved) {
        sort(intervals.begin(), intervals.end());
        sort(toBeRemoved.begin(), toBeRemoved.end());
        for(int i = 0; i < intervals.size(); i++) {
            if(intervals[i][0] == toBeRemoved[0] && intervals[i][1] == toBeRemoved[1]) {
            }
            else if(intervals[i][0] < toBeRemoved[0] && intervals[i][1] > toBeRemoved[0] && intervals[i][0] < toBeRemoved[1] && intervals[i][1] > toBeRemoved[1]) {
                vector<int> curr;
                    curr.push_back(intervals[i][0]);
                    curr.push_back(toBeRemoved[0]);
                res.push_back(curr);
                vector<int> currmodtwo;
                currmodtwo.push_back(toBeRemoved[1]);
                currmodtwo.push_back(intervals[i][1]);
                    res.push_back(currmodtwo);
            }
                else if(intervals[i][0] < toBeRemoved[0] && intervals[i][1] > toBeRemoved[0]) {
                    vector<int> curr;
                    curr.push_back(intervals[i][0]);
                    curr.push_back(toBeRemoved[0]);
                    res.push_back(curr);
                }
                else if(intervals[i][0] > toBeRemoved[0] && intervals[i][1] < toBeRemoved[1]) {
                }
                else if(intervals[i][0] < toBeRemoved[1] && intervals[i][1] > toBeRemoved[1]){
                    vector<int> curr;
                    curr.push_back(toBeRemoved[1]);
                    curr.push_back(intervals[i][1]);
                    res.push_back(curr);
                }
                else {
                    vector<int> curr;
                    curr.push_back(intervals[i][0]);
                    curr.push_back(intervals[i][1]);
                    res.push_back(curr);
                }
        }
        return res;
    }
};