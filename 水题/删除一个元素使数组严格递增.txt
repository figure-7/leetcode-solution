题目难度：EASY

给你一个下标从 0 开始的整数数组 nums ，如果 恰好 删除 一个 元素后，数组 严格递增 ，那么请你返回 true ，否则返回 false 。
如果数组本身已经是严格递增的，请你也返回 true 。
数组 nums 是 严格递增 的定义为：
对于任意下标的 1 <= i < nums.length 都满足 nums[i - 1] < nums[i] 。
示例 1：
输入：nums = [1,2,10,5,7]
输出：true
解释：从 nums 中删除下标 2 处的 10 ，得到 [1,2,5,7] 。
[1,2,5,7] 是严格递增的，所以返回 true 。
示例 2：
输入：nums = [2,3,1,2]
输出：false
解释：
[3,1,2] 是删除下标 0 处元素后得到的结果。
[2,1,2] 是删除下标 1 处元素后得到的结果。
[2,3,2] 是删除下标 2 处元素后得到的结果。
[2,3,1] 是删除下标 3 处元素后得到的结果。
没有任何结果数组是严格递增的，所以返回 false 。
示例 3：
输入：nums = [1,1,1]
输出：false
解释：删除任意元素后的结果都是 [1,1] 。
[1,1] 不是严格递增的，所以返回 false 。
示例 4：
输入：nums = [1,2,3]
输出：true
解释：[1,2,3] 已经是严格递增的，所以返回 true 。
提示：
2 <= nums.length <= 1000
1 <= nums[i] <= 1000

思路：双周赛第一题（9min41s），模拟
先继承当前数组
然后遍历当前数组遇到当前项大于等于下一项时，删除当前数组值并积累删除操作次数（删除大的值）
同时如果当前下标大于1则下标减二，否则下标减一
之后遍历继承的数组，同上遍历遇到当前项大于等于下一项时，删除下一项数组值并积累删除操作次数（删除小的值）
如果两次遍历删除次数都大于1次就返回false即可（WA点：缺少删除小的值的条件判断）
最后返回true即可

上代码：
class Solution {
public:
    int sum = 0, aim = 0;
    
    bool canBeIncreasing(vector<int>& nums) {
        vector<int> curr = nums;
        for(int i = 0; i < nums.size() - 1; i++) {
            if(nums[i] >= nums[i + 1]) {
                vector<int>::iterator it = nums.begin() + i;
                nums.erase(it);
                sum++;
                if(i >= 1) i -= 2;
                else i--;
            }
        }
        for(int i = 0; i < curr.size() - 1; i++) {
            if(curr[i] >= curr[i + 1]) {
                if(sum > 1 && aim == 1) return false;
                vector<int>::iterator it = curr.begin() + i + 1;
                curr.erase(it);
                aim = 1;
                if(i >= 1) i -= 2;
                else i--;
            }
        }
        return true;
    }
};