题目难度：MEDIUM

请你实现一个能够支持以下两种方法的推文计数类 TweetCounts：

1. recordTweet(string tweetName, int time)

记录推文发布情况：用户 tweetName 在 time（以 秒 为单位）时刻发布了一条推文。
2. getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime)

返回从开始时间 startTime（以 秒 为单位）到结束时间 endTime（以 秒 为单位）内，每 分 minute，时 hour 或者 日 day （取决于 freq）内指定用户 tweetName 发布的推文总数。
freq 的值始终为 分 minute，时 hour 或者 日 day 之一，表示获取指定用户 tweetName 发布推文次数的时间间隔。
第一个时间间隔始终从 startTime 开始，因此时间间隔为 [startTime, startTime + delta*1>,  [startTime + delta*1, startTime + delta*2>, [startTime + delta*2, startTime + delta*3>, ... , [startTime + delta*i, min(startTime + delta*(i+1), endTime + 1)>，其中 i 和 delta（取决于 freq）都是非负整数。
 

示例：

输入：
["TweetCounts","recordTweet","recordTweet","recordTweet","getTweetCountsPerFrequency","getTweetCountsPerFrequency","recordTweet","getTweetCountsPerFrequency"]
[[],["tweet3",0],["tweet3",60],["tweet3",10],["minute","tweet3",0,59],["minute","tweet3",0,60],["tweet3",120],["hour","tweet3",0,210]]

输出：
[null,null,null,null,[2],[2,1],null,[4]]

解释：
TweetCounts tweetCounts = new TweetCounts();
tweetCounts.recordTweet("tweet3", 0);
tweetCounts.recordTweet("tweet3", 60);
tweetCounts.recordTweet("tweet3", 10);                             // "tweet3" 发布推文的时间分别是 0, 10 和 60 。
tweetCounts.getTweetCountsPerFrequency("minute", "tweet3", 0, 59); // 返回 [2]。
统计频率是每分钟（60 秒），因此只有一个有效时间间隔 [0,60> - > 2 条推文。
tweetCounts.getTweetCountsPerFrequency("minute", "tweet3", 0, 60); // 返回 [2,1]。
统计频率是每分钟（60 秒），因此有两个有效时间间隔 1) [0,60> - > 2 条推文，和 2) [60,61> - > 1 条推文。 
tweetCounts.recordTweet("tweet3", 120);                            // "tweet3" 发布推文的时间分别是 0, 10, 60 和 120 。
tweetCounts.getTweetCountsPerFrequency("hour", "tweet3", 0, 210);  // 返回 [4]。
统计频率是每小时（3600 秒），因此只有一个有效时间间隔 [0,211> - > 4 条推文。
 

提示：

同时考虑 recordTweet 和 getTweetCountsPerFrequency，最多有 10000 次操作。
0 <= time, startTime, endTime <= 10^9
0 <= endTime - startTime <= 10^4

思路：周赛第三题，解决问题+哈希表
（首先暴力超时，然后改完后跟大佬思路一样但是执行提交不一致一致错，服了！！！绝对没问题）
各个函数功能如下（我的思路）：哈希表下标为人名，值从0依次递增，保存时间进每个人的哈希表值对应下表二维数组
TweetCounts：数组空间初始化
recordTweet：找到人名对应哈希表值，有就在对应二维数组插入当前时间，否则新增哈希表值和二维数组值即可
getTweetCountsPerFrequency：先将给定时间转换为秒，然后开始时间加上给定时间小于等于结束时间循环
遍历当前人物（按顺序（用局部变量，结束一次继承一次即可），否则超时（WA点））对应哈希表值的时间
符合当前时间范围就将变量值（初始0）加一，结束一次循环就将变量放入一次数组中，再把值赋0
结束后再遍历一次在当前的开始时间与结束时间范围内的值的个数放进数组，最后返回结果数组即可

上代码（这个是大佬的，思路同，时间都是O(N)，不过实现的更好，但是就过了）：
class TweetCounts {
public:
    map<string, multiset<int>> storage;
    TweetCounts() {
        storage.clear();
    }
    
    void recordTweet(string tweetName, int time) {
        storage[tweetName].insert(time);
    }
    
    vector<int> getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime) {
        vector<int> ret; ++endTime;
        
        int delta = 0;
        if (freq == "minute") delta = 60;
        if (freq == "hour") delta = 3600;
        if (freq == "day") delta = 60 * 60 * 24;
        
        multiset<int>::iterator it = storage[tweetName].lower_bound(startTime);
        multiset<int>::iterator ed = storage[tweetName].end();
        for (int i = 0; startTime + delta * i < endTime; i++){
            int s = startTime + delta * i, e = min(startTime + delta * i + delta, endTime);
            if (it == ed || (*it) >= e) {
                ret.push_back(0);
            }else{
                int cur = 0;
                while(it != ed && (*it) < e){ ++cur; ++it; }
                ret.push_back(cur);
            }
        }
        
        return ret;
    }
};

/**
 * Your TweetCounts object will be instantiated and called as such:
 * TweetCounts* obj = new TweetCounts();
 * obj->recordTweet(tweetName,time);
 * vector<int> param_2 = obj->getTweetCountsPerFrequency(freq,tweetName,startTime,endTime);
 */