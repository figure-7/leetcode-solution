题目难度：MEDIUM

你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。
这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。
同时，相邻的房屋装有相互通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。
给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够偷窃到的最高金额。
示例 1：
输入：nums = [2,3,2]
输出：3
解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
示例 2：
输入：nums = [1,2,3,1]
输出：4
解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 3：
输入：nums = [0]
输出：0
提示：
1 <= nums.length <= 100
0 <= nums[i] <= 1000

思路：DP
初始化：dp[0]=nums[0]; dp[1]=max(nums[0],nums[1]);
DP表达式：dp[i]=max(dp[i-1],dp[i-2]+nums[i])
套打家劫舍的板子，因为首位元素相连，所以分别删除给定数组的首位元素再套板子。
最后返回两个结果的最大值即可
（WA点：算法错误）

执行用时：
4 ms
, 在所有 C++ 提交中击败了
39.43%
的用户
内存消耗：
7.6 MB
, 在所有 C++ 提交中击败了
79.29%
的用户
（时间不咋地，空间不错）

上代码：
class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size()==0)
            return 0;
        if(nums.size()<=2)
            return nums.size()==1?nums[0]:max(nums[0],nums[1]);
        int cur = nums[nums.size() - 1];
        vector<int>::iterator it = nums.begin() + nums.size() - 1;
    	nums.erase(it);
        int dp2[nums.size()];
        dp2[0]=nums[0];
        dp2[1]=max(nums[0],nums[1]);
        for(int i=2;i<nums.size();i++)
            dp2[i]=max(dp2[i-1],dp2[i-2]+nums[i]);
        nums.push_back(cur);
        vector<int>::iterator it2 = nums.begin();
    	nums.erase(it2);
        int dp[nums.size()];
        dp[0]=nums[0];
        dp[1]=max(nums[0],nums[1]);
        for(int i=2;i<nums.size();i++)
            dp[i]=max(dp[i-1],dp[i-2]+nums[i]);
        return max(dp[nums.size()-1],dp2[nums.size()-1]);
    }
};