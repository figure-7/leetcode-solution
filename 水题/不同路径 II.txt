题目难度：MEDIUM

一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？



网格中的障碍物和空位置分别用 1 和 0 来表示。

说明：m 和 n 的值均不超过 100。

示例 1:

输入:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
输出: 2
解释:
3x3 网格的正中间有一个障碍物。
从左上角到右下角一共有 2 条不同的路径：
1. 向右 -> 向右 -> 向下 -> 向下
2. 向下 -> 向下 -> 向右 -> 向右

思路：原谅我单行和单列时做了额外的判断，有1就不行，没有就照常用dp判断
出发点为1时也判断返回0
接下来典型dp[i][j] = dp[i-1][j] +dp[i][j-1];
前提是先判断边界上是否有1，出现1则将边界后面的值全赋1，刚行（列）之后的路无法通过
剩余路径中有1就直接赋值0（无法通过但不影响别的路径）返回dp[a-1][b-1]即可
（注意：该题dp时遇到大数据会越界，这时需要将dp[i][j] = dp[i-1][j] +dp[i][j-1]改为dp[i][j] = （long long）dp[i-1][j] +dp[i][j-1]
（标准答案没有这个肯定也错了，这题真是恶心！！！方法已经记下hh））

执行用时 : 8 ms, 在Unique Paths II的C++提交中击败了92.89% 的用户
内存消耗 : 9.1 MB, 在Unique Paths II的C++提交中击败了64.51% 的用户
（由于自己做的，还有可以优化空间的地方（大概）懒得改了。。。。）

上代码：
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid[0][0]==1) {
            return 0;
        }
        int a = obstacleGrid.size();
        if(a==1) {
             for(int s = 0; s < obstacleGrid[0].size(); s++) {
                 if(obstacleGrid[0][s]==1) {
                     return 0;
                 }
            }
        }
        int b = obstacleGrid[0].size();
        if(b==1) {
             for(int d = 0; d < obstacleGrid.size(); d++) {
                 if(obstacleGrid[d][0]==1) {
                     return 0;
                 }
            }
        }
        int obstacleGri[a][b];
        int aima = 0;
        int aimb = 0;
        if (a == 0 ||b == 0) return 0;
        if (a == 1 || b == 1) return 1;
        for(int m = 0; m < obstacleGrid.size(); m++) {
            if(obstacleGrid[m][0]==1) {
                obstacleGri[m][0] = 0;
                aima++;
            }
            else if(aima==0) {
                obstacleGri[m][0] = 1;
            }
            else {
                obstacleGri[m][0] = 0;
            }
        }
        for(int n = 1; n < obstacleGrid[0].size(); n++) {
            if(obstacleGrid[0][n]==1) {
                obstacleGri[0][n] = 0;
                aimb++;
            }
            else if(aimb==0) {
                obstacleGri[0][n] = 1;
            }
            else {
                obstacleGri[0][n] = 0;
            }
        }
        for (int i = 1; i < a; i++) {
            for (int j = 1; j < b; j++) {
                if(obstacleGrid[i][j]!=1) {
                    obstacleGri[i][j] = (long long)obstacleGri[i - 1][j] + obstacleGri[i][j - 1];
                }
                else{
                    obstacleGri[i][j] = 0;
                }
            }
        }
        return obstacleGri[a - 1][b - 1];
    }
};