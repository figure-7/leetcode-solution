题目难度：MEDIUM

欢迎各位勇者来到力扣城，城内设有烹饪锅供勇者制作料理，为自己恢复状态。
勇者背包内共有编号为 0 ~ 4 的五种食材，其中 meterials[j] 表示第 j 种食材的数量。
通过这些食材可以制作若干料理，cookbooks[i][j] 表示制作第 i 种料理需要第 j 种食材的数量，而 attribute[i] = [x,y] 表示第 i 道料理的美味度 x 和饱腹感 y。
在饱腹感不小于 limit 的情况下，请返回勇者可获得的最大美味度。
如果无法满足饱腹感要求，则返回 -1。
注意：
每种料理只能制作一次。
示例 1：
输入：meterials = [3,2,4,1,2]
cookbooks = [[1,1,0,1,2],[2,1,4,0,0],[3,2,4,1,0]]
attribute = [[3,2],[2,4],[7,6]]
limit = 5
输出：7
解释：
食材数量可以满足以下两种方案：
方案一：制作料理 0 和料理 1，可获得饱腹感 2+4、美味度 3+2
方案二：仅制作料理 2， 可饱腹感为 6、美味度为 7
因此在满足饱腹感的要求下，可获得最高美味度 7
示例 2：
输入：meterials = [10,10,10,10,10]
cookbooks = [[1,1,1,1,1],[3,3,3,3,3],[10,10,10,10,10]]
attribute = [[5,5],[6,6],[10,10]]
limit = 1
输出：11
解释：通过制作料理 0 和 1，可满足饱腹感，并获得最高美味度 11
提示：
meterials.length == 5
1 <= cookbooks.length == attribute.length <= 8
cookbooks[i].length == 5
attribute[i].length == 2
0 <= meterials[i], cookbooks[i][j], attribute[i][j] <= 20
1 <= limit <= 100

思路：春季赛第二题（16min2s）,DFS+Backtracing
套回溯板子，回溯料理数量数组，每次DFS取当前消耗料理后的数组，累计美味度，累计饱腹值
DFS开始时如果饱腹值满足要求，结果值（初值-1）就变为结果值与当前美味度的最大值（WA点：没看好如果饱腹值始终无法满足返回-1）
最后返回结果值即可

class Solution {
public:
    int res = -1;
    
    void DFS(vector<int>& materials, vector<vector<int>>& cookbooks, vector<vector<int>>& attribute, int limit, int sum, int aim, int begin) {
        for(int cur : materials) if(cur < 0) return ;
        if(sum >= limit) res = max(res, aim);
        for(int i = begin; i < cookbooks.size(); i++) {
            materials[0] -= cookbooks[i][0];
            materials[1] -= cookbooks[i][1];
            materials[2] -= cookbooks[i][2];
            materials[3] -= cookbooks[i][3];
            materials[4] -= cookbooks[i][4];
            sum += attribute[i][1];
            aim += attribute[i][0];
            DFS(materials, cookbooks, attribute, limit, sum, aim, i + 1);
            materials[0] += cookbooks[i][0];
            materials[1] += cookbooks[i][1];
            materials[2] += cookbooks[i][2];
            materials[3] += cookbooks[i][3];
            materials[4] += cookbooks[i][4];
            sum -= attribute[i][1];
            aim -= attribute[i][0];
        }
    }
    
    int perfectMenu(vector<int>& materials, vector<vector<int>>& cookbooks, vector<vector<int>>& attribute, int limit) {
        DFS(materials, cookbooks, attribute, limit, 0, 0, 0);
        return res;
    }
};