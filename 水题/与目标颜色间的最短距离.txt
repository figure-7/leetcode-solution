题目难度：MEDIUM

给你一个数组 colors，里面有  1、2、 3 三种颜色。

我们需要在 colors 上进行一些查询操作 queries，其中每个待查项都由两个整数 i 和 c 组成。

现在请你帮忙设计一个算法，查找从索引 i 到具有目标颜色 c 的元素之间的最短距离。

如果不存在解决方案，请返回 -1。

 

示例 1：

输入：colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]
输出：[3,0,3]
解释： 
距离索引 1 最近的颜色 3 位于索引 4（距离为 3）。
距离索引 2 最近的颜色 2 就是它自己（距离为 0）。
距离索引 6 最近的颜色 1 位于索引 3（距离为 3）。
示例 2：

输入：colors = [1,2], queries = [[0,3]]
输出：[-1]
解释：colors 中没有颜色 3。
 

提示：

1 <= colors.length <= 5*10^4
1 <= colors[i] <= 3
1 <= queries.length <= 5*10^4
queries[i].length == 2
0 <= queries[i][0] < colors.length
1 <= queries[i][1] <= 3

思路：双指针，初始值都为二维数组左侧值，然后左右移动指针即可
遇到相同的就直接赋值就行了，避免了超时。
之前打算把原数组两个值作为下标，然后查找这个下标的值出没出现过，结果失败了。。。（比赛时候没过，难受）
后来发现直接相邻的避免重复计算就能过了233。

上代码：
class Solution {
public:
    vector<int> shortestDistanceColor(vector<int>& colors, vector<vector<int>>& queries) {
        vector<int> res;
        for(int i = 0; i < queries.size(); i++) {
            int a = queries[i][0];
            int l = a;
            int r = a;
            int curr = 0;
            bool flag = true;
            while(l>=0 || r<colors.size()) {
                if(l>=0) {
                if(colors[l] == queries[i][1]) {
                    flag = false;
                    res.push_back(curr);
                    break;
                }
                }
                if(r<colors.size()) {
                if(colors[r] == queries[i][1]) {
                    flag = false;
                    res.push_back(curr);
                    break;
                }
                }
                curr++;
                l--;
                r++;
            }
            if(flag) {
                res.push_back(-1);
            }
            while(i+1 < queries.size() && queries[i] == queries[i+1]) {
                if(flag) {
                    res.push_back(-1);
                }
                else {
                    res.push_back(curr);
                }
                i++;
            }
        }
        return res;
    }
};