题目难度：MEDIUM

给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。
假设二叉树中至少有一个节点。
示例 1:
输入: root = [2,1,3]
输出: 1
示例 2:
输入: [1,2,3,4,null,5,6,null,null,7]
输出: 7
提示:
二叉树的节点个数的范围是 [1,104]
-231 <= Node.val <= 231 - 1

思路：树+DFS
新建10005空间二维数组
直接套DFS模板，传入参数增加一个深度（初值0），每次加一，同时数组存值
最后逆序遍历数组，返回得到数组下标项第一个不为空的值返回即可
否则返回根节点的值即可

执行用时：
20 ms
, 在所有 C++ 提交中击败了
20.49%
的用户
内存消耗：
62.1 MB
, 在所有 C++ 提交中击败了
5.01%
的用户
（时间不咋地，空间炸了）

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > curr;

    int findBottomLeftValue(TreeNode* root) {
        vector<vector<int> > aim(10005);
        curr = aim;
        DFS(root, 0);
        for(int i = 10002; i >= 0; i--) if(curr[i].size() != 0) return curr[i][0];
        return root->val;
    }

    void DFS(TreeNode* node, int len) {
        curr[len].push_back(node->val);
        len++;
        if(node->left != nullptr) DFS(node->left, len);
        if(node->right != nullptr) DFS(node->right, len);
        return ;
    }
};
