题目难度：MEDIUM

你的初始能量为 P，初始分数为 0，只有一包令牌。

令牌的值为 token[i]，每个令牌最多只能使用一次，可能的两种使用方法如下：

如果你至少有 token[i] 点能量，可以将令牌置为正面朝上，失去 token[i] 点能量，并得到 1 分。
如果我们至少有 1 分，可以将令牌置为反面朝上，获得 token[i] 点能量，并失去 1 分。
在使用任意数量的令牌后，返回我们可以得到的最大分数。

 

示例 1：

输入：tokens = [100], P = 50
输出：0
示例 2：

输入：tokens = [100,200], P = 150
输出：1
示例 3：

输入：tokens = [100,200,300,400], P = 200
输出：2
 

提示：

tokens.length <= 1000
0 <= tokens[i] < 10000
0 <= P < 10000

思路：贪心
先对数组排序，左指针0，右指针数组长度减一
当左指针位置小于等于右指针位置循环，当前能量大于左指针对应值就加一分，左指针加一
然后去当前分与结果（初值0）最大值，如果分数等于0结束循环
否则分数减一，当前分加上数组右指针对应值
最后返回结果即可
（WA点：理解题意错误）

执行用时 :
28 ms
, 在所有 C++ 提交中击败了
5.56%
的用户
内存消耗 :
10.9 MB
, 在所有 C++ 提交中击败了
16.67%
的用户
（时间炸了，空间不咋地）

上代码：
class Solution {
public:
    int a = 0, sum = 0, res = 0;
    
    int bagOfTokensScore(vector<int>& tokens, int P) {
        int b = tokens.size() - 1;
        sort(tokens.begin(), tokens.end());
        while(a <= b) {
            if(P < tokens[a]) break;
            while(a <= b && P >= tokens[a]) {
                P -= tokens[a];
                a++;
                sum++;
            }
            res = max(res, sum);
            if(sum > 0) {
                P += tokens[b];
                b--;
                sum--;
            }
        }
        return res;
    }
};