题目难度：MEDIUM

给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。

说明：不允许修改给定的链表。

 

示例 1：

输入：head = [3,2,0,-4], pos = 1
输出：tail connects to node index 1
解释：链表中有一个环，其尾部连接到第二个节点。


示例 2：

输入：head = [1,2], pos = 0
输出：tail connects to node index 0
解释：链表中有一个环，其尾部连接到第一个节点。


示例 3：

输入：head = [1], pos = -1
输出：no cycle
解释：链表中没有环。


 

进阶：
你是否可以不用额外空间解决此题？

思路：链表+SlidingWindow
利用环形链表的思想，双指针二维遍历
内外指针依次遍历链表，内部判断是否跟外部是一个节点，是的话返回该节点即可
否则就看次数是否为最大值（这里设置为9999），是的话就break
直至结束没有相同节点就返回nullptr
（注意空链表直接返回nullptr）

执行用时 :
248 ms
, 在所有 C++ 提交中击败了
5.08%
的用户
内存消耗 :
9.7 MB
, 在所有 C++ 提交中击败了
68.51%
的用户
（时间炸了，空间符合进阶要求，原地，但是效率也不高，，，）

上代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
#define INF 9999
class Solution {
public:   
    ListNode *detectCycle(ListNode *head) {
        if(head == nullptr) return nullptr;
        ListNode *fast = head->next;
        while(head != nullptr) {
            int len = 0;
            while(fast != nullptr) {
                fast = fast->next;
                len++;
                if(head == fast)
                    return head;
                if(len == INF)
                    break;
            }
            head = head->next;
        }
        return nullptr;
    }
};