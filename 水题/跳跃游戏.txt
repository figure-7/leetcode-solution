题目难度：MEDIUM

给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例?1:


	输入: [2,3,1,1,4]
	
输出: true

	解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。

示例?2:

	
输入: [3,2,1,0,4]
	
输出: false

	解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。



思路：遍历数组，每次最大值都减一，不断跟新最大值即可，判断最大值是否大于0
	小于或者等于0就为false，其余为true
	注意：1.数组长度为0或1时返回true
	      2.数组首元素为0时直接返回false，因为赋初值时再循环中会做一次判断更新最大值，可能比0大了

执行用时 :
24 ms
, 在所有C++提交中击败了
38.85%
的用户
内存消耗 :
10 MB
, 在所有C++提交中击败了
68.39%
的用户

上代码：
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int aim = nums[0];
        if(nums.size() == 0) {
            return true;
        }
        if(nums.size() == 1) {
            return true;
        }
        if(nums[0] == 0) {
            return false;
        }
        for(int i = 0; i < nums.size() - 1; i++) {
            aim--;
            if(nums[i+1] > aim) {
                aim = nums[i+1];
            }
            if(aim <= 0 && i != nums.size()-2) {
                return false;
            }
        }
        return true;
    }
};