题目难度：MEDIUM

给你一个二进制字符串 s 和一个整数 k 。

如果所有长度为 k 的二进制字符串都是 s 的子串，请返回 True ，否则请返回 False 。

 

示例 1：

输入：s = "00110110", k = 2
输出：true
解释：长度为 2 的二进制串包括 "00"，"01"，"10" 和 "11"。
它们分别是 s 中下标为 0，1，3，2 开始的长度为 2 的子串。
示例 2：

输入：s = "00110", k = 2
输出：true
示例 3：

输入：s = "0110", k = 1
输出：true
解释：长度为 1 的二进制串包括 "0" 和 "1"，显然它们都是 s 的子串。
示例 4：

输入：s = "0110", k = 2
输出：false
解释：长度为 2 的二进制串 "00" 没有出现在 s 中。
示例 5：

输入：s = "0000000001011100", k = 4
输出：false
 

提示：

1 <= s.length <= 5 * 10^5
s 中只含 0 和 1 。
1 <= k <= 20

思路：双周赛第二题，SlidingWindows+哈希表
首先判断如果给定字符串长度大于给定值时返回false即可（WA点：缺少此处判断）
然后遍历字符串，取长度为给定值的窗口，如果哈希表没有找到对应当前子串就计数加一，并把该串存进哈希表
然后去给定值的所有情况，看是不是等于计数值，等于就返回true即可
否则返回false即可


上代码：
class Solution {
public:
    unordered_map<string, int> map;
    int cur = 1, res = 0;
    
    bool hasAllCodes(string s, int k) {
        if(s.size() < k) return false;
        for(int i = 0; i < s.size() - k + 1; i++) {
            if(map.find(s.substr(i, k)) == map.end()) {
                res++;
                map[s.substr(i, k)] = 1;
            }
        }
        while(k > 0) {
            k--;
            cur *= 2;
        }
        if(res == cur) return true;
        return false;
    }
};