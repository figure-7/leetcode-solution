题目难度：MEDIUM

给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。

此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。

注意:
不能使用代码库中的排序函数来解决这道题。

示例:

输入: [2,0,2,1,1,0]
输出: [0,0,1,1,2,2]
进阶：

一个直观的解决方案是使用计数排序的两趟扫描算法。
首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。
你能想出一个仅使用常数空间的一趟扫描算法吗？

思路：1.一次遍历同时记录每个值个数，再一次遍历到数组中
	2.利用三个指针，边遍历边交换
（答案给的进阶二实测不如原来算法1，因为调用了多次swap函数在时间上并没有节省反而更慢了，，，所以还是算法1好些，提交结果如下可见）

代码1：

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
94.72%
的用户
内存消耗 :
8.4 MB
, 在所有 C++ 提交中击败了
84.59%
的用户

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int a = 0;
        int b = 0;
        int c = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] == 0) {
                a++;
            }
            else if(nums[i] == 1) {
                b++;
            }
            else {
                c++;
            }
        }
        for(int i = 0; i < a; i++) {
            nums[i] = 0;
        }
        for(int i = a; i < a+b; i++) {
            nums[i] = 1;
        }
        for(int i = a+b; i < a+b+c; i++) {
            nums[i] = 2;
        }
    }
};

代码2：

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
80.69%
的用户
内存消耗 :
8.6 MB
, 在所有 C++ 提交中击败了
27.14%
的用户

class Solution {
  public:
  /*
  荷兰三色旗问题解
  */
  void sortColors(vector<int>& nums) {
    // 对于所有 idx < p0 : nums[idx < p0] = 0
    // curr 是当前考虑元素的下标
    int p0 = 0, curr = 0;
    // 对于所有 idx > p2 : nums[idx > p2] = 2
    int p2 = nums.size() - 1;

    while (curr <= p2) {
      if (nums[curr] == 0) {
        swap(nums[curr++], nums[p0++]);
      }
      else if (nums[curr] == 2) {
        swap(nums[curr], nums[p2--]);
      }
      else curr++;
    }
  }
};