题目难度：MEDIUM
今天，书店老板有一家店打算试营业 customers.length 分钟。每分钟都有一些顾客（customers[i]）会进入书店，所有这些顾客都会在那一分钟结束后离开。

在某些时候，书店老板会生气。 如果书店老板在第 i 分钟生气，那么 grumpy[i] = 1，否则 grumpy[i] = 0。 当书店老板生气时，那一分钟的顾客就会不满意，不生气则他们是满意的。

书店老板知道一个秘密技巧，能抑制自己的情绪，可以让自己连续 X 分钟不生气，但却只能使用一次。

请你返回这一天营业下来，最多有多少客户能够感到满意的数量。
 

示例：

输入：customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3
输出：16
解释：
书店老板在最后 3 分钟保持冷静。
感到满意的最大客户数量 = 1 + 1 + 1 + 1 + 7 + 5 = 16.
 

提示：

1 <= X <= customers.length == grumpy.length <= 20000
0 <= customers[i] <= 1000
0 <= grumpy[i] <= 1
思路：动态规划，dp找到老板触发技能的最佳时机
再将剩下的取和即可
上代码：
class Solution {
public:
    int sum=0;
    int size=0;
    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {
        if(X == grumpy.size()) {
            for(int ex=0; ex<X; ex++) {
                sum+=  customers[ex];  
            }
            return sum;
        }
        for(int i=0; i<customers.size()-X+1; i++) {
            dp(i, customers, grumpy, X);
        }
        sum = 0;
        for(int a=0; a<size; a++) {
            if(grumpy[a]==0) {
                sum+=  customers[a];  
            }
        }
        for(int c=size; c<size+X; c++) {
            sum+= customers[c];            
        }
        for(int b=size+X; b<customers.size(); b++) {
            if(grumpy[b]==0) {
                sum+=  customers[b];  
            }
        }
        return sum;
    }
    void dp(int k, vector<int>& customers, vector<int>& grumpy, int x) {
        int aim=0;
        for(int j=k; j<k+x; j++) {
            aim+= customers[j] * grumpy[j];
        }
        if(aim > sum) {
            size = k;
            sum = aim;
        }
    }
};