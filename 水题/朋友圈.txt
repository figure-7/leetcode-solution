题目难度：MEDIUM

班上有?N?名学生。
其中有些人是朋友，有些则不是。
他们的友谊具有是传递性。
如果已知 A 是 B?的朋友，B 是 C?的朋友，那么我们可以认为 A 也是 C?的朋友。
所谓的朋友圈，是指所有朋友的集合。


给定一个?N * N?的矩阵?M，表示班级中学生之间的朋友关系。
如果M[i][j] = 1，表示已知第 i 个和 j 个学生互为朋友关系，否则为不知道。
你必须输出所有学生中的已知的朋友圈总数。



示例 1:

输入: 
[[1,1,0],
 [1,1,0],
 [0,0,1]]

输出: 2 

说明：已知学生0和学生1互为朋友，他们在一个朋友圈。

第2个学生自己在一个朋友圈。
所以返回2。


示例 2:

输入: 
[[1,1,0],
 [1,1,1],
 [0,1,1]]

输出: 1

说明：已知学生0和学生1互为朋友，学生1和学生2互为朋友，所以学生0和学生2也是朋友，所以他们三个在一个朋友圈，返回1。

注意：

N 在[1,200]的范围内。

对于所有学生，有M[i][i] = 1。
如果有M[i][j] = 1，则有M[j][i] = 1。



思路：利用并查集+哈希表实现，先预处理二维数组，合成下标两两对应的并查集
然后套模板带函数和初始化，之后双向取朋友的编号对取相同值（注意要双向遍历，即两次才能获得正确结果）
哈希表用来遍历所有人的共同父节点值，遇见不同的就结果加一，并将该值放入哈希表
直至遍历结束返回结果即可

执行用时 :
20 ms
, 在所有 cpp 提交中击败了
90.48%
的用户
内存消耗 :
11.5 MB
, 在所有 cpp 提交中击败了
44.92%
的用户
（优化一次后的效率，还是不错的）

上代码：
class Solution {
public:
    int f[205];
    int res = 0;
    unordered_map<int, int> map;
    int find(int k) {
        //路径压缩
        return f[k] = (f[k] == k ? k : find(f[k]));
    }
    int findCircleNum(vector<vector<int>>& M) {
        vector<int> curr;
        for(int i = 0; i < M.size(); i++)
            f[i] = i;
        for(int i = 0; i < M.size(); i++) {
            for(int j = i + 1; j < M.size(); j++) {
                if(M[i][j] == 1) {
                    curr.push_back(i);
                    curr.push_back(j);
                }
            }
        }
        for(int i = 0; i < curr.size(); i+=2)
            f[find(curr[i + 1])] = find(curr[i]);
        for(int i = 0; i < curr.size(); i+=2)
            f[find(curr[i])] = find(curr[i + 1]);
        for(int i = 0; i < M.size(); i++) {
            if(map.find(f[i]) == map.end()) {
                map[f[i]] = i;
                res++;
            }
        }
        return res;
    }
};