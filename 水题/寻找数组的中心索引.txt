题目难度：EASY

给定一个整数类型的数组 nums，请编写一个能够返回数组“中心索引”的方法。

我们是这样定义数组中心索引的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。

如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。

示例 1:

输入: 
nums = [1, 7, 3, 6, 5, 6]
输出: 3
解释: 
索引3 (nums[3] = 6) 的左侧数之和(1 + 7 + 3 = 11)，与右侧数之和(5 + 6 = 11)相等。
同时, 3 也是第一个符合要求的中心索引。
示例 2:

输入: 
nums = [1, 2, 3]
输出: -1
解释: 
数组中不存在满足此条件的中心索引。
说明:

nums 的长度范围为 [0, 10000]。
任何一个 nums[i] 将会是一个范围在 [-1000, 1000]的整数。

思路：模拟
一次遍历求和保存进一个变量，再从左到右利用两个变量进行累加和累减
当两个变量值相同，返回对应下标
注意数组长度为空或者为1的情况即可

执行用时 :
16 ms
, 在所有 cpp 提交中击败了
99.94%
的用户
内存消耗 :
9.7 MB
, 在所有 cpp 提交中击败了
95.82%
的用户
（双杀!）

上代码：
class Solution {
public:
    int sum = 0;
    int summodtwo = 0;
    
    int pivotIndex(vector<int>& nums) {
        if(nums.size() == 0) return -1;
        if(nums.size() == 1) return 0;
        for(int i = 0; i < nums.size(); i++)
            sum += nums[i];
        sum -= nums[0];
        for(int i = 1; i < nums.size(); i++) {
            if(sum - summodtwo == 0) return i - 1;
            sum -= nums[i];
            summodtwo += nums[i - 1];
        }
        if(sum - summodtwo == 0) return nums.size() - 1;
        return -1;
    }
};