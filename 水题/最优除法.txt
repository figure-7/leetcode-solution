题目难度：MEDIUM

给定一组正整数，相邻的整数之间将会进行浮点除法操作。
例如， [2,3,4] -> 2 / 3 / 4 。
但是，你可以在任意位置添加任意数目的括号，来改变算数的优先级。
你需要找出怎么添加括号，才能得到最大的结果，并且返回相应的字符串格式的表达式。
你的表达式不应该含有冗余的括号。
示例：
输入: [1000,100,10,2]
输出: "1000/(100/10/2)"
解释:
1000/(100/10/2) = 1000/((100/10)/2) = 200
但是，以下加粗的括号 "1000/((100/10)/2)" 是冗余的，
因为他们并不影响操作的优先级，所以你需要返回 "1000/(100/10/2)"。
其他用例:
1000/(100/10)/2 = 50
1000/(100/(10/2)) = 50
1000/100/10/2 = 0.5
1000/100/(10/2) = 2
说明:
输入数组的长度在 [1, 10] 之间。
数组中每个元素的大小都在 [2, 1000] 之间。
每个测试用例只有一个最优除法解。

思路：模拟
先想清楚题目要求的答案一定会是第一项除以后面所有项依次相除的结果
先判断数组只有一项返回当前项转换为字符串即可（WA点1：缺少该处判断）
否则遍历给定数组，结果字符串（初始化空）加上数组项转换为字符串
之后如果是最后一项就结束循环
否则加上'/'字符
之后判断如果是第一项并且给定数组长度不等于2结果字符串就加'('（WA点2：缺少该处判断，避免3/(2)这种数据的产生）
遍历结束后，如果给定数组长度不等于2，那么结果字符串加上')'
最后返回结果字符串即可

执行用时：
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗：
7.7 MB
, 在所有 C++ 提交中击败了
91.85%
的用户
（时间完杀！！！空间很好）

上代码：
class Solution {
public:
    string res = "";
    
    string optimalDivision(vector<int>& nums) {
        if(nums.size() == 1) return to_string(nums[0]);
        for(int i = 0; i < nums.size(); i++) {
            res += to_string(nums[i]);
            if(i == nums.size() - 1) break;
            res+= '/';
            if(i == 0 && nums.size() != 2) res += '(';
        }
        if(nums.size() != 2) res += ')';
        return res;
    }
};