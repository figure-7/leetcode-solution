题目难度：EASY

平面上有?n?个点，点的位置用整数坐标表示?points[i] = [xi, yi]。
请你计算访问所有这些点需要的最小时间（以秒为单位）。


你可以按照下面的规则在平面上移动：

每一秒沿水平或者竖直方向移动一个单位长度，或者跨过对角线（可以看作在一秒内向水平和竖直方向各移动一个单位长度）。

必须按照数组中出现的顺序来访问这些点。
?



示例 1：



输入：points = [[1,1],[3,4],[-1,0]]

输出：7

解释：一条最佳的访问路径是： [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]   

从 [1,1] 到 [3,4] 需要 3 秒 
从 [3,4] 到 [-1,0] 需要 4 秒
一共需要 7 秒


示例 2：

输入：points = [[3,2],[-2,2]]

输出：5
?


提示：

points.length == n
	1 <= n?<= 100
	points[i].length == 2
	-1000?<= points[i][0], points[i][1]?<= 1000



思路：先取每两个坐标的横纵坐标差值的绝对值，然后分别求出最小值（即对角线方向移动）
然后把差值最大值减去最小值（即横向或纵向移动）
最后将上面两个值累加即可得到最少移动次数。

上代码：
class Solution {
public:
    int minTimeToVisitAllPoints(vector<vector<int>>& points) {
        int res = 0;
        for(int i = 0; i < points.size() - 1; i++) {
            int a = abs(points[i + 1][1] - points[i][1]);
            int b = abs(points[i + 1][0] - points[i][0]);
            int curr = min(a, b);
            int currmodtwo = max(a, b);
            int currmodthree = currmodtwo - curr;
            res += curr;
            res += currmodthree;
        }
        return res;
    }
};