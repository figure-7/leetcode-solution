题目难度：MEDIUM

给你一个 2 行 n 列的二进制数组：

矩阵是一个二进制矩阵，这意味着矩阵中的每个元素不是 0 就是 1。
第 0 行的元素之和为 upper。
第 1 行的元素之和为 lower。
第 i 列（从 0 开始编号）的元素之和为 colsum[i]，colsum 是一个长度为 n 的整数数组。
你需要利用 upper，lower 和 colsum 来重构这个矩阵，并以二维整数数组的形式返回它。

如果有多个不同的答案，那么任意一个都可以通过本题。

如果不存在符合要求的答案，就请返回一个空的二维数组。

 

示例 1：

输入：upper = 2, lower = 1, colsum = [1,1,1]
输出：[[1,1,0],[0,0,1]]
解释：[[1,0,1],[0,1,0]] 和 [[0,1,1],[1,0,0]] 也是正确答案。
示例 2：

输入：upper = 2, lower = 3, colsum = [2,2,1,1]
输出：[]
示例 3：

输入：upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]
输出：[[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]
 

提示：

1 <= colsum.length <= 10^5
0 <= upper, lower <= colsum.length
0 <= colsum[i] <= 2

思路：首先进行不符合情况的查询：
1.数组总和与upper+lower不符，返回NULL
2.判断原数组中2的个数，如果超过upper或lower其中一个，那么也是无法实现的，返回NULL
之后利用贪心的思想，先针对第一个数组不为0的位置，如果upper还有值，就赋值1，upper值减一
然后第二个数组同理即可。（比较水的MEDIUM..）

上代码：
class Solution {
public:
    vector<vector<int>> reconstructMatrix(int upper, int lower, vector<int>& colsum) {
        vector<vector<int> > res;
        vector<int> ans;
        vector<int> ansmodtwo;
        int curr = 0;
        int currmodtwo = 0;
        for(int i = 0; i < colsum.size(); i++)
            curr += colsum[i];
        if(curr != (upper + lower))
            return res;
        for(int i = 0; i < colsum.size(); i++) {
            if(colsum[i] == 2)
                currmodtwo++;
        }
        if(currmodtwo > upper || currmodtwo > lower)
            return res;
        for(int i = 0; i < colsum.size(); i++) {
            if(colsum[i] == 2 && upper > 0) {
                    ans.push_back(1);
                    upper--;
            } else
                ans.push_back(0);
        }
        for(int i = 0; i < colsum.size(); i++) {
            if(colsum[i] == 2 && lower > 0) {
                    ansmodtwo.push_back(1);
                    lower--;
                    colsum[i] -= 2;
            } else
                ansmodtwo.push_back(0);
        }
        for(int i = 0; i < colsum.size(); i++) {
            if(colsum[i] > 0 && upper > 0 && ans[i] != 1) {
                    ans[i] = 1;
                    upper--;
                    colsum[i]--;
            }
        }
        for(int i = 0; i < colsum.size(); i++) {
            if(colsum[i] > 0 && lower > 0 && ansmodtwo[i] != 1) {
                    ansmodtwo[i] = 1;
                    lower--;
                    colsum[i]--;
            }
        }
        res.push_back(ans);
        res.push_back(ansmodtwo);
        return res;
    }
};