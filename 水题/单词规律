题目难度：EASY

给定一种规律 pattern 和一个字符串 s ，判断 s 是否遵循相同的规律。
这里的 遵循 指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应规律。
示例1:
输入: pattern = "abba", str = "dog cat cat dog"
输出: true
示例 2:
输入:pattern = "abba", str = "dog cat cat fish"
输出: false
示例 3:
输入: pattern = "aaaa", str = "dog cat cat dog"
输出: false
提示:
1 <= pattern.length <= 300
pattern 只包含小写英文字母
1 <= s.length <= 3000
s 只包含小写英文字母和 ' '
s 不包含 任何前导或尾随对空格
s 中每个单词都被 单个空格 分隔

思路：哈希表
建立字符串为空,两个哈希表
遍历给定第二个字符串将所有单词（按照空格差分）保存进建立数组
判断如果给定第一个字符串长度和建立数组长度不一致返回FALSE即可（WA点：缺少此处判断）
第一个哈希表用来从给定第二个字符串对应第一个字符串，对应不上直接返回FALSE即可
第一个哈希表用来从给定第一个字符串对应第二个字符串，对应不上直接返回FALSE即可
最后返回TRUE即可

执行用时：
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗：
6.3 MB
, 在所有 C++ 提交中击败了
41.24%
的用户
（时间完杀！！！空间一般）

上代码：
class Solution {
public:
    string str = "";
    vector<string> curr;
    unordered_map<char, string> map;
    unordered_map<string, char> mapper;

    bool wordPattern(string pattern, string s) {
        for(int i = 0; i < s.size(); i++) {
            if(s[i] == ' ') {
                curr.push_back(str);
                str = "";
            } else str += s[i];
        }
        curr.push_back(str);
        if(curr.size() != pattern.size()) return false;
        for(int i = 0; i < pattern.size(); i++) {
            if(map.find(pattern[i]) != map.end()) {
                if(curr[i] != map[pattern[i]]) return false;
            }
            else map[pattern[i]] = curr[i];
        }
        for(int i = 0; i < curr.size(); i++) {
            if(mapper.find(curr[i]) != mapper.end()) {
                if(pattern[i] != mapper[curr[i]]) return false;
            }
            else mapper[curr[i]] = pattern[i];
        }
        return true;
    }
};
