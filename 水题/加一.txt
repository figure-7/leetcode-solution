题目难度：EASY

给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。


最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。


你可以假设除了整数 0 之外，这个整数不会以零开头。



示例?1:

输入: [1,2,3]
输出: [1,2,4]

解释: 输入数组表示数字 123。


示例?2:

输入: [4,3,2,1]
输出: [4,3,2,2]

解释: 输入数组表示数字 4321。


思路：还是挺绕的
1.一般数正常把最后一项加一即可
当溢出时：2.最后一项变0后，前一项不是9，那么直接加1返回
	  3.最后一项变0后，前一项是9，就遍历到不是9的项，加一返回
	  4.最后一项变0后，之前一直是9，就在头插1后返回
	  5.空数组，插入1后返回

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
89.00%
的用户
内存消耗 :
8.5 MB
, 在所有 C++ 提交中击败了
64.09%
的用户

上代码：
class Solution {
public:
    int aim = 1;
    vector<int> plusOne(vector<int>& digits) {
        if(digits.size() == 0) {
            digits.push_back(1);
            return digits;
        }
        while(digits[digits.size()-aim] == 9) {
            digits[digits.size()-aim] = 0;
            aim++;
            if(digits.size() < aim) {
                digits.insert(digits.begin(), 1);
                return digits;
            }
            else {
                if(digits[digits.size()-aim]!=9) {
                    digits[digits.size()-aim]++;
                    return digits;
                }
            }
        }
        digits[digits.size()-1]++;
        return digits;
    }
};
