题目难度：MEDIUM

以 Unix 风格给出一个文件的绝对路径，你需要简化它。

或者换句话说，将其转换为规范路径。

在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；

两者都可以是复杂相对路径的组成部分。

更多信息请参阅：Linux / Unix中的绝对路径 vs 相对路径

请注意，返回的规范路径必须始终以斜杠 / 开头，并且两个目录名之间必须只有一个斜杠 /。

最后一个目录名（如果存在）不能以 / 结尾。

此外，规范路径必须是表示绝对路径的最短字符串。

 

示例 1：

输入："/home/"
输出："/home"
解释：注意，最后一个目录名后面没有斜杠。
示例 2：

输入："/../"
输出："/"
解释：从根目录向上一级是不可行的，因为根是你可以到达的最高级。
示例 3：

输入："/home//foo/"
输出："/home/foo"
解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。
示例 4：

输入："/a/./b/../../c/"
输出："/c"
示例 5：

输入："/a/../../b/../c//.//"
输出："/c"
示例 6：

输入："/a//b////c/d//././/.."
输出："/a/b/c"

思路：模拟
（贼麻烦一题，该开始用栈，结果倒序，又用中端栈，又是倒序，中间BUG还一堆，心态崩了直接重写）
先遍历一次字符串，将所有按'/'分割开的字符串放进数组
然后倒序遍历该数组，遇见"."不管 ，遇见".."记录次数加一
否则判断当次数大于0就把次数减一，否则将该字符串放进数组2中
然后倒序遍历数组2，每次结果字符串先接一个'/'，再接上数组2对应字符串
最后返回结果用三元运算符，如果结果字符串为空返回"/"，否则返回该字符串即可

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
85.28%
的用户
内存消耗 :
11.1 MB
, 在所有 C++ 提交中击败了
37.47%
的用户
（时间的确不错，空间比较大，用来两个数组）

上代码：
class Solution {
public:
    string cur = "", res = "";
    vector<string> curr, aim;
    int i = 0, sum = 0;
    
    string simplifyPath(string path) {
        while(i < path.length()) {
            if(path[i] != '/')
                cur += path[i];
            else {
                if(cur != "") {
                    curr.push_back(cur);
                    cur = "";
                }
            }
            i++;
        }
        if(cur != "")
            curr.push_back(cur);
        for(int i = curr.size() - 1; i >= 0; i--) {
            if(curr[i] == "..")
                sum++;
            else if(sum > 0 && curr[i] != ".")
                sum--;
            else
                if(curr[i] != ".")
                    aim.push_back(curr[i]);
        }
        for(int i = aim.size() - 1; i >= 0; i--) {
            res += '/';
            res += aim[i];
        }
        return res == "" ? "/" : res;
    }
};