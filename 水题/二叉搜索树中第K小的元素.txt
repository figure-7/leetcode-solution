给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。

说明：
题目难度：MEDIUM

你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。

示例 1:

输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 1
示例 2:

输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 3
进阶：
如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化 kthSmallest 函数？

思路：没啥说的，这不就是简单DFS吗，正好是二叉搜索树，中序遍历就完了，得到升序序列，带入 k
DFS直接粘上，一分钟题。（这都是MEDIUM了，，，）

执行用时 :
32 ms
, 在所有 C++ 提交中击败了
84.24%
的用户
内存消耗 :
22.1 MB
, 在所有 C++ 提交中击败了
5.00%
的用户

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        vector<int> res;
        DFS(root, res);
        if(res.size() < k) {
            return 0;
        }
        return res[k-1];
    }
    void DFS(TreeNode* r, vector<int>& a) {
        if(r->left) {
            DFS(r->left,a);
        }
        a.push_back(r->val);
        if(r->right) {
            DFS(r->right,a);
        }
    }
};