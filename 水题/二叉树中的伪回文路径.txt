题目难度：MEDIUM

给你一棵二叉树，每个节点的值为 1 到 9 。我们称二叉树中的一条路径是 「伪回文」的，当它满足：

路径经过的所有节点值的排列中，存在一个回文序列。

请你返回从根到叶子节点的所有路径中 伪回文 路径的数目。

 

示例 1：



输入：root = [2,3,1,3,1,null,1]
输出：2 
解释：上图为给定的二叉树。
     总共有 3 条从根到叶子的路径：红色路径 [2,3,3] ，绿色路径 [2,1,1] 和路径 [2,3,1] 。
     在这些路径中，只有红色和绿色的路径是伪回文路径，因为红色路径 [2,3,3] 存在回文排列 [3,2,3] ，绿色路径 [2,1,1] 存在回文排列 [1,2,1] 。
示例 2：



输入：root = [2,1,1,1,3,null,null,null,null,null,1]
输出：1 
解释：上图为给定二叉树。
     总共有 3 条从根到叶子的路径：绿色路径 [2,1,1] ，路径 [2,1,3,1] 和路径 [2,1] 。
     这些路径中只有绿色路径是伪回文路径，因为 [2,1,1] 存在回文排列 [1,2,1] 。
示例 3：

输入：root = [9]
输出：1
 

提示：

给定二叉树的节点数目在 1 到 10^5 之间。
节点值在 1 到 9 之间。

思路：周赛第三题，树+DFS
DFS套板子，内部传一个字符串保存每个路径上的数组对应字符的累加字符串
中间数组保存每个路径字符串
遍历中间数组，开10空间数组，保存当前字符串每个数字个数
然后遍历10空间数组，找到奇数个数字个数，如果等于2结束循环（肯定不是回文串了）
否则如果遍历到最后结果值（初值0）就加一
最后返回结果值即可

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int res = 0;
    vector<string> curr;
    
    void DFS(TreeNode* node, string s) {
        s += node->val + '0';
        if(node->left == nullptr && node->right == nullptr) curr.push_back(s);
        if(node->left) DFS(node->left, s);
        if(node->right) DFS(node->right, s);
    }
    
    int pseudoPalindromicPaths (TreeNode* root) {
        DFS(root, "");
        for(int i = 0; i < curr.size(); i++) {
            vector<int> number(10);
            int sum = 0;
            for(int j = 0; j < curr[i].size(); j++) number[curr[i][j] - '0']++;
            for(int j = 0; j < 10; j++) {
                if(number[j] & 1) sum++;
                if(sum == 2) break;
                if(j == 9) res++;
            }
        }
        return res;
    }
};