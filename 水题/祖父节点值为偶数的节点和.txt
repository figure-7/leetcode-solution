题目难度：MEDIUM

给你一棵二叉树，请你返回满足以下条件的所有节点的值之和：

该节点的祖父节点的值为偶数。（一个节点的祖父节点是指该节点的父节点的父节点。）
如果不存在祖父节点值为偶数的节点，那么返回 0 。

 

示例：



输入：root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
输出：18
解释：图中红色节点的祖父节点的值为偶数，蓝色节点为这些红色节点的祖父节点。
 

提示：

树中节点的数目在 1 到 10^4 之间。
每个节点的值在 1 到 100 之间。

思路：周赛第三题，DFS
直接DFS遍历树的所有节点，然后如果节点值为偶数，就向下遍历两层，有相应节点的话就把值累加进结果
最后返回累加结果即可

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int res = 0;
    
    void DFS(TreeNode* node) {
        if(node == nullptr)
            return;
        if(node->val % 2 == 0) {
            if(node->left != nullptr) {
                if(node->left->left != nullptr)
                    res += node->left->left->val;
                if(node->left->right != nullptr)
                    res += node->left->right->val;
            }
            if(node->right != nullptr) {
                if(node->right->left != nullptr)
                    res += node->right->left->val;
                if(node->right->right != nullptr)
                    res += node->right->right->val;
            }
        }
        DFS(node->left);
        DFS(node->right);
    }
    
    int sumEvenGrandparent(TreeNode* root) {
        DFS(root);
        return res;
    }
};