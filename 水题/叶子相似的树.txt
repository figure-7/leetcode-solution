题目难度：EASY

请考虑一棵二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个 叶值序列 。
举个例子，如上图所示，给定一棵叶值序列为 (6, 7, 4, 9, 8) 的树。
如果有两棵二叉树的叶值序列是相同，那么我们就认为它们是 叶相似 的。
如果给定的两个根结点分别为 root1 和 root2 的树是叶相似的，则返回 true；否则返回 false 。
示例 1：
输入：root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
输出：true
示例 2：
输入：root1 = [1,2,3], root2 = [1,3,2]
输出：false
提示：
给定的两棵树结点数在 [1, 200] 范围内
给定的两棵树上的值在 [0, 200] 范围内

思路：树+DFS
DFS遍历树得到给定两个树的叶子结点顺序值入两个新建数组
如果两个数组长度不等返回FALSE即可
否则如果两个数组不相等返回FALSE即可
最后返回TRUE即可

执行用时：
8 ms
, 在所有 C++ 提交中击败了
21.34%
的用户
内存消耗：
13.1 MB
, 在所有 C++ 提交中击败了
5.82%
的用户
（时间不咋地，空间炸了）

上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> resa, resb;

    void DFS(TreeNode *node) {
        if(node->left) DFS(node->left); 
        if(node->right) DFS(node->right);
        if(!node->left && !node->right) {
            resa.push_back(node->val);
            return ;
        }
    }

    void DFSTWO(TreeNode* root) {
        if(root->left) DFSTWO(root->left); 
        if(root->right) DFSTWO(root->right);
        if(!root->left && !root->right) {
            resb.push_back(root->val);
            return ;
        }
    }

    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        DFS(root1);
        DFSTWO(root2);
        if(resa.size() != resb.size()) return false;
        for(int i = 0; i < resa.size(); i++) if(resa[i] != resb[i]) return false;
        return true;
    }
};
