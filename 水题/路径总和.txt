题目难度：easy
给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。

说明: 叶子节点是指没有子节点的节点。

示例: 
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。
思路：第一次以为不到底也算，提交错误水了一次
改正后就是递归遍历，到底是记录进数组，在遍历一次数组即可
没啥难的，上代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> dfs;
    bool hasPathSum(TreeNode* root, int sum) {
        if(root==NULL) {
            return false;
        }
        int sumex=0;
        DFS(root,dfs,sumex);
        for(int i=0; i<dfs.size(); i++) {
            if(sum==dfs[i]) {
                return true;
            }
        }
        return false;
    }
    void DFS(TreeNode* node, vector<int>& a,int suma) {
        suma+=node->val;
        if(!node->left && !node->right) {
            a.push_back(suma);
        }
        if(node->left) {
            DFS(node->left,a,suma);
        }
        if(node->right) {
            DFS(node->right,a,suma);
        }
    }
};
速度略慢空间减少的算法
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int i=0;
    bool hasPathSum(TreeNode* root, int sum) {
        if(root==NULL) {
            return false;
        }
        int sume=0;
        DFS(root,sume,sum);
        if(i==0) {
            return false;
        }
        return true;
    }
    void DFS(TreeNode* node,int suma,int sumex) {
        suma+=node->val;
        if(!node->left && !node->right) {
            if(sumex==suma) {
                i++;
            }
        }
        if(node->left) {
            DFS(node->left,suma,sumex);
        }
        if(node->right) {
            DFS(node->right,suma,sumex);
        }
    }
};