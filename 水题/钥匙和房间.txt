有 N 个房间，开始时你位于 0 号房间。
每个房间有不同的号码：0，1，2，...，N-1，并且房间里可能有一些钥匙能使你进入下一个房间。

在形式上，对于每个房间 i 都有一个钥匙列表 rooms[i]，每个钥匙 rooms[i][j] 由 [0,1，...，N-1] 中的一个整数表示，其中 N = rooms.length。 
钥匙 rooms[i][j] = v 可以打开编号为 v 的房间。

最初，除 0 号房间外的其余所有房间都被锁住。

你可以自由地在房间之间来回走动。

如果能进入每个房间返回 true，否则返回 false。

示例 1：

输入: [[1],[2],[3],[]]
输出: true
解释:  
我们从 0 号房间开始，拿到钥匙 1。
之后我们去 1 号房间，拿到钥匙 2。
然后我们去 2 号房间，拿到钥匙 3。
最后我们去了 3 号房间。
由于我们能够进入每个房间，我们返回 true。
示例 2：

输入：[[1,3],[3,0,1],[2],[0]]
输出：false
解释：我们不能进入 2 号房间。
提示：

1 <= rooms.length <= 1000
0 <= rooms[i].length <= 1000
所有房间中的钥匙数量总计不超过 3000。

思路：BFS
先从0开始判断，把0入队，然后把0下标对应布尔数组值置true
然后每次遍历下标对应原数组内的钥匙，要是对应的房间下标没有被访问过（布尔值为false），就置布尔值为true，并放入队列中
直至遍历结束，最后看原数组长度内下标范围的布尔数组是不是值都为true，都为true就返回true，否则返回false

执行用时 :
12 ms
, 在所有 cpp 提交中击败了
84.52%
的用户
内存消耗 :
10.8 MB
, 在所有 cpp 提交中击败了
80.98%
的用户
（都不错的呢）

上代码：
class Solution {
public:
    queue<int> q;
    
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        vector<bool> vis(1005, false);
        q.push(0);
        vis[0] = true;
        while(!q.empty()) {
            int a = q.front();
            q.pop();
            for(int i = 0; i < rooms[a].size(); i++) {
                if(!vis[rooms[a][i]]) {
                    q.push(rooms[a][i]);
                    vis[rooms[a][i]] = true;  
                }
            }
        }
        for(int i = 0; i < rooms.size(); i++)
            if(vis[i] == false)
                return false;
        return true;
    }
};