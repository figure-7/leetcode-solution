题目难度：EASY

给定由一些正数（代表长度）组成的数组 A，返回由其中三个长度组成的、面积不为零的三角形的最大周长。

如果不能形成任何面积不为零的三角形，返回 0。

 

示例 1：

输入：[2,1,2]
输出：5
示例 2：

输入：[1,2,1]
输出：0
示例 3：

输入：[3,2,3,4]
输出：10
示例 4：

输入：[3,6,2,3]
输出：8
 

提示：

3 <= A.length <= 10000
1 <= A[i] <= 10^6

思路：模拟
首先对数组排序，然后逆向三重遍历取所有组合
内部循环如果当前最小的两个值累加小于等于最外部的值就结束内部循环（因为内部循环向下遍历肯定比当前值小）（TLE：暴力）
最后返回0即可（三分钟题）

执行用时 :
52 ms
, 在所有 C++ 提交中击败了
74.18%
的用户
内存消耗 :
22.3 MB
, 在所有 C++ 提交中击败了
5.42%
的用户
（时间不错，空间炸了，原地...）

上代码：
class Solution {
public:
    int largestPerimeter(vector<int>& A) {
        sort(A.begin(), A.end());
        for(int i = A.size() - 1; i >= 0; i--) {
            for(int j = i - 1; j >= 0; j--) {
                for(int k = j - 1; k >= 0; k--) {
                    if(A[i] + A[j] > A[k] && A[j] + A[k] > A[i] && A[i] + A[k] > A[j])
                        return A[i] + A[j] + A[k];
                    if(A[k] + A[j] <= A[i])
                        break;
                }
            }
        }
        return 0;
    }
};