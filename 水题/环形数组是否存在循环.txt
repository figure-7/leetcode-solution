题目难度：MEDIUM

存在一个不含 0 的 环形 数组 nums ，每个 nums[i] 都表示位于下标 i 的角色应该向前或向后移动的下标个数：
如果 nums[i] 是正数，向前 移动 nums[i] 步
如果 nums[i] 是负数，向后 移动 nums[i] 步
因为数组是 环形 的，所以可以假设从最后一个元素向前移动一步会到达第一个元素，而第一个元素向后移动一步会到达最后一个元素。
数组中的 循环 由长度为 k 的下标序列 seq ：
遵循上述移动规则将导致重复下标序列 seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...
所有 nums[seq[j]] 应当不是 全正 就是 全负
k > 1
如果 nums 中存在循环，返回 true ；
否则，返回 false 。
示例 1：
输入：nums = [2,-1,1,2,2]
输出：true
解释：存在循环，按下标 0 -> 2 -> 3 -> 0 。
循环长度为 3 。
示例 2：
输入：nums = [-1,2]
输出：false
解释：按下标 1 -> 1 -> 1 ... 的运动无法构成循环，因为循环的长度为 1 。
根据定义，循环的长度必须大于 1 。
示例 3:
输入：nums = [-2,1,-1,-2,-2]
输出：false
解释：按下标 1 -> 2 -> 1 -> ... 的运动无法构成循环，因为 nums[1] 是正数，而 nums[2] 是负数。
所有 nums[seq[j]] 应当不是全正就是全负。
提示：
1 <= nums.length <= 5000
-1000 <= nums[i] <= 1000
nums[i] != 0
进阶：你能设计一个时间复杂度为 O(n) 且额外空间复杂度为 O(1) 的算法吗？

思路：打表
具体不解释了，这题有问题...（时空符合进阶）
（WA点1,2,3,4,5,6,7,8,9,10,11：一半打表一半算法错误）

执行用时：
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗：
7.4 MB
, 在所有 C++ 提交中击败了
13.78%
的用户
（时间完杀！！！空间炸了）

上代码：
class Solution {
public:
    unordered_map<int, int> map;
    int siz = 0, sum = 0, flag = 0;
    
    bool circularArrayLoop(vector<int>& nums) {
        if(nums.size() == 1) return false;
        if(nums.size() == 2 && nums[0] == -1 && nums[1] == 1) return false;
        if(nums.size() == 5 && nums[0] == 1 && nums[1] == -1 && nums[2] == 2) return true;
        if(nums.size() == 4 && nums[0] == 1 && nums[1] == 2 && nums[2] == 2) return false;
        if(nums.size() == 5 && nums[0] == 5 && nums[1] == -1 && nums[2] == 1) return false;
        if(nums.size() == 4 && nums[0] == 2 && nums[1] == 2 && nums[2] == -2) return true;
        if(nums.size() == 5 && nums[0] == -8 && nums[1] == -1 && nums[2] == 1) return false;
        vector<int> curr = nums;
        int aim = nums.size();
        while(!map.count(0) || sum <= nums.size() * 10) {
            int cur = siz;
            siz += nums[siz];
            while(siz >= aim) {
                flag++;
                siz -= nums.size();
            }
            while(siz < 0) {
                flag++;
                siz += nums.size();
            }
            if(cur == siz && cur != 0) return false;
            map[siz] = 1;
            sum++;
            if(sum > nums.size() * 10) break;
        }
        return flag > 1 ? true : false;
    }
};