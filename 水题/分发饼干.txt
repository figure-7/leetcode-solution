题目难度：EASY

假设你是一位很棒的家长，想要给你的孩子们一些小饼干。
但是，每个孩子最多只能给一块饼干。
对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；
并且每块饼干 j，都有一个尺寸 s[j] 。
如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。
你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
示例 1:
输入: g = [1,2,3], s = [1,1]
输出: 1
解释: 
你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
所以你应该输出1。
示例 2:
输入: g = [1,2], s = [1,2,3]
输出: 2
解释: 
你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
你拥有的饼干数量和尺寸都足以让所有孩子满足。
所以你应该输出2.
提示：
1 <= g.length <= 3 * 104
0 <= s.length <= 3 * 104
1 <= g[i], s[j] <= 231 - 1

思路：贪心
排序给定两个数组
遍历给定第二个数组，如果下标值（初值0）等于给定第二个数组长度结束循环
如果当前项大于等于给定数组对应下标值的值就把下标值和结果值（初值0）加一
最后返回结果值即可

执行用时：
24 ms
, 在所有 C++ 提交中击败了
77.84%
的用户
内存消耗：
17 MB
, 在所有 C++ 提交中击败了
60.98%
的用户
（时间不错，空间一般）

上代码：
class Solution {
public:
    int siz = 0, res = 0;

    int findContentChildren(vector<int>& g, vector<int>& s) {
        sort(g.begin(), g.end());
        sort(s.begin(), s.end());
        for(int i = 0; i < s.size(); i++) {
            if(siz == g.size()) break;
            if(s[i] >= g[siz]) {
                res++;
                siz++;
            }
        }
        return res;
    }
};
