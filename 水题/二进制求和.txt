题目难度：EASY

给定两个二进制字符串，返回他们的和（用二进制表示）。


输入为非空字符串且只包含数字?1?和?0。



示例?1:


输入: a = "11", b = "1"

输出: "100"


示例?2:


输入: a = "1010", b = "1011"

输出: "10101"



思路：很麻烦的一道题，笔者先从后向前逐步计算，中途还需要保存进位，
      结果保存进一个一维的字符型数组，（这题输入输出都是字符串谁受得了，，，）
      之后还需要对数组有效空间的判断，（可能会出现最高位的进位，这是数组的长度都变成没有进位时长度加一了，所以又分开讨论）
      最后将数组按对应长度翻转转化为字符串类型即可得到答案

执行用时 :
4 ms
, 在所有 C++ 提交中击败了
97.39%
的用户
内存消耗 :
8.7 MB
, 在所有 C++ 提交中击败了
43.88%
的用户
（空间复杂度较高，因为用到二维数组，时间复杂度较好，O(N)）

上代码：
class Solution {
public:
    string addBinary(string a, string b) {
        int aim = 0;
        int m = a.size();
        int tmp = 0;
        int n = b.size();
        int mins = min(m, n);
        int maxs = max(m, n);
        char res[maxs+1];
        for(int i = 0; i < mins; i++) {
            if(a.at(m-i-1) == b.at(n-i-1) && a.at(m-i-1) == '1') {
                if(aim) {
                    res[i] = '1';
                    aim = 1;
                }
                else {
                    res[i] = '0';
                    aim = 1;
                }
            }
            else if(a.at(m-i-1) == b.at(n-i-1) && a.at(m-i-1) == '0') {
                if(aim) {
                    res[i] = '1';
                    aim = 0;
                }
                else{
                    res[i] = '0';
                    aim = 0;
                }
            }
            else {
                if(aim) {
                    res[i] = '0';
                    aim = 1;
                }
                else{
                    res[i] = '1';
                    aim = 0;
                }
            }
        }
        if(maxs == mins && aim == 1) {
            res[maxs] = '1';
            tmp = 1;
        }
        else{
            for(int i = mins; i < maxs; i++) {
                if(m > n) {
                    if(a.at(maxs-i-1) == '1' && aim == 1) {
                        res[i] = '0';
                        aim = 1;
                    }
                    else {
                        if(aim == 1) {
                            res[i] = '1';
                            aim = 0;
                        }
                        else {
                            res[i] = a.at(maxs-i-1);
                        }
                    }
                }
                else {
                    if(b.at(maxs-i-1) == '1' && aim == 1) {
                        res[i] = '0';
                        aim = 1;
                    }
                    else {
                        if(aim == 1) {
                            res[i] = '1';
                            aim = 0;
                        }
                        else {
                            res[i] = b.at(maxs-i-1);
                        }
                    }
                }
            }
        }
        if(aim == 1) {
            res[maxs] = '1';
            tmp = 1;
        }
        if(tmp) {
            for(int i = 0; i <= maxs/2; i++) {
                tmp = res[i];
                res[i] = res[maxs-i];
                res[maxs-i] = tmp;
            }
            string s(&res[0],&res[maxs+1]);
            return s;
        }
        else{
            for(int i = 0; i < maxs/2; i++) {
                tmp = res[i];
                res[i] = res[maxs-i-1];
                res[maxs-i-1] = tmp;
            }
            string s(&res[0],&res[maxs]);
            return s;
        }
        return "";
    }
};