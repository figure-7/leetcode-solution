题目难度：MEDIUM

给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的排列。

换句话说，第一个字符串的排列之一是第二个字符串的子串。

示例1:

输入: s1 = "ab" s2 = "eidbaooo"
输出: True
解释: s2 包含 s1 的排列之一 ("ba").
 

示例2:

输入: s1= "ab" s2 = "eidboaoo"
输出: False
 

注意：

输入的字符串只包含小写字母
两个字符串的长度都在 [1, 10,000] 之间

思路：SildingWindows
（一开始用比较暴力的方法，超时。。）
所以利用另开26空间数组，初始化都为0，之后遍历字符串，用ASCII码的方式作为对应数组小标，值加一
然后遍历第二个字符串，滑动窗口长度为第一个字符串的长度，将对应ASCII码值减一
每次内部遍历26,次，如果数组所有值都小于等于0，那么就可以实现返回true，否则返回false即可

执行用时 :
20 ms
, 在所有 C++ 提交中击败了
42.15%
的用户
内存消耗 :
9.6 MB
, 在所有 C++ 提交中击败了
27.83%
的用户
（时间不太好，空间也炸了）

上代码：
class Solution {
public:
    int curr[26] = {0};
    bool flag = true;
    
    bool checkInclusion(string s1, string s2) {
        for(auto c : s1)
            curr[c - 'a']++;
        for(int i = 0; i < s2.length(); i++) {
            if(i >= s1.size())
                curr[s2[i - s1.size()] - 'a']++;
            flag = true;
            curr[s2[i] - 'a']--;
            for(int i = 0; i < 26; i++) {
                if(curr[i] > 0) {
                    cout<<i;
                    flag =false;
                    break;
                }
            }
            if(flag)
                return true;
        }
        return false;
    }
};