题目难度：MEDIUM

找出所有相加之和为 n 的 k 个数的组合，且满足下列条件：
只使用数字1到9
每个数字 最多使用一次 
返回 所有可能的有效组合的列表 。
该列表不能包含相同的组合两次，组合可以以任何顺序返回。
示例 1:
输入: k = 3, n = 7
输出: [[1,2,4]]
解释:
1 + 2 + 4 = 7
没有其他符合的组合了。
示例 2:
输入: k = 3, n = 9
输出: [[1,2,6], [1,3,5], [2,3,4]]
解释:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
没有其他符合的组合了。
示例 3:
输入: k = 4, n = 1
输出: []
解释: 不存在有效的组合。
在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 = 10，因为10 > 1，没有有效的组合。
提示:
2 <= k <= 9
1 <= n <= 60

思路：DFS+回溯
直接套组合总和II模板
之后将传入的数组改为建立的存1-9的数组
模板运行结束后得到结果将二维数组每一项中值的个数不为给定第一个值的项排除掉
最后返回结果数组即可

执行用时：
4 ms
, 在所有 C++ 提交中击败了
7.31%
的用户
内存消耗：
7.2 MB
, 在所有 C++ 提交中击败了
5.03%
的用户
(时空都炸了）

上代码：
class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> aim;
        for(int i = 1; i < 10; i++) aim.push_back(i);
        vector<vector<int>> res = combinationSum2(aim, n);
        for(int i = 0; i < res.size(); i++) {
            if(res[i].size() != k) {
                vector<vector<int> >::iterator it = res.begin() + i;
                res.erase(it);
                i--;
            }
        }
        return res;
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> ret;
        if(candidates.size() == 0 || target < 0) return ret;
        vector<int> curr;
        sort(candidates.begin(), candidates.end());
        int n = candidates.size();
        BackTracking(ret, curr, candidates, n, target, 0);
        return ret;
    }

    void BackTracking(vector<vector<int>>& ret, vector<int> curr, vector<int> candidates, int n, int target, int level) {
        if(target==0) {
            ret.push_back(curr);
            return;
        }
        if(target < 0) return;
        for(int i = level; i < n; i++) {
            curr.push_back(candidates[i]);
            target -= candidates[i];
            BackTracking(ret,curr,candidates,n,target,i+1);
            curr.pop_back();
            target += candidates[i];
            while(i < n - 1 && candidates[i] == candidates[i+1]) i++;
        }
    }
};
