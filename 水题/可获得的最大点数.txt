题目难度：MEDIUM

几张卡牌 排成一行，每张卡牌都有一个对应的点数。

点数由整数数组 cardPoints 给出。

每次行动，你可以从行的开头或者末尾拿一张卡牌，最终你必须正好拿 k 张卡牌。

你的点数就是你拿到手中的所有卡牌的点数之和。

给你一个整数数组 cardPoints 和整数 k，请你返回可以获得的最大点数。

 

示例 1：

输入：cardPoints = [1,2,3,4,5,6,1], k = 3
输出：12
解释：第一次行动，不管拿哪张牌，你的点数总是 1 。
但是，先拿最右边的卡牌将会最大化你的可获得点数。
最优策略是拿右边的三张牌，最终点数为 1 + 6 + 5 = 12 。
示例 2：

输入：cardPoints = [2,2,2], k = 2
输出：4
解释：无论你拿起哪两张卡牌，可获得的点数总是 4 。
示例 3：

输入：cardPoints = [9,7,7,9,7,7,9], k = 7
输出：55
解释：你必须拿起所有卡牌，可以获得的点数为所有卡牌的点数之和。
示例 4：

输入：cardPoints = [1,1000,1], k = 1
输出：1
解释：你无法拿到中间那张卡牌，所以可以获得的最大点数为 1 。 
示例 5：

输入：cardPoints = [1,79,80,1,1,1,200,1], k = 3
输出：202
 

提示：

1 <= cardPoints.length <= 10^5
1 <= cardPoints[i] <= 10^4
1 <= k <= cardPoints.length

思路：周赛第二题（10min10s）：SlidingWindows
（WA点：审题错误）
先看数组长度是不是小于等于给定值，是的话返回数组和即可
否则遍历前给定值数目个数组和
然后逆序遍历数组给定值个长度，滑动窗口长度为指定值，左半部分向左缩，右半部分向左扩
对区间求和，依次取最大值
最后返回最大值即可

上代码：
class Solution {
public:
    int sum = 0, res = 0;
    
    int maxScore(vector<int>& cardPoints, int k) {
        for(int i = 0; i < cardPoints.size(); i++) sum += cardPoints[i];
        if(k >= cardPoints.size()) return sum;
        sum = 0;
        for(int i = 0; i < k; i++) sum += cardPoints[i];
        int cur = k - 1;
        for(int i = cardPoints.size() - 1; i >= cardPoints.size() - k; i--) {
            res = max(res, sum);
            sum += cardPoints[i];
            sum -= cardPoints[cur];
            cur--;
        }
        res = max(res, sum);
        return res;
    }
};