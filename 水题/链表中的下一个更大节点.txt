题目难度：MEDIUM

给出一个以头节点 head 作为第一个节点的链表。

链表中的节点分别编号为：node_1, node_2, node_3, ... 。

每个节点都可能有下一个更大值（next larger value）：

对于 node_i，如果其 next_larger(node_i) 是 node_j.val，那么就有 j > i 且  node_j.val > node_i.val，而 j 是可能的选项中最小的那个。

如果不存在这样的 j，那么下一个更大值为 0 。

返回整数答案数组 answer，其中 answer[i] = next_larger(node_{i+1}) 。

注意：在下面的示例中，诸如 [2,1,5] 这样的输入（不是输出）是链表的序列化表示，其头节点的值为 2，第二个节点值为 1，第三个节点值为 5 。

 

示例 1：

输入：[2,1,5]
输出：[5,5,0]
示例 2：

输入：[2,7,4,3,5]
输出：[7,0,5,5,0]
示例 3：

输入：[1,7,5,1,9,2,5,1]
输出：[7,9,9,9,0,5,0,0]
 

提示：

对于链表中的每个节点，1 <= node.val <= 10^9
给定列表的长度在 [0, 10000] 范围内

思路：链表
遍历链表，中间数组存值
然后逆序遍历该数组，当前一个数比当前数小时，结果数组对应前一个数下标值改为当前数的值
否则像后遍历数组直到大于前一个数的值，把结果数组对应前一个数下标值改为当前数的值，然后结束循环（WA点，否则就向后取大的了）
最后返回结果数组即可

执行用时 :
1640 ms
, 在所有 C++ 提交中击败了
5.61%
的用户
内存消耗 :
44.8 MB
, 在所有 C++ 提交中击败了
5.23%
的用户
（时空都炸了...）

上代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> curr;
    int cur = 0;
    
    vector<int> nextLargerNodes(ListNode* head) {
        while(head != nullptr) {
            curr.push_back(head->val);
            head = head->next;
        }
        vector<int> res(curr.size(), 0);
        for(int i = curr.size() - 1; i >= 1; i--) {
            if(curr[i] > curr[i - 1])
                res[i - 1] = curr[i];
            else {
                for(int j = i + 1; j < curr.size(); j++)
                    if(curr[j] > curr[i - 1]) {
                        res[i - 1] = curr[j];
                        break;
                    }
                if(res[i - 1] == curr[i - 1])
                    res[i - 1] = 0;
            }
        }
        return res;
    }
};