题目难度：EASY

你现在是一场采用特殊赛制棒球比赛的记录员。
这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。
比赛开始时，记录是空白的。
你会得到一个记录操作的字符串列表 ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：
整数 x - 表示本回合新获得分数 x
"+" - 表示本回合新获得的得分是前两次得分的总和。
题目数据保证记录此操作时前面总是存在两个有效的分数。
"D" - 表示本回合新获得的得分是前一次得分的两倍。
题目数据保证记录此操作时前面总是存在一个有效的分数。
"C" - 表示前一次得分无效，将其从记录中移除。
题目数据保证记录此操作时前面总是存在一个有效的分数。
请你返回记录中所有得分的总和。
示例 1：
输入：ops = ["5","2","C","D","+"]
输出：30
解释：
"5" - 记录加 5 ，记录现在是 [5]
"2" - 记录加 2 ，记录现在是 [5, 2]
"C" - 使前一次得分的记录无效并将其移除，记录现在是 [5].
"D" - 记录加 2 * 5 = 10 ，记录现在是 [5, 10].
"+" - 记录加 5 + 10 = 15 ，记录现在是 [5, 10, 15].
所有得分的总和 5 + 10 + 15 = 30
示例 2：
输入：ops = ["5","-2","4","C","D","9","+","+"]
输出：27
解释：
"5" - 记录加 5 ，记录现在是 [5]
"-2" - 记录加 -2 ，记录现在是 [5, -2]
"4" - 记录加 4 ，记录现在是 [5, -2, 4]
"C" - 使前一次得分的记录无效并将其移除，记录现在是 [5, -2]
"D" - 记录加 2 * -2 = -4 ，记录现在是 [5, -2, -4]
"9" - 记录加 9 ，记录现在是 [5, -2, -4, 9]
"+" - 记录加 -4 + 9 = 5 ，记录现在是 [5, -2, -4, 9, 5]
"+" - 记录加 9 + 5 = 14 ，记录现在是 [5, -2, -4, 9, 5, 14]
所有得分的总和 5 + -2 + -4 + 9 + 5 + 14 = 27
示例 3：
输入：ops = ["1"]
输出：1
提示：
1 <= ops.length <= 1000
ops[i] 为 "C"、"D"、"+"，或者一个表示整数的字符串。整数范围是 [-3 * 104, 3 * 104]
对于 "+" 操作，题目数据保证记录此操作时前面总是存在两个有效的分数
对于 "C" 和 "D" 操作，题目数据保证记录此操作时前面总是存在一个有效的分数

思路：模拟
建立数组，遍历给定数组
如果数组当前项等于D，那么建立数组将最后一项乘二的值存进建立数组
否则如果数组当前项等于C，那么建立数组最后一项删除
否则如果数组当前项等于+，那么建立数组后两项的和存进建立数组
否则将当前遍历项转为数字存进数组
最后返回建立数组的和即可

执行用时：
4 ms
, 在所有 C++ 提交中击败了
73.32%
的用户
内存消耗：
8.2 MB
, 在所有 C++ 提交中击败了
51.42%
的用户
（时间不错，空间一般）

上代码：
class Solution {
public:
    vector<int> curr;
    int res = 0;
    
    int calPoints(vector<string>& ops) {
        for(int i = 0; i < ops.size(); i++) {
            if(ops[i] == "D") curr.push_back(curr[curr.size() - 1] * 2);
            else if(ops[i] == "C") {
                vector<int>::iterator it = curr.begin() + curr.size() - 1;
                curr.erase(it);
            } else if(ops[i] == "+") curr.push_back(curr[curr.size() - 1] + curr[curr.size() - 2]);
            else curr.push_back(stoi(ops[i]));
        }
        for(int cur :curr) res += cur;
        return res;
    }
};