题目难度：MEDIUM

判断一个?9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。


数字?1-9?在每一行只能出现一次。

数字?1-9?在每一列只能出现一次。

数字?1-9?在每一个以粗实线分隔的?3x3?宫内只能出现一次。



上图是一个部分填充的有效的数独。


数独部分空格内已填入了数字，空白格用?'.'?表示。



示例?1:

输入:
[
  ["5","3",".",".","7",".",".",".","."],
  
	 	["6",".",".","1","9","5",".",".","."],
  
		[".","9","8",".",".",".",".","6","."],
  
		["8",".",".",".","6",".",".",".","3"],
  
		["4",".",".","8",".","3",".",".","1"],
  
		["7",".",".",".","2",".",".",".","6"],
  
		[".","6",".",".",".",".","2","8","."],
  
		[".",".",".","4","1","9",".",".","5"],
  
		[".",".",".",".","8",".",".","7","9"]
]

输出: true


示例?2:

输入:
[
?["8","3",".",".","7",".",".",".","."],
? 
		["6",".",".","1","9","5",".",".","."],
?
		[".","9","8",".",".",".",".","6","."],
? 
		["8",".",".",".","6",".",".",".","3"],
? 
		["4",".",".","8",".","3",".",".","1"],
? 
		["7",".",".",".","2",".",".",".","6"],
? 
		[".","6",".",".",".",".","2","8","."],
? 
		[".",".",".","4","1","9",".",".","5"],
? 
		[".",".",".",".","8",".",".","7","9"]
]

输出: false


解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
    
 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

说明:

一个有效的数独（部分已被填充）不一定是可解的。

只需要根据以上规则，验证已经填入的数字是否有效即可。

给定数独序列只包含数字?1-9?和字符?'.'?。

给定数独永远是?9x9?形式的。


思路：我的思路是挨个块遍历，比较麻烦
一种简单的思路是先将每个块保存成数组，然后只要不是‘.’就赋对应值为该点值，之后只要看该点有没有被赋值就行了

执行用时 :
20 ms
, 在所有 C++ 提交中击败了
74.33%
的用户
内存消耗 :
9.1 MB
, 在所有 C++ 提交中击败了
99.70%
的用户
炫耀一下:

上代码：
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        // 记录某行，某位数字是否已经被摆放
        bool row[9][10];
        // 记录某列，某位数字是否已经被摆放
        bool col[9][10];
        // 记录某 3x3 宫格内，某位数字是否已经被摆放
        bool block[9][10];
        memset(row, false, sizeof(row));
        memset(col, false, sizeof(col));
        memset(block, false, sizeof(block));
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] != '.') {
                    int num = board[i][j] - '0';
                    if (row[i][num] || col[j][num] || block[i / 3 * 3 + j / 3][num]) {
                        return false;
                    } else {
                        row[i][num] = true;
                        col[j][num] = true;
                        block[i / 3 * 3 + j / 3][num] = true;
                    }
                }
            }
        }
        return true;
    }
};