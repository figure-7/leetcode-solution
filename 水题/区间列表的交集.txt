题目难度：MEDIUM

给定两个由一些闭区间组成的列表，每个区间列表都是成对不相交的，并且已经排序。

返回这两个区间列表的交集。

（形式上，闭区间 [a, b]（其中 a <= b）表示实数 x 的集合，而 a <= x <= b。

两个闭区间的交集是一组实数，要么为空集，要么为闭区间。例如，[1, 3] 和 [2, 4] 的交集为 [2, 3]。）

 

示例：



输入：A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]
输出：[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
注意：输入和所需的输出都是区间对象组成的列表，而不是数组或列表。
 

提示：

0 <= A.length < 1000
0 <= B.length < 1000
0 <= A[i].start, A[i].end, B[i].start, B[i].end < 10^9

思路：SlidingWindows
（TLE1,2,3：情况不全导致死循环）
遍历两个数组，分以下7种情况：
1：数组有交集但不是包含，取交集入结果数组，右边界小的数组下标加一
2：同上
3：数组包含，取交集入结果数组，被包含的数组下标加一
4：同上
5：数组没有交集，右边界小的数组下标加一
6：同上
7：继续遍历
最后返回结果数组即可

执行用时 :
28 ms
, 在所有 C++ 提交中击败了
98.58%
的用户
内存消耗 :
19.1 MB
, 在所有 C++ 提交中击败了
5.95%
的用户
（时间绝杀！空间炸了，原地...）

上代码：
class Solution {
public:
    int i = 0, j = 0;
    vector<vector<int> > res;
    
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {
        while(i < A.size() && j < B.size()) {
            if(A[i][0] <= B[j][0] && A[i][1] <= B[j][1] && A[i][1] >= B[j][0]) {
                res.push_back({B[j][0], A[i][1]});
                i++;
            } else if(A[i][0] >= B[j][0] && A[i][1] >= B[j][1] && A[i][0] <= B[j][1]) {
                res.push_back({A[i][0], B[j][1]});
                j++;
            } else if(A[i][0] <= B[j][0] && A[i][1] >= B[j][1]) {
                res.push_back({B[j][0], B[j][1]});
                j++;
            } else if(A[i][0] >= B[j][0] && A[i][1] <= B[j][1]) {
                res.push_back({A[i][0], A[i][1]});
                i++;
            } else if(A[i][0] >= B[j][1])
                j++;
            else if(B[j][0] >= A[i][1])
                i++;
            else
                continue;
        }
        return res;
    }
};