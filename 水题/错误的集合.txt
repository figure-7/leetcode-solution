题目难度：EASY

集合 s 包含从 1 到 n 的整数。
不幸的是，因为数据错误，导致集合里面某一个数字复制了成了集合里面的另外一个数字的值，导致集合 丢失了一个数字 并且 有一个数字重复 。
给定一个数组 nums 代表了集合 S 发生错误后的结果。
请你找出重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。
示例 1：
输入：nums = [1,2,2,4]
输出：[2,3]
示例 2：
输入：nums = [1,1]
输出：[1,2]
提示：
2 <= nums.length <= 104
1 <= nums[i] <= 104

思路：哈希表
（WA点：审题错误）
遍历数组并用哈希表保存下标为对应数组值，值为数值个数
遍历从一开始数组的长度范围内的所有数，如果对应下标的哈希表值大于1则作为返回结果数组的第一个值
如果哈希表找不到当前遍历值则作为返回结果数组的第二个值
最后返回结果数组即可

执行用时：
72 ms
, 在所有 C++ 提交中击败了
22.45%
的用户
内存消耗：
29.9 MB
, 在所有 C++ 提交中击败了
20.58%
的用户
（时空都不咋地）

上代码：
class Solution {
public:
    int res1 = 0, res2 = 0;
    unordered_map<int, int> map;
    
    vector<int> findErrorNums(vector<int>& nums) {
        for(int cur : nums) {
            if(map.find(cur) !=  map.end()) map[cur]++;
            else map[cur] = 1;
        }
        for(int i = 1; i <= nums.size(); i++) {
            if(map.find(i) != map.end()) {
                if(map[i] > 1) res1 = i;
            } else res2 = i;
        }
        return {res1, res2};
    }
};