题目难度：EASY

对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。

例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。

给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。

 

示例 1：

输入：A = [1,2,0,0], K = 34
输出：[1,2,3,4]
解释：1200 + 34 = 1234
示例 2：

输入：A = [2,7,4], K = 181
输出：[4,5,5]
解释：274 + 181 = 455
示例 3：

输入：A = [2,1,5], K = 806
输出：[1,0,2,1]
解释：215 + 806 = 1021
示例 4：

输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1
输出：[1,0,0,0,0,0,0,0,0,0,0]
解释：9999999999 + 1 = 10000000000
 

提示：

1 <= A.length <= 10000
0 <= A[i] <= 9
0 <= K <= 10000
如果 A.length > 1，那么 A[0] != 0

思路：栈+队列
遍历数组每位即数字每位的数字分别保存进栈和队列（为了计算时每位一次对应，并且从后向前）
中间变量保存进位，然后基本就是板子（我是见多了但是我没有写过...）注意中间变量转换
最后当中间变量不为0时，再在结果数组最后插入1，之后翻转数组
最后返回结果数组即可

执行用时 :
32 ms
, 在所有 C++ 提交中击败了
70.75%
的用户
内存消耗 :
31.3 MB
, 在所有 C++ 提交中击败了
5.11%
的用户
（时间不错，空间炸了）

上代码：
class Solution {
public:
    stack<int> s;
    queue<int> q;
    vector<int> res;
    int curmodthree = 0;
    
    vector<int> addToArrayForm(vector<int>& A, int K) {
        for(int i = 0; i < A.size(); i++)
            s.push(A[i]);
        while(K > 0) {
            q.push(K % 10);
            K /= 10;
        }
        while(!s.empty() && !q.empty()) {
            int cur = s.top();
            int curmodtwo = q.front();
            s.pop();
            q.pop();
            int sum = cur + curmodtwo + curmodthree;
            if(sum >= 10)
                curmodthree = 1;
            else
                curmodthree = 0;
            res.push_back(sum % 10);
        }
        while(!s.empty()) {
            int cur = s.top();
            int sum = cur + curmodthree;
            s.pop();
            if(sum >= 10)
                curmodthree = 1;
            else
                curmodthree = 0;
            res.push_back(sum % 10);
        }
        while(!q.empty()) {
            int cur = q.front();
            int sum = cur + curmodthree;
            q.pop();
            if(sum >= 10)
                curmodthree = 1;
            else
                curmodthree = 0;
            res.push_back(sum % 10);
        }
        if(curmodthree == 1)
            res.push_back(1);
        reverse(res.begin(), res.end());
        return res;
    }
};