题目难度：MEDIUM

给定一个字符串，请将字符串里的字符按照出现的频率降序排列。

示例 1:

输入:
"tree"

输出:
"eert"

解释:
'e'出现两次，'r'和't'都只出现一次。
因此'e'必须出现在'r'和't'之前。
此外，"eetr"也是一个有效的答案。
示例 2:

输入:
"cccaaa"

输出:
"cccaaa"

解释:
'c'和'a'都出现三次。
此外，"aaaccc"也是有效的答案。
注意"cacaca"是不正确的，因为相同的字母必须放在一起。
示例 3:

输入:
"Aabb"

输出:
"bbAa"

解释:
此外，"bbaA"也是一个有效的答案，但"Aabb"是不正确的。
注意'A'和'a'被认为是两种不同的字符。

思路：哈希表
先将字符串排序，然后遍历一次判断有几个相同的字符
跟下一个不同时就取相同字符数的最大值保存进另一个变量中并且将字符作为下标的哈希表之赋值为出现次数，再将次数赋1
循环结束还要再把出现次数值赋给最后一个字符作为下标的哈希表的值，之后再取一次次数最大值
接下来从最大次数开始到0次遍历，对于ASCII码表每个字符进行内部遍历
如果哈希表找到了对应字符并且值为当前外部循环的值，就进行对应外部循环的值的次数的累加，累加字符为当前ASCII码表的字符
直至结束返回结果字符串即可

执行用时 :
388 ms
, 在所有 C++ 提交中击败了
5.07%
的用户
内存消耗 :
11.2 MB
, 在所有 C++ 提交中击败了
22.01%
的用户
（比较暴力的方法，果然时间很差，空间也差，，，）

上代码;
class Solution {
public:
    int cur = 1;
    int sum = 0;
    string res = "";
    unordered_map<char, int> map;
    
    string frequencySort(string s) {
        if(s.length() == 0 || s.length() == 1) return s;
        sort(s.begin(), s.end());
        for(int i = 0; i < s.length() - 1; i++) {
            if(s[i] ==s[i + 1])
                cur++;
            else {
                map[s[i]] = cur;
                sum = max(cur , sum);
                cur = 1;
            }
        }
        map[s[s.length() - 1]] = cur;
        sum = max(sum, cur);
        for(int i = sum; i >= 0; i--) {
            for(int j = 0; j < 100; j++) {
                char ch = j + ' ';
                if(map.find(ch) != map.end() && map[ch] == i) {
                    for(int k = 0; k < i; k++)
                        res+= ch;
                }
            }
        }
        return res;
    }
};