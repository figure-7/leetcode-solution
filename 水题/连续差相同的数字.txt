题目难度：MEDIUM

返回所有长度为 N 且满足其每两个连续位上的数字之间的差的绝对值为 K 的非负整数。

请注意，除了数字 0 本身之外，答案中的每个数字都不能有前导零。

例如，01 因为有一个前导零，所以是无效的；但 0 是有效的。

你可以按任何顺序返回答案。

 

示例 1：

输入：N = 3, K = 7
输出：[181,292,707,818,929]
解释：注意，070 不是一个有效的数字，因为它有前导零。
示例 2：

输入：N = 2, K = 1
输出：[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]
 

提示：

1 <= N <= 9
0 <= K <= 9

思路：BackTracking+DFS
先判断长度为1要在结果数组插入0,（WA点1,2：没有想到，第一次还改错了）
套回溯板子，内部改为一次左右移动即可，利用中间变量就不需要再回调了
相应数组值之间更改，最后结果数组去重（WA点3：例如：22，22，左右移动结果一致）
最后返回结果数组即可

执行用时 :
12 ms
, 在所有 C++ 提交中击败了
25.51%
的用户
内存消耗 :
8.5 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间不咋地，空间完杀！！！）

上代码：
class Solution {
public:
    vector<int> res;
    
    void DFS(int a, int b, int cur, int begin, int cnt) {
        if(cnt == a) {
            res.push_back(cur);
            return;
        }
        int curmodtwo = cur, be = begin;
        be -= b;
        curmodtwo *= 10;
        if(be >= 0) {
            curmodtwo += be;
            DFS(a, b, curmodtwo, be, cnt + 1);
        }
        cur *= 10;
        begin += b;
        if(begin < 10) {
            cur += begin;
            DFS(a, b, cur, begin, cnt + 1);
        }
    }
    
    vector<int> numsSameConsecDiff(int N, int K) {
        if(N == 1)
            res.push_back(0);
        for(int i = 1; i < 10; i++)
            DFS(N, K, i, i, 1);
        for(int i = 0; i < res.size() - 1; i++) {
            if(res[i] == res[i + 1]) {
                vector<int>::iterator it = res.begin() + i;
    	        res.erase(it);
                i--;
            }
        }
        return res;
    }
};