题目难度：MEDIUM

给你两个整数 n 和 start。你的任务是返回任意 (0,1,2,,...,2^n-1) 的排列 p，并且满足：

p[0] = start
p[i] 和 p[i+1] 的二进制表示形式只有一位不同
p[0] 和 p[2^n -1] 的二进制表示形式也只有一位不同
 

示例 1：

输入：n = 2, start = 3
输出：[3,2,0,1]
解释：这个排列的二进制表示是 (11,10,00,01)
     所有的相邻元素都有一位是不同的，另一个有效的排列是 [3,1,0,2]
示例 2：

输出：n = 3, start = 2
输出：[2,6,7,5,4,0,1,3]
解释：这个排列的二进制表示是 (010,110,111,101,100,000,001,011)
 

提示：

1 <= n <= 16
0 <= start < 2^n

思路：先进行格雷码编码算法的实现
然后把start调整为第一个值，之后按顺序遍历回溯一下遍历完数组即可
（就是这个慢了不到一分钟害我没拿奖，差一名！！！）

上代码：
class Solution {
public:
    vector<int> circularPermutation(int n, int start) {
        vector<int> res;
        vector<int> aim;
        int a = 0;
        bool flag = false;
        res.push_back(0);
        for(int i = 0; i < n; i++) {
            const int height_bit = 1 << i;
            for(int j = res.size() - 1; j >= 0; j--) {
                cout<<height_bit;
                cout<<res[j];
                cout<<" ";
                res.push_back(height_bit | res[j]);
            }
        }
        for(int i = 0; i < res.size(); i++) {
            if(res[i] == start) {
                flag = true;
                a = i;
            }
            if(flag)
                aim.push_back(res[i]);
        }
        for(int i = 0; i < a; i++) {
            aim.push_back(res[i]);
        }
        return aim;
    }
};