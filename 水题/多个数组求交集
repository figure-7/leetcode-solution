题目难度：EASY

给你一个二维整数数组 nums ，其中 nums[i] 是由 不同 正整数组成的一个非空数组，按 升序排列 返回一个数组，数组中的每个元素在 nums 所有数组 中都出现过。
示例 1：
输入：nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]
输出：[3,4]
解释：
nums[0] = [3,1,2,4,5]，nums[1] = [1,2,3,4]，nums[2] = [3,4,5,6]，在 nums 中每个数组中都出现的数字是 3 和 4 ，所以返回 [3,4] 。
示例 2：
输入：nums = [[1,2,3],[4,5,6]]
输出：[]
解释：
不存在同时出现在 nums[0] 和 nums[1] 的整数，所以返回一个空列表 [] 。
提示：
1 <= nums.length <= 1000
1 <= sum(nums[i].length) <= 1000
1 <= nums[i][j] <= 1000
nums[i] 中的所有值 互不相同

思路：周赛第一题，模拟
暴力三重遍历，每次更新结果数组即可，就这样（
（WA点：没看好题没排序）

上代码：
class Solution {
public:
    vector<int> intersection(vector<vector<int>>& nums) {
        vector<int> res = nums[0];
        for(int i = 1; i < nums.size(); i++) {
            vector<int> curr;
            for(int j = 0; j < nums[i].size(); j++) {
                for(int k = 0; k < res.size(); k++) {
                    if(nums[i][j] == res[k]) curr.push_back(res[k]);
                }
            }
            res = curr;
        }
        sort(res.begin(), res.end());
        return res;
    }
};
//上班干活，签个到告辞
