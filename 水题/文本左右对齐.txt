题目难度：HARD

给定一个单词数组和一个长度 maxWidth，重新排版单词，使其成为每行恰好有 maxWidth 个字符，且左右两端对齐的文本。

你应该使用“贪心算法”来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格 ' ' 填充，使得每行恰好有 maxWidth 个字符。

要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。

文本的最后一行应为左对齐，且单词之间不插入额外的空格。

说明:

单词是指由非空格字符组成的字符序列。
每个单词的长度大于 0，小于等于 maxWidth。
输入单词数组 words 至少包含一个单词。
示例:

输入:
words = ["This", "is", "an", "example", "of", "text", "justification."]
maxWidth = 16
输出:
[
   "This    is    an",
   "example  of text",
   "justification.  "
]
示例 2:

输入:
words = ["What","must","be","acknowledgment","shall","be"]
maxWidth = 16
输出:
[
  "What   must   be",
  "acknowledgment  ",
  "shall be        "
]
解释: 注意最后一行的格式应为 "shall be    " 而不是 "shall     be",
     因为最后一行应为左对齐，而不是左右两端对齐。       
     第二行同样为左对齐，这是因为这行只包含一个单词。
示例 3:

输入:
words = ["Science","is","what","we","understand","well","enough","to","explain",
         "to","a","computer.","Art","is","everything","else","we","do"]
maxWidth = 20
输出:
[
  "Science  is  what we",
  "understand      well",
  "enough to explain to",
  "a  computer.  Art is",
  "everything  else  we",
  "do                  "
]

执行用时 :
4 ms
, 在所有 cpp 提交中击败了
75.44%
的用户
内存消耗 :
9.1 MB
, 在所有 cpp 提交中击败了
32.03%
的用户
（一般般）

思路：没啥好说的，啥算法操作都没有，暴力模拟即可
具体做法想想就能写出来，就是麻烦码量大，（（懒
HARD水题

上代码：
class Solution {
public:
    int curr = 0;
    string s = "";
    vector<string> res;
    int len = 0;
    int sum = 0;
    int zou = 0;
    
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        for(int i = 0; i < words.size(); i++) {
            string currs = "";
            int lencurr = 0;
            sum++;
            for(int j = 0; j < words[i].size(); j++) {
                curr++;
                len++;
                lencurr++;
            }
            if(curr > maxWidth) {
                sum--;
                len -= lencurr;
                int yu = maxWidth - len;
                if(sum - 1 > 0) {
                    sum--;
                    int begin = yu % sum;
                    int end = yu /sum;
                    int beginmodtwo = begin;
                    for(int k = zou; k < i; k++) {
                        for(int a = 0; a < words[k].size(); a++)
                            currs += words[k][a];
                        if(k < i - 1) {
                            if(beginmodtwo > 0)
                                currs += " ";
                            for(int a = 0; a < end; a++)
                                currs += " ";
                            beginmodtwo--;
                        }
                    }
                    zou = i;
                }
                else {
                    for(int a = 0; a < words[i - 1].size(); a++)
                        currs += words[i - 1][a];
                    while(currs.length() < maxWidth)
                        currs += " ";
                }
                res.push_back(currs);
                currs = s;
                curr = 0;
                len = 0;
                zou = i;
                i--;
                sum = 0;
            }
            else {
                curr++;
            }
        }
        string currsmodtwo = "";
        for(int k = zou; k < words.size(); k++) {
            for(int a = 0; a < words[k].size(); a++)
                currsmodtwo += words[k][a];
            if(k < words.size() - 1)
                    currsmodtwo += " ";
        }
        while(currsmodtwo.length() < maxWidth)
            currsmodtwo += " ";
        res.push_back(currsmodtwo);
        return res;
    }
};