题目难度：MEDIUM

UTF-8 中的一个字符可能的长度为 1 到 4 字节，遵循以下的规则：

对于 1 字节的字符，字节的第一位设为0，后面7位为这个符号的unicode码。
对于 n 字节的字符 (n > 1)，第一个字节的前 n 位都设为1，第 n+1 位设为0，后面字节的前两位一律设为10。
剩下的没有提及的二进制位，全部为这个符号的unicode码。
这是 UTF-8 编码的工作方式：

   Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+---------------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
给定一个表示数据的整数数组，返回它是否为有效的 utf-8 编码。

注意:
输入是整数数组。只有每个整数的最低 8 个有效位用来存储数据。这意味着每个整数只表示 1 字节的数据。

示例 1:

data = [197, 130, 1], 表示 8 位的序列: 11000101 10000010 00000001.

返回 true 。
这是有效的 utf-8 编码，为一个2字节字符，跟着一个1字节字符。
示例 2:

data = [235, 140, 4], 表示 8 位的序列: 11101011 10001100 00000100.

返回 false 。
前 3 位都是 1 ，第 4 位为 0 表示它是一个3字节字符。
下一个字节是开头为 10 的延续字节，这是正确的。
但第二个延续字节不以 10 开头，所以是不符合规则的。

思路：枚举
直接逆序遍历数组，根据题目给出的数据格式，设一个全局变量，初值0，分7种情况：
1：当前值小于128（即0xxxxxxx），直接继续即可
2：当前值大于等于128并且小于192时（即10xxxxxx），全局变量加一即可
3：当前值大于等于192并且小于224时并且全局变量不等于一时（即110xxxxx 10xxxxxx），返回false即可
4：当前值大于等于224并且小于240时并且全局变量不等于二时（即1110xxxx 10xxxxxx 10xxxxxx），返回false即可
5：当前值大于等于240并且小于248时并且全局变量不等于三时（即11110xxx 10xxxxxx 10xxxxxx 10xxxxxx），返回false即可
6：当前值大于等于248时，返回false即可（注意只有四种大于等于192的格式，没有再大的数据格式了，WA点1）
7：此外，全局变量赋值0即可（即构成长串式子结束）
最后返回三元运算符当全局变量值为0返回true，否则false即可（WA点2）

执行用时 :
12 ms
, 在所有 C++ 提交中击败了
89.32%
的用户
内存消耗 :
9.5 MB
, 在所有 C++ 提交中击败了
37.50%
的用户
（时间不错，空间不太好，原地啊。。。迷）

上代码：
class Solution {
public:
    int sum = 0;
    
    bool validUtf8(vector<int>& data) {
        for(int i = data.size() - 1; i >= 0; i--) {
            if(data[i] < 128)
                continue;
            else if(data[i] >= 128 && data[i] < 192)
                sum++;
            else if(data[i] >= 192 && data[i] < 224 && sum != 1)
                return false;
            else if(data[i] >= 224 && data[i] < 240 && sum != 2)
                return false;
            else if(data[i] >= 240 && data[i] < 248 && sum != 3)
                return false;
            else if(data[i] >= 248)
                return false;
            else
                sum = 0;
        }
        cout<<sum;
        return sum == 0 ? true : false;
    }
};