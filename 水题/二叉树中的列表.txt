题目难度：MEDIUM

给你一棵以 root 为根的二叉树和一个 head 为第一个节点的链表。

如果在二叉树中，存在一条一直向下的路径，且每个点的数值恰好一一对应以 head 为首的链表中每个节点的值，那么请你返回 True ，否则返回 False 。

一直向下的路径的意思是：从树中某个节点开始，一直连续向下的路径。

 

示例 1：



输入：head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
输出：true
解释：树中蓝色的节点构成了与链表对应的子路径。
示例 2：



输入：head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
输出：true
示例 3：

输入：head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
输出：false
解释：二叉树中不存在一一对应链表的路径。
 

提示：

二叉树和链表中的每个节点的值都满足 1 <= node.val <= 100 。
链表包含的节点数目在 1 到 100 之间。
二叉树包含的节点数目在 1 到 2500 之间。

思路：周赛第三题，树+链表+DFS
先遍历链表并将节点值一次放入数组中，初始化结果值false
然后大DFS进行所有接开始节点的路径遍历，直接套板子即可
内部DFS进行当前节点的路径遍历，剪枝：当前节点不符合数组对应位置的值直接结束
直接套板子，加上内部层数变量即可，当层数变量等于数组长度（即有路径）就把结果值赋true
最后返回结果值即可

上代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> curr;
    bool res = false;
    
    void DFS2(TreeNode* node, int cur) {
        if(node->val == curr[cur])
            cur++;
        else
            return ;
        if(cur == curr.size()) {
            res = true;
            return ;
        }
        if(node->left!= nullptr)
            DFS2(node->left, cur);
        if(node->right!= nullptr)
            DFS2(node->right, cur);
    }
    
    void DFS(TreeNode* node) {
        if(res == true)
            return ;
        if(node->val == curr[0])
            DFS2(node, 0);
        if(node->left!= nullptr)
            DFS(node->left);
        if(node->right!= nullptr)
            DFS(node->right);
    }
    
    bool isSubPath(ListNode* head, TreeNode* root) {
        while(head != nullptr) {
            curr.push_back(head->val);
            head = head->next;
        }
        DFS(root);
        return res;
    }
};