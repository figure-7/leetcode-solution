题目难度：EASY

某种外星语也使用英文小写字母，但可能顺序 order 不同。

字母表的顺序（order）是一些小写字母的排列。

给定一组用外星语书写的单词 words，以及其字母表的顺序 order，只有当给定的单词在这种外星语中按字典序排列时，返回 true；

否则，返回 false。

 

示例 1：

输入：words = ["hello","leetcode"], order = "hlabcdefgijkmnopqrstuvwxyz"
输出：true
解释：在该语言的字母表中，'h' 位于 'l' 之前，所以单词序列是按字典序排列的。
示例 2：

输入：words = ["word","world","row"], order = "worldabcefghijkmnpqstuvxyz"
输出：false
解释：在该语言的字母表中，'d' 位于 'l' 之后，那么 words[0] > words[1]，因此单词序列不是按字典序排列的。
示例 3：

输入：words = ["apple","app"], order = "abcdefghijklmnopqrstuvwxyz"
输出：false
解释：当前三个字符 "app" 匹配时，第二个字符串相对短一些，然后根据词典编纂规则 "apple" > "app"，因为 'l' > '∅'，其中 '∅' 是空白字符，定义为比任何其他字符都小（更多信息）。
 

提示：

1 <= words.length <= 100
1 <= words[i].length <= 20
order.length == 26
在 words[i] 和 order 中的所有字符都是英文小写字母。

思路：哈希表
遍历字典数组存入哈希表，值为下标
然后遍历单词表，每相邻两项一次判断字符对应哈希表值，左大右返回false即可
右大左结束循环（肯定符合）
否则判断当走到右边字符串最后一个字符时，如果左边没有走完返回false即可
最后返回true即可

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
71.55%
的用户
内存消耗 :
9.5 MB
, 在所有 C++ 提交中击败了
5.88%
的用户
（时间不错，空间炸了）

上代码：
class Solution {
public:
    unordered_map<char, int> map;
    
    bool isAlienSorted(vector<string>& words, string order) {
        for(int i = 0; i < order.size(); i++)
            map[order[i]] = i;
        for(int i = 0; i < words.size() - 1; i++) {
            for(int j = 0; j < min(words[i].size(), words[i + 1].size()); j++) {
                if(map[words[i][j]] > map[words[i + 1][j]]) return false;
                else if(map[words[i][j]] < map[words[i + 1][j]]) break;
                else
                    if(j == words[i + 1].size() - 1) if(words[i].size() - 1 > j) return false;
            }
        }
        return true;
    }
};