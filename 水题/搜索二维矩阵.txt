题目难度  Medium
编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：

每行中的整数从左到右按升序排列。
每行的第一个整数大于前一行的最后一个整数。
示例 1:

输入:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
输出: true
示例 2:

输入:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
输出: false

自家独创，因为数组已排好序，先取数组组中间的元素，在向两边扩张，
这样判断比从一侧开始更省时间，时间击败99，空间击败71.
话不多说，上代码：
static const int _ = [](){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    return 0;
}();
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.size()==0) {
            return 0;
        }
        if(matrix[0].size()==0) {
            return 0;
        }
        int a = matrix[0].size()/2;
        int b = matrix.size()/2;
        int flag=-1;
        while(b!=-1 && b!=matrix.size()) {
            if(matrix[b][a]>target) {
            if(flag==0) {
                return false;
            }
            flag = 1;
            if(a>0) {
                    a--;
                }
                else {
                    b--;
                    a = matrix[0].size()-1;
                }
            }
            else if(matrix[b][a]<target) {
                if(flag==1) {
                    return false;
                }
                flag = 0;
                if(a<matrix[0].size()-1) {
                    a++;
                }
                else {
                    b++;
                    a = 0;
                }
            }
            else {
                return true;
            }
        }
        return false;
    }
};