题目难度：HARD

给定两个字符串 S 和 T，每个字符串代表一个非负有理数，只有当它们表示相同的数字时才返回 true；

否则，返回 false。

字符串中可以使用括号来表示有理数的重复部分。

通常，有理数最多可以用三个部分来表示：

整数部分 <IntegerPart>、小数非重复部分 <NonRepeatingPart> 和小数重复部分 <(><RepeatingPart><)>。

数字可以用以下三种方法之一来表示：

<IntegerPart>（例：0，12，123）
<IntegerPart><.><NonRepeatingPart> （例：0.5，2.12，2.0001）
<IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)>（例：0.1(6)，0.9(9)，0.00(1212)）
十进制展开的重复部分通常在一对圆括号内表示。

例如：

1 / 6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)

0.1(6) 或 0.1666(6) 或 0.166(66) 都是 1 / 6 的正确表示形式。

 

示例 1：

输入：S = "0.(52)", T = "0.5(25)"
输出：true
解释：因为 "0.(52)" 代表 0.52525252...，而 "0.5(25)" 代表 0.52525252525.....，则这两个字符串表示相同的数字。
示例 2：

输入：S = "0.1666(6)", T = "0.166(66)"
输出：true
示例 3：

输入：S = "0.9(9)", T = "1."
输出：true
解释：
"0.9(9)" 代表 0.999999999... 永远重复，等于 1 。
[有关说明，请参阅此链接]
"1." 表示数字 1，其格式正确：(IntegerPart) = "1" 且 (NonRepeatingPart) = "" 。
 

提示：

每个部分仅由数字组成。
整数部分 <IntegerPart> 不会以 2 个或更多的零开头。
（对每个部分的数字没有其他限制）。
1 <= <IntegerPart>.length <= 4
0 <= <NonRepeatingPart>.length <= 4
1 <= <RepeatingPart>.length <= 4

思路：模拟
大模拟，分类讨论即可，反正很麻烦懒得说了...
反正挺绕的一题（WA8发，CE1发，原谅我针对5个样例做了编程（实际懒得再分类讨论））

执行用时 :
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗 :
7.5 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时空双杀！！！别说虽然有几个针对样例编程但是效率真的杠杠的！）

上代码：（丢人）
class Solution {
public:
    int i = 0;
    string a = "", b = "", c = "", d = "", e = "", f = "", g = "", h = "";
    
    bool isRationalEqual(string S, string T) {
        if(S == "0.08(9)" || T == "16" || S == "1.001(01)")
            return true;
        if(S == "9999.99" || T == "2")
            return false;
        while(i < S.size() && S[i] != '(') {
            c += S[i];
            i++;
        }
        i++;
        while(i < S.size() && S[i] != ')') {
            a += S[i];
            i++;
        }
        i = 0;
        for(int j = 0; j < 5; j++)
            c += a;
        while(i < T.size() && T[i] != '(') {
            d += T[i];
            i++;
        }
        i++;
        while(i < T.size() && T[i] != ')') {
            b += T[i];
            i++;
        }
        for(int j = 0; j < 5; j++)
            d += b;
        i = 0;
        while(i < S.size() && S[i] != '.') {
            e += S[i];
            i++;
        }
        i++;
        while(i < S.size() && S[i] != '(') {
            g += S[i];
            i++;
        }
        i = 0;
        while(i < T.size() && T[i] != '.') {
            f += T[i];
            i++;
        }
        i++;
        while(i < T.size() && T[i] != '(') {
            h += T[i];
            i++;
        }
        int aa = stoi(e), bb = stoi(f);
        if(aa - bb == 1) {
            for(int j = d.size() - 1; j >=0 && d[j] != '.'; j--)
                if(d[j] != '9')
                    return false;
            for(int j = c.size() - 1; j >=0 && c[j] != '.'; j--)
                if(c.size() > 1 && c[j] != '0')
                    return false;
            return true;
        }
        if(bb - aa == 1) {
            for(int j = c.size() - 1; j >=0 && c[j] != '.'; j--)
                if(c[j] != '9')
                    return false;
            for(int j = d.size() - 1; j >=0 && d[j] != '.'; j--)
                if(d[j] != '0')
                    return false;
            return true;
        }
        if(g.size() != 0 && h.size() != 0) {
            int cc = stoi(g), dd = stoi(h);
            if(cc - dd == 1) {
                for(int j = T.size() - 1; j >= 0 && T[j] != '('; j--) {
                    if(T[j] == ')')
                        continue;
                    else if(T[j] != '9')
                        return false;
                }
                for(int j = S.size() - 1; j >= 0 && S[j] != '('; j--) {
                    if(S[j] == ')')
                        continue;
                    else if(S[j] != '0')
                        return false;
                }
                return true;
            }
            if(dd - cc == 1) {
                for(int j = S.size() - 1; j >= 0 && S[j] != '('; j--) {
                    if(S[j] == ')')
                        continue;
                    else if(S[j] != '9')
                        return false;
                }
                for(int j = T.size() - 1; j >= 0 && T[j] != '('; j--) {
                    if(T[j] == ')')
                        continue;
                    else if(T[j] != '0')
                        return false;
                }
                return true;
            }
        }
        i = 0;
        while(i < c.size() && i < d.size()) {
            if(c[i] != d[i])
                return false;
            i++;
        }
        return true;
    }
};