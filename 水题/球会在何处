题目难度：MEDIUM

用一个大小为 m x n 的二维网格 grid 表示一个箱子。你有 n 颗球。
箱子的顶部和底部都是开着的。
箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。
将球导向右侧的挡板跨过左上角和右下角，在网格中用 1 表示。
将球导向左侧的挡板跨过右上角和左下角，在网格中用 -1 表示。
在箱子每一列的顶端各放一颗球。
每颗球都可能卡在箱子里或从底部掉出来。
如果球恰好卡在两块挡板之间的 "V" 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。
返回一个大小为 n 的数组 answer ，其中 answer[i] 是球放在顶部的第 i 列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 -1 。

示例 1：
输入：grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
输出：[1,-1,-1,-1,-1]
解释：示例如图：
b0 球开始放在第 0 列上，最终从箱子底部第 1 列掉出。
b1 球开始放在第 1 列上，会卡在第 2、3 列和第 1 行之间的 "V" 形里。
b2 球开始放在第 2 列上，会卡在第 2、3 列和第 0 行之间的 "V" 形里。
b3 球开始放在第 3 列上，会卡在第 2、3 列和第 0 行之间的 "V" 形里。
b4 球开始放在第 4 列上，会卡在第 2、3 列和第 1 行之间的 "V" 形里。
示例 2：
输入：grid = [[-1]]
输出：[-1]
解释：球被卡在箱子左侧边上。
示例 3：
输入：grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]
输出：[0,1,2,3,4,-1]
提示：
m == grid.length
n == grid[i].length
1 <= m, n <= 100
grid[i][j] 为 1 或 -1

思路：模拟
遍历给定数组，外部循环中建立变量继承外部遍历下标
内部循环先判断每次移动时是否边界，在边界就存-1到结果数组（初始化空）中（必然卡住）
否则判断判断与下落方向相邻单元格的板子方向是否形成死角，形成死角就存-1到结果数组中（卡住）
否则按照方向修改变量值（加一或减一）
遍历到最后一行就存变量值（也就是结束后的列下标值）到结果数组中
最后返回结果数组即可

执行用时：
16 ms
, 在所有 C++ 提交中击败了
93.62%
的用户
内存消耗：
13 MB
, 在所有 C++ 提交中击败了
16.49%
的用户
（时间不错。空间不咋地）

上代码：
class Solution {
public:
    vector<int> res;

    vector<int> findBall(vector<vector<int>>& grid) {
        for(int i = 0; i < grid[0].size(); i++) {
            int cur = i;
            for(int j = 0; j < grid.size(); j++) {
                if(grid[j][cur] == 1) {
                    if(cur == grid[0].size() - 1) {
                        res.push_back(-1);
                        break;
                    }
                    if(grid[j][cur + 1] == -1) {
                        res.push_back(-1);
                        break;
                    }
                    cur++;
                } else {
                    if(cur == 0) {
                        res.push_back(-1);
                        break;
                    }
                    if(grid[j][cur - 1] == 1) {
                        res.push_back(-1);
                        break;
                    }
                    cur--;
                }
                if(j == grid.size() - 1) res.push_back(cur);
            }
        }
        return res;
    }
};
