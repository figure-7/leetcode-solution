题目难度：MEDIUM

编写一个遍历游程编码序列的迭代器。

迭代器由 RLEIterator(int[] A) 初始化，其中 A 是某个序列的游程编码。

更具体地，对于所有偶数 i，A[i] 告诉我们在序列中重复非负整数值 A[i + 1] 的次数。

迭代器支持一个函数：next(int n)，它耗尽接下来的  n 个元素（n >= 1）并返回以这种方式耗去的最后一个元素。

如果没有剩余的元素可供耗尽，则  next 返回 -1 。

例如，我们以 A = [3,8,0,9,2,5] 开始，这是序列 [8,8,8,5,5] 的游程编码。

这是因为该序列可以读作 “三个八，零个九，两个五”。

 

示例：

输入：["RLEIterator","next","next","next","next"], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]
输出：[null,8,8,5,-1]
解释：
RLEIterator 由 RLEIterator([3,8,0,9,2,5]) 初始化。
这映射到序列 [8,8,8,5,5]。
然后调用 RLEIterator.next 4次。

.next(2) 耗去序列的 2 个项，返回 8。

现在剩下的序列是 [8, 5, 5]。

.next(1) 耗去序列的 1 个项，返回 8。

现在剩下的序列是 [5, 5]。

.next(1) 耗去序列的 1 个项，返回 5。

现在剩下的序列是 [5]。

.next(2) 耗去序列的 2 个项，返回 -1。 
这是由于第一个被耗去的项是 5，
但第二个项并不存在。
由于最后一个要耗去的项不存在，我们返回 -1。
 

提示：

0 <= A.length <= 1000
A.length 是偶数。
0 <= A[i] <= 10^9
每个测试用例最多调用 1000 次 RLEIterator.next(int n)。
每次调用 RLEIterator.next(int n) 都有 1 <= n <= 10^9 。

思路：设计问题
（TLE点）
各个函数功能如下：
RLEIterator：数组继承即可
next：当给定值大于0时循环，先判断数组是不是程度为0，是的话返回-1
否则循环当前数组第一项小于等于给定值时，给定值减去当前数组第一项，结果值预存数组第二项（为了正好删掉数组前两项时，结果被删掉了）
然后删除第一第二项，，如果给定值等于0返回结果值即可
如果数组长度为0并且给定值大于0，返回-1
内循环结束后如果给定值小于数组第一项，数组第一项直接减去给定值，然后返回数组第二项即可
最后外部返回数组第二项即可

执行用时 :
12 ms
, 在所有 C++ 提交中击败了
42.99%
的用户
内存消耗 :
8.5 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间一般，空间完杀！）

上代码：
class RLEIterator {
public:
    vector<int> curr;
    int res = 0;
    
    RLEIterator(vector<int>& A) {
        curr = A;
    }
    
    int next(int n) {
        while(n > 0) {
            if(curr.size() == 0) return -1;
            while(curr[0] <= n) {
                res = curr[1];
                n -= curr[0];
                vector<int>::iterator itb = curr.begin();
    	        curr.erase(itb);
                vector<int>::iterator ita = curr.begin();
    	        curr.erase(ita);
                if(n == 0) return res;
                if(curr.size() == 0 && n > 0) return -1;
            }
            if(n < curr[0]) {
                curr[0] -= n;
                return curr[1];
            }
        }
        return curr[1];
    }
};

/**
 * Your RLEIterator object will be instantiated and called as such:
 * RLEIterator* obj = new RLEIterator(A);
 * int param_1 = obj->next(n);
 */