题目难度：MEDIUM

给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。
请你找出并返回只出现一次的那个数。
你设计的解决方案必须满足 O(log n) 时间复杂度和 O(1) 空间复杂度。
示例 1:
输入: nums = [1,1,2,3,3,4,4,8,8]
输出: 2
示例 2:
输入: nums =  [3,3,7,7,10,11,11]
输出: 10
提示:
1 <= nums.length <= 105
0 <= nums[i] <= 105

思路：二分
正常套二分板子（这里我手写的，可读行不太好...）
初始判断数组长度为1直接返回数组项即可
如果两边为奇数个数的值就返回当前值即可
移动条件为如果当前值与左右都不相等，那么返回当前值即可
否则如果等于左边项
那么如果当前项下标为偶数，区间取左，否则取右
否则如果当前项下标为偶数，区间取右，否则取左
最后返回数组左边项即可

执行用时：
16 ms
, 在所有 C++ 提交中击败了
78.62%
的用户
内存消耗：
21.7 MB
, 在所有 C++ 提交中击败了
75.61%
的用户
（时空都不错）

上代码：
class Solution {
public:
    int l = 0;

    int singleNonDuplicate(vector<int>& nums) {
        int r = nums.size() - 1;
        if(nums.size() == 1) return nums[0];
        if(nums[0] != nums[1]) return nums[0];
        if(nums[nums.size() - 1] != nums[nums.size() - 2]) return nums[nums.size() - 1];
        while(l < r) {
            int mid = l + r;
            mid /= 2;
            if(nums[mid] != nums[mid - 1] && nums[mid] != nums[mid + 1]) return nums[mid];
            if(nums[mid] == nums[mid + 1]) {
                if(mid % 2 == 0) l = mid + 1;
                else r = mid - 1;
            } else {
                if(mid % 2 == 0) r = mid - 1;
                else l = mid + 1;
            }
            cout<<mid<<l<<r<<endl;
        }
        return nums[l];
    }
};
