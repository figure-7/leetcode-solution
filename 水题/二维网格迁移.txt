题目难度：EASY

给你一个 n 行 m 列的二维网格?grid?和一个整数?k。
你需要将?grid?迁移?k?次。


每次「迁移」操作将会引发下述活动：

位于 grid[i][j]?的元素将会移动到?grid[i][j + 1]。

位于?grid[i][m - 1] 的元素将会移动到?grid[i + 1][0]。

位于 grid[n - 1][m - 1]?的元素将会移动到?grid[0][0]。

请你返回?k 次迁移操作后最终得到的 二维网格。

?



示例 1：



输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1

输出：[[9,1,2],[3,4,5],[6,7,8]]


示例 2：



输入：grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4

输出：[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]


示例 3：

输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9

输出：[[1,2,3],[4,5,6],[7,8,9]]
?



提示：

1 <= grid.length <= 50
1 <= grid[i].length <= 50
-1000 <= grid[i][j] <= 1000
0 <= k <= 100



思路：先设计一个二维数组临时存储原数组的值，之后根据上面说的遍历调整原数组的值即可
（一开始m,n整反了，因为样例全是m==n的数组，所以WA一次。。。Σ( ° △ °|||)为何数据都这么特殊啊）
反正水题，优化考虑时间就没做

上代码：
class Solution {
public:
    vector<vector<int>> shiftGrid(vector<vector<int>>& grid, int k) {
        int n = grid.size();
        int m = grid[0].size();
        for(int i = 0; i < k; i++) {
            vector<vector<int> > curr = grid;
            for(int i = 0; i < grid.size(); i++)
                for(int j = 0; j + 1 < grid[i].size(); j++)
                    grid[i][j + 1] = curr[i][j];
            for(int i = 0; i + 1 < grid.size(); i++)
                grid[i + 1][0] = curr[i][m - 1];
            grid[0][0] = curr[n - 1][m - 1];
        }
        return grid;
    }
};