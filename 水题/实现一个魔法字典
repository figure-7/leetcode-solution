题目难度：MEDIUM

设计一个使用单词列表进行初始化的数据结构，单词列表中的单词 互不相同 。
如果给出一个单词，请判定能否只将这个单词中一个字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。
实现 MagicDictionary 类：
MagicDictionary() 初始化对象
void buildDict(String[] dictionary) 使用字符串数组 dictionary 设定该数据结构，dictionary 中的字符串互不相同
bool search(String searchWord) 给定一个字符串 searchWord ，判定能否只将字符串中 一个 字母换成另一个字母，使得所形成的新字符串能够与字典中的任一字符串匹配。
如果可以，返回 true ；否则，返回 false 。
示例：
输入
["MagicDictionary", "buildDict", "search", "search", "search", "search"]
[[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]
输出
[null, null, false, true, false, false]
解释
MagicDictionary magicDictionary = new MagicDictionary();
magicDictionary.buildDict(["hello", "leetcode"]);
magicDictionary.search("hello"); 
// 返回 False
magicDictionary.search("hhllo"); 
// 将第二个 'h' 替换为 'e' 可以匹配 "hello" ，所以返回 True
magicDictionary.search("hell"); 
// 返回 False
magicDictionary.search("leetcoded"); 
// 返回 False
提示：
1 <= dictionary.length <= 100
1 <= dictionary[i].length <= 100
dictionary[i] 仅由小写英文字母组成
dictionary 中的所有字符串 互不相同
1 <= searchWord.length <= 100
searchWord 仅由小写英文字母组成
buildDict 仅在 search 之前调用一次
最多调用 100 次 search

思路：设计问题+哈希表
MagicDictionary（）：啥也不做
buildDict函数：建立二位数组存给定数组长度作为下标，字符串存进数组
建立哈希表存是否有给定长度的字符串
search函数：先判断如果哈希表中没有记录当前长度的字符串直接返回FALSE
否则遍历对应下标的二位数组字符串，如果跟当前给定字符串只差一个字符就返回TRUE
否则遍历结束返回FALSE即可

执行用时：
56 ms
, 在所有 C++ 提交中击败了
70.98%
的用户
内存消耗：
18.3 MB
, 在所有 C++ 提交中击败了
76.05%
的用户
（时空都不错）

上代码：
class MagicDictionary {
public:
    vector<vector<string> > curr;
    unordered_map<int, int> map;

    MagicDictionary() {

    }
    
    void buildDict(vector<string> dictionary) {
        vector<vector<string> > aim(105);
        curr = aim;
        for(int i = 0; i < dictionary.size(); i++) {
            curr[dictionary[i].size()].push_back(dictionary[i]);
            map[dictionary[i].size()] = 1;
        }
    }
    
    bool search(string searchWord) {
        if(map.find(searchWord.size()) == map.end()) return false;
        for(int i = 0; i < curr[searchWord.size()].size(); i++) {
            int sum = 0;
            for(int j = 0; j < curr[searchWord.size()][i].size(); j++) {
                if(searchWord[j] != curr[searchWord.size()][i][j]) sum++;
            }
            if(sum == 1) return true;
        }
        return false;
    }
};

/**
 * Your MagicDictionary object will be instantiated and called as such:
 * MagicDictionary* obj = new MagicDictionary();
 * obj->buildDict(dictionary);
 * bool param_2 = obj->search(searchWord);
 */
