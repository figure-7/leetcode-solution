题目难度：EASY

给定一个整数数组  nums，求出数组从索引 i 到 j（i ≤ j）范围内元素的总和，包含 i、j 两点。
实现 NumArray 类：
NumArray(int[] nums) 使用数组 nums 初始化对象
int sumRange(int i, int j) 返回数组 nums 从索引 i 到 j（i ≤ j）范围内元素的总和，包含 i、j 两点（也就是 sum(nums[i], nums[i + 1], ... , nums[j])）
示例：
输入：
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
输出：
[null, 1, -1, -3]
解释：
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)
numArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) 
numArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))
提示：
0 <= nums.length <= 104
-105 <= nums[i] <= 105
0 <= i <= j < nums.length
最多调用 104 次 sumRange 方法

思路：模拟
新建一个数组
NumArray：新建数据层继承给定数组即可
sumRange：遍历给定两个下标值之间对应数组值的和，返回和即可

执行用时：
352 ms
, 在所有 C++ 提交中击败了
15.94%
的用户
内存消耗：
16.6 MB
, 在所有 C++ 提交中击败了
91.04%
的用户
（时间不在地，空间很好）

上代码：
class NumArray {
public:
    vector<int> curr;
    
    NumArray(vector<int>& nums) {
        curr = nums;
    }
    
    int sumRange(int i, int j) {
        int res = 0;
        for(int k = i; k <= j; k++) res += curr[k];
        return res;
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * int param_1 = obj->sumRange(i,j);
 */