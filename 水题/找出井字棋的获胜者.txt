题目难度：EASY

A 和 B 在一个 3 x 3 的网格上玩井字棋。

井字棋游戏的规则如下：

玩家轮流将棋子放在空方格 (" ") 上。
第一个玩家 A 总是用 "X" 作为棋子，而第二个玩家 B 总是用 "O" 作为棋子。
"X" 和 "O" 只能放在空方格中，而不能放在已经被占用的方格上。
只要有 3 个相同的（非空）棋子排成一条直线（行、列、对角线）时，游戏结束。
如果所有方块都放满棋子（不为空），游戏也会结束。
游戏结束后，棋子无法再进行任何移动。
给你一个数组 moves，其中每个元素是大小为 2 的另一个数组（元素分别对应网格的行和列），它按照 A 和 B 的行动顺序（先 A 后 B）记录了两人各自的棋子位置。

如果游戏存在获胜者（A 或 B），就返回该游戏的获胜者；如果游戏以平局结束，则返回 "Draw"；如果仍会有行动（游戏未结束），则返回 "Pending"。

你可以假设 moves 都 有效（遵循井字棋规则），网格最初是空的，A 将先行动。

 

示例 1：

输入：moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
输出："A"
解释："A" 获胜，他总是先走。
"X  "    "X  "    "X  "    "X  "    "X  "
"   " -> "   " -> " X " -> " X " -> " X "
"   "    "O  "    "O  "    "OO "    "OOX"
示例 2：

输入：moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
输出："B"
解释："B" 获胜。
"X  "    "X  "    "XX "    "XXO"    "XXO"    "XXO"
"   " -> " O " -> " O " -> " O " -> "XO " -> "XO " 
"   "    "   "    "   "    "   "    "   "    "O  "
示例 3：

输入：moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
输出："Draw"
输出：由于没有办法再行动，游戏以平局结束。
"XXO"
"OOX"
"XOX"
示例 4：

输入：moves = [[0,0],[1,1]]
输出："Pending"
解释：游戏还没有结束。
"X  "
" O "
"   "
 

提示：

1 <= moves.length <= 9
moves[i].length == 2
0 <= moves[i][j] <= 2
moves 里没有重复的元素。
moves 遵循井字棋的规则。

思路：周赛1题，建立8个数组，分别保存AB两人的对应行数，列数，两种对角线的棋子数
然后遍历一次，把对应数组值加一，同时判断是否有数组值达到三即可
遍历结束就看数组长度是否等于9，等于就返回"Draw"，否则返回"Pending"
剪枝方法如下：
1：当运行遍历5次，再做数组值是否等于3的遍历判断，因为小于5次不可能有赢家（数组某个值达到3）
2：出现数组值为3直接break
（略麻烦）

上代码：
class Solution {
public:
    int aa[9] = {0}, bb[9] = {0}, cc[18] = {0}, dd[9] = {0}, ee[9] = {0}, ff[18] = {0}, gg[18] = {0}, hh[18] = {0};
    string tictactoe(vector<vector<int>>& moves) {
        for(int i = 0; i < moves.size(); i++) {
            if(i % 2 == 0) {
                aa[moves[i][0]]++;
                bb[moves[i][1]]++;
                cc[2 - moves[i][0] + moves[i][1]]++;
                gg[4 - moves[i][1] - moves[i][0]]++;
            }
            else {
                dd[moves[i][0]]++;
                ee[moves[i][1]]++;
                ff[2 - moves[i][0] + moves[i][1]]++;
                hh[4 - moves[i][1] - moves[i][0]]++;
            }
            if(i >= 4) {
                for(int j = 0; j < 3; j++) {
                    if(aa[j] == 3 || bb[j] == 3)
                        return "A";
                    if(dd[j] == 3 || ee[j] == 3)
                        return "B";
                }
                for(int j = 0; j < 6; j++) {
                    if(cc[j] == 3 || gg[j] == 3)
                        return "A";
                    if(ff[j] == 3 || hh[j] == 3)
                        return "B";
                }
            }
        }
        if(moves.size() == 9)
            return "Draw";
        return "Pending";
    }
};