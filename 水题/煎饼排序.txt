题目难度：MEDIUM

给定数组 A，我们可以对其进行煎饼翻转：

我们选择一些正整数 k <= A.length，然后反转 A 的前 k 个元素的顺序。

我们要执行零次或多次煎饼翻转（按顺序一次接一次地进行）以完成对数组 A 的排序。

返回能使 A 排序的煎饼翻转操作所对应的 k 值序列。

任何将数组排序且翻转次数在 10 * A.length 范围内的有效答案都将被判断为正确。

 

示例 1：

输入：[3,2,4,1]
输出：[4,2,4,3]
解释：
我们执行 4 次煎饼翻转，k 值分别为 4，2，4，和 3。
初始状态 A = [3, 2, 4, 1]
第一次翻转后 (k=4): A = [1, 4, 2, 3]
第二次翻转后 (k=2): A = [4, 1, 2, 3]
第三次翻转后 (k=4): A = [3, 2, 1, 4]
第四次翻转后 (k=3): A = [1, 2, 3, 4]，此时已完成排序。 
示例 2：

输入：[1,2,3]
输出：[]
解释：
输入已经排序，因此不需要翻转任何内容。
请注意，其他可能的答案，如[3，3]，也将被接受。
 

提示：

1 <= A.length <= 100
A[i] 是 [1, 2, ..., A.length] 的排列

思路：模拟
先遍历数组找到最大值，然后如果是当前最后一项（用中间变量记录次数，当前最后一项即为数组长度减去次数，因为后边的已经按序排好了）就继续
否则记录数组下标，结果数组存入该下标
之后两次翻转，第一次把当前最大值翻转给第一个位置
第二次把第一个位置翻转给当前最后一项，结果数组存入最后位置下标（WA点1,2：注意翻转下标位置）
每次循环次数加一
最后返回结果数组即可

执行用时 :
12 ms
, 在所有 C++ 提交中击败了
26.24%
的用户
内存消耗 :
11.3 MB
, 在所有 C++ 提交中击败了
6.15%
的用户
（时间不咋地，空间炸了（但应该跟最优没区别）...）

上代码：
class Solution {
public:
    vector<int> res;
    int cnt = 0, big = 99999999, siz = 0;
    
    vector<int> pancakeSort(vector<int>& A) {
        while(cnt < A.size()) {
            int cur = 0;
            for(int i = 0; i < A.size() - cnt; i++) {
                if(A[i] > cur && A[i] < big) {
                    cur = A[i];
                    siz = i;
                }
            }
            cnt++;
            big = cur;
            if(siz == A.size() - cnt)
                continue;
            else {
                res.push_back(siz + 1);
                reverse(A.begin(), A.begin() + siz + 1);
                res.push_back(A.size() - cnt + 1);
                reverse(A.begin(), A.begin() + A.size() - cnt + 1);
            }
        }
       
        return res;
    }
};