模板1：判断连通后的最小字典序（参见leetcode）
const int MAXN=1e5+50;
int fa[MAXN], siz[MAXN][26];
int getFather(int x){
    return fa[x]=(fa[x]==x?x:getFather(fa[x]));
}
inline void mergeFather(int x, int y){
    int fx=getFather(x), fy=getFather(y);
    if (fx==fy) return;
    if (fx>fy) swap(fx, fy);
    fa[fx]=fy;
    for (int i=0; i<26; i++){
        siz[fy][i]+=siz[fx][i];
        siz[fx][i]=0;
    }
}
fa:当前位置属于哪个并查集
getfather：合成并查集
mergefather：连边
MAXN可根据实际案例大小调整
接下来主函数
int n=s.length(), m=pairs.size();
        for (int i=0; i<n; i++){
            fa[i]=i;
            memset(siz[i], 0, sizeof(siz[i]));
            ++siz[i][s[i]-'a'];
        }
        //初始化并查集
        for (int i=0; i<m; i++){
            int a=pairs[i][0], b=pairs[i][1];
            mergeFather(a, b);
        }
//连边


模板2：判断两个数是否在一个集合内（洛谷）

如题，现在有一个并查集，你需要完成合并和查询操作。

输入格式
第一行包含两个整数N、M，表示共有N个元素和M个操作。

接下来M行，每行包含三个整数Zi、Xi、Yi

当Zi=1时，将Xi与Yi所在的集合合并

当Zi=2时，输出Xi与Yi是否在同一集合内，是的话输出Y；否则话输出N

输出格式
如上，对于每一个Zi=2的操作，都有一行输出，每行包含一个大写字母，为Y或者N

输入输出样例
输入 #1 复制
4 7
2 1 2
1 1 2
2 1 2
1 3 4
2 1 4
1 2 3
2 1 4
输出 #1 复制
N
Y
N
Y
说明/提示
时空限制：1000ms,128M

数据规模：

对于30%的数据，N<=10，M<=20；

对于70%的数据，N<=100，M<=1000；

对于100%的数据，N<=10000，M<=200000。


思路：借鉴别人的详解

并查集，在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，其间要反复查找一个元素在哪个集合中。
这一类问题近几年来反复出现在信息学的国际国内赛题中，其特点是看似并不复杂，但数据量极大，若用正常的数据结构来描述的话，往往在空间上过大，计算机无法承受;即使在空间上勉强通过，运行的时间复杂度也极高，根本就不可能在比赛规定的运行时间(1~3秒)内计算出试题需要的结果，只能用并查集来描述。 (摘自百度)

关于并查集和路径压缩：

有a,b,c三个人

假设a和b打架了，a做了b的小弟。则令f[a]=b;

后来a打赢了c 黑社会

那么c就是a的小弟了。所以，令f[c]=a;

但是，c不知道b，这不符合要求。

所以，我们必须让c的大哥变成最大的老大。

定义函数find

int find(int k){
    if(f[k]==k)return k;
    return find(f[k]);
}

f[c]=find(a);
这时，我们可以使途中经过的人的大哥也变成老大。

//路径压缩
int find(int k){
    if(f[k]==k)return k;
    return f[k]=find(f[k]);
}

f[c]=find(a);
简直是太巧妙了！

而判定两个人的老大是否相等，只需用

if(find(a)==find(b))
就好了。

（在其中，一个人不能有两个老大。当已经有老大的人臣服时，老大也将成为胜利的人的小弟）
上代码：
#include<iostream>
#pragma warning(disable:4996)
#include<cstring>
#include<cstdio>
#include<algorithm>
#include <vector>
#include <queue>
#include <map>
typedef long long ll;
using namespace std;
using namespace std;
int i, j, k, n, m, s, ans, f[10010], p1, p2, p3;
//f[i]表示i的集合名
int find(int k) {
	//路径压缩
	return f[k] = (f[k] == k ? k : find(f[k]));
}
int main()
{
	cin >> n >> m;
	for (i = 1; i <= n; i++)
		f[i] = i;//初始化i的老大为自己
	for (i = 1; i <= m; i++) {
		cin >> p1 >> p2 >> p3;
		if (p1 == 1)
			f[find(p2)] = find(p3);
		//p3打赢了p2
		else
			if (find(p2) == find(p3))
				//是否是一伙的
				printf("Y\n");
			else
				printf("N\n");
	}
	return 0;
}
