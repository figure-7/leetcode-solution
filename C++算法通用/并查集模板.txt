const int MAXN=1e5+50;
int fa[MAXN], siz[MAXN][26];
int getFather(int x){
    return fa[x]=(fa[x]==x?x:getFather(fa[x]));
}
inline void mergeFather(int x, int y){
    int fx=getFather(x), fy=getFather(y);
    if (fx==fy) return;
    if (fx>fy) swap(fx, fy);
    fa[fx]=fy;
    for (int i=0; i<26; i++){
        siz[fy][i]+=siz[fx][i];
        siz[fx][i]=0;
    }
}
fa:当前位置属于哪个并查集
getfather：合成并查集
mergefather：连边
MAXN可根据实际案例大小调整
接下来主函数
int n=s.length(), m=pairs.size();
        for (int i=0; i<n; i++){
            fa[i]=i;
            memset(siz[i], 0, sizeof(siz[i]));
            ++siz[i][s[i]-'a'];
        }
        //初始化并查集
        for (int i=0; i<m; i++){
            int a=pairs[i][0], b=pairs[i][1];
            mergeFather(a, b);
        }
//连边
