看过书籍背包九讲，但是一致没有遇到类似的题
偶然遇到一个部分背包，浪费了比较多时间才出来，其余的遇见了再补充，特此模板：
部分背包：
#include<iostream>
#pragma warning(disable:4996)
#include<cstring>
#include<cstdio>
#include<algorithm>
#include <vector>
#include <queue>
#include <map>
#include <math.h>
#include<fstream>
#include<cmath>
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
using namespace std;
#define Set(a) memset(a,0,sizeof(a))
#define F(i,a,b) for(register int i=a,i##end=b;i<=i##end;++i)
#define UF(i,a,b) for(register int i=a,i##end=b;i>=i##end;--i)
#define openf(a) freopen(#a".in","r",stdin);freopen(#a".out","w",stdout)
#define re register
#define ri re int
#define il inline
#define INF 0x3f3f3f3f
#define MOD 100000000
#define debug() printf("Tairitsu Go PM!\n")
const int mod = 1e9 + 7;
template<typename T> inline T rd(T& x)
{
	T f = 1; x = 0; char c = getchar();
	for (; !isdigit(c); c = getchar()) if (c == '-') f = -1;
	for (; isdigit(c); c = getchar()) x = (x << 3) + (x << 1) + (T)(c - '0');
	x *= f;
	return x;
}
ll rd() { ll x; rd(x); return x; }
inline int max(int a, int b) { return a > b ? a : b; }
inline int min(int a, int b) { return a < b ? a : b; }
const int inf = 1 << 30;
long double res = 0;
//物品信息结构体
struct goodinfo {
	float p; //物品效益
	float w; //物品重量
	float X; //物品该放的数量
	int flag; //物品编号
};

//*********按物品效益，重量比值做升序排列***************//
void Insertionsort(goodinfo goods[], int n)
{
	int j, i;
	for (j = 2; j <= n; j++) {
		goods[0] = goods[j];
		i = j - 1;
		while (goods[0].p > goods[i].p) {
			goods[i + 1] = goods[i];
			i--;
		}
		goods[i + 1] = goods[0];
	}
}

//*********将物品放入背包**************//
void bag(goodinfo goods[], float M, int n) {
	float cu;
	int i, j;
	for (i = 1; i <= n; i++)
		goods[i].X = 0;
	cu = M; //背包剩余容量
	for (i = 1; i < n; i++) {
		if (goods[i].w > cu)//当该物品重量大与剩余容量跳出
			break;
		goods[i].X = 1;
		cu = cu - goods[i].w;//确定背包新的剩余容量
	}
	if (i <= n) goods[i].X = cu / goods[i].w;//该物品所要放的量
	for (j = 2; j <= n; j++) {/*按物品编号做降序排列*/
		goods[0] = goods[j];
		i = j - 1;
		while (goods[0].flag < goods[i].flag) {
			goods[i + 1] = goods[i];
			i--;
		}
		goods[i + 1] = goods[0];
	}
	for (i = 1; i <= n; i++)
		res += goods[i].X * goods[i].p * goods[i].w;
}

//*************主函数***************//
int main() {
	int n;
	char j;
	float M;
	goodinfo* goods;//定义一个指针
		cin >> n;
		goods = new struct goodinfo[n + 1];//
		cin >> M;
		int i;
		long double cur = 0, curmodtwo = 0;
		for (i = 1; i <= n; i++) {
			goods[i].flag = i;
			cin >> goods[i].w;
			cin >> goods[i].p;
			cur += goods[i].p;
			curmodtwo += goods[i].w;
			goods[i].p = goods[i].p / goods[i].w;//得出物品的重量比
		}
		if(curmodtwo < M)
			printf("%.2Lf", cur);
		else {
			Insertionsort(goods, n);
			bag(goods, M, n);
			printf("%.2Lf", res);
		}
}