所有区间最小值和
int N = A.size();
stack<int> st;
vector<long> sums(N, 0);
for (int i = 0; i < N; ++i) {
	while (!st.empty() && A[st.top()] >= A[i]) {
		st.pop();
        }
        if (st.empty()) {
                sums[i] = A[i] * (i + 1);
        } else {
                sums[i] = sums[st.top()] + A[i] * (i - st.top());
        }
        sums[i] %= M;
        st.push(i);
}
long res = 0;
for (auto x : sums) {
        res += x;
        res %= M;
}
return res;

求每头牛能看到的牛数量之和
int n;
while(~scanf("%d",&n))
{
	stack<int>a;
	int num;
	Ull ans=0;
	for(int i=0;i<n;i++)
	{
		scanf("%d",&num);
		while(!a.empty()&&a.top()<=num) a.pop();
		ans+=a.size();
		a.push(num);
	}
printf("%lu\n",ans);
}

数组内比8大的数大于比8小的数最大长度：
int longestWPI(vector<int>& hours) {
        vector<int> days;
        for (int i = 0; i < hours.size(); i++) {
            if (hours[i] > 8) {
                days.push_back(1);
            } else {
                days.push_back(-1);
            }
        }
        vector<int> sum(days.size() + 1, 0);
        for (int i = 0; i < days.size(); i++) {
            sum[i+1] = sum[i] + days[i];
        }
        stack<int> decreaseStack;
        for (int i = 0; i < sum.size(); i++) {
            if (decreaseStack.empty()) {
                decreaseStack.push(i);
            } else {
                if (sum[decreaseStack.top()] > sum[i]) {
                    decreaseStack.push(i);
                }
            }
        }
        int maxDays = 0;
        for (int i = sum.size() - 1; i > 0; i--) {
            while(! decreaseStack.empty() && sum[decreaseStack.top()] < sum[i]) {
                maxDays = max(maxDays, i - decreaseStack.top());
                decreaseStack.pop();
            }
        }
        return maxDays;
    }
