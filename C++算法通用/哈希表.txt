1.哈希表的建立函数
unordered_map<类型,类型> 表名
或者直接继承数组
unordered_set<int> numsSet(nums.begin(), nums.end());
或者作为改动的继承固定哈希表
unordered_map<string, int> unused(wordCount);

2.哈希表的查找
表名.count(查找下标出现个数)
表名.find(同上)

2.哈希表的遍历结束
表名.end()已经查找完毕，没有所得值
cnt.begin()->first表示对应哈希表第一项的值的下标值
pos->second == XX 表示对应哈希表find的值等于XX

3.哈希表删值
表名.erase（所删值）

4.高级表设置汇总：
map<string, set<pair<int, string> > > v;
这里值是字符串类型，下标是pair类型（对类型，见通用操作里的文件有解释）
v[user[i]].insert(make_pair(time[i], web[i]));
插入这样插
注意用auto形式遍历值的时候如果是pair类型或多值对类型要用指针
例如下面这段使用：
unordered_map<string, map<int, string>> m;
map<int, string>*t_s_m = &m[key]; // 关键：要使用引用，不使用引用频繁内存拷贝会导致超时
        if ((*t_s_m).find(timestamp) == (*t_s_m).end()) { // 查找失败
            (*t_s_m)[timestamp] = ""; // 零时插入，map 会根据 timestamp 排序。
            auto it = (*t_s_m).find(timestamp); it--; // 那么 it-- ，就是比当前插入的 timestamp 小的值
            string result = (*it).second;
            (*t_s_m).erase(timestamp); // 删除零时插入值。
            return result;
        }
        else { // 查找成功
            return (*t_s_m)[timestamp];
        }
