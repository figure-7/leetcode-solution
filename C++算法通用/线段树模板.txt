Node lTree(0,n-1)：n-1个节点的线段树

void dfs(vector<vector<int>>& vSun,int node,int &dfn){
        vIN[node]=++dfn;
        for(auto x:vSun[node]){
            dfs(vSun,x,dfn);
        }
        vOUT[node]=dfn;
    }
//节点插入构造线段树

for(auto ls:leadership){
            vSun[ls[0]].push_back(ls[1]);
        }
        int dfn=-1;
        dfs(vSun,1,dfn);
//节点保存带入构造函数

lTree.update(vIN[op[1]],vIN[op[1]],op[2]);：当个节点值（op[1]）累加值(op[2])

lTree.update(vIN[op[1]],vOUT[op[1]],op[2])：当个节点及该节点所有孩子值（op[1]）累加值(op[2])

class Node {
public:
    Node* l;
    Node* r;
    int s;
    int e;
    int m;
    LL sum;   ///节点修改
    LL val;   ///区间修改，对子孙节点求和才需要，本节点不需要
    bool tag;   ///是否为叶子节点，true为叶子节点
    Node(int s, int e) : l(nullptr), r(nullptr), s(s), e(e), m((s+e)/2),sum(0), val(0), tag(true) {}
    Node* Left() {
        if (s == e) return nullptr;
        l = l ? l : new Node(s, m);
        return l;
    }
    Node* Right() {
        if (s == e) return nullptr;
        r = r ? r : new Node(m+1, e);
        return r;
    }
    void update(int start, int end, int newVal) {
        //cout<<start<<" "<<end<<endl;

        sum+=(LL)newVal*(end-start+1); 
        sum%=BASE;
        if (s == start && e == end){
            val += newVal;
            return;
        }
        if (tag) {
            Left()->update(s, m, 0);
            Right()->update(m+1, e, 0);
            tag = false;
        }
        if (end <= m) Left()->update(start, end, newVal);
        else if (start >= m+1) Right()->update(start, end, newVal);
        else {
            Left()->update(start, m, newVal);
            Right()->update(m+1, end, newVal);
        }
    }
    int query(int start, int end,LL add) {
        LL res=0;
        if (s == start && e == end){
            res=sum+add*(end-start+1);
            res%=BASE;
            return res;
        } 
        add+=val;
        
        if (tag) {
            res=add*(end-start+1);
            res%=BASE;
            return res;
        }
        
        if (end <= m) return Left()->query(start, end,add);
        if (start >= m+1) return Right()->query(start, end,add);
        return (Left()->query(start, m,add)+Right()->query(m+1, end,add))%BASE;
    }
};