题目难度：MEDIUM

我们将石头放置在二维平面中的一些整数坐标点上。

每个坐标点上最多只能有一块石头。

每次 move 操作都会移除一块所在行或者列上有其他石头存在的石头。

请你设计一个算法，计算最多能执行多少次 move 操作？

 

示例 1：

输入：stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
输出：5
示例 2：

输入：stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]
输出：3
示例 3：

输入：stones = [[0,0]]
输出：0
 

提示：

1 <= stones.length <= 1000
0 <= stones[i][j] < 10000

思路：并查集
（读不懂题。。。）
接下来上题解区题解：
c++ 并查集 ，看了大佬的思路，才知道可以把行列 合并起来，=_= , 我是按照同行同列将 石头链接起来，看存在几个集合，每个集合都可以删除到最后一个石头，所以可删除的石头就是 总石头数 - 集合数
总结了一些其它 并查集的相关问题 https://blog.csdn.net/junqing_wu/article/details/104697226

执行用时 :
300 ms
, 在所有 C++ 提交中击败了
8.06%
的用户
内存消耗 :
12.4 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间炸了，空间完杀！）

上代码：
class DSU{

public:
    int* parent;
    int cnt;

    DSU(int n):parent(new int[n]),cnt(n){
        for(int i=0;i<n;i++) parent[i] = i;
    }

    int find(int a){
        if(a != parent[a]) parent[a] = find(parent[a]);
        return parent[a];
    }

    void union_elem(int a,int b){
        int aroot = find(a);
        int broot = find(b);
        if(aroot!=broot){
            parent[aroot] = broot;
            cnt-=1;
        }
    }

};



class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();
        if(!n) return 0;
        DSU uf(n);
        
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                if(stones[i][0] == stones[j][0] || 
                    stones[i][1] == stones[j][1]){
                        uf.union_elem(i,j);
                    }
            }
        }
        return n-uf.cnt;
    }
};