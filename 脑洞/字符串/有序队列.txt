题目难度：HARD

给出了一个由小写字母组成的字符串 S。

然后，我们可以进行任意次数的移动。

在每次移动中，我们选择前 K 个字母中的一个（从左侧开始），将其从原位置移除，并放置在字符串的末尾。

返回我们在任意次数的移动之后可以拥有的按字典顺序排列的最小字符串。

 

示例 1：

输入：S = "cba", K = 1
输出："acb"
解释：
在第一步中，我们将第一个字符（“c”）移动到最后，获得字符串 “bac”。
在第二步中，我们将第一个字符（“b”）移动到最后，获得最终结果 “acb”。
示例 2：

输入：S = "baaca", K = 3
输出："aaabc"
解释：
在第一步中，我们将第一个字符（“b”）移动到最后，获得字符串 “aacab”。
在第二步中，我们将第三个字符（“c”）移动到最后，获得最终结果 “aaabc”。
 

提示：

1 <= K <= S.length <= 1000
S 只由小写字母组成。

思路：模拟
（写了半天没出来，是个数学题。。。WA5发！）接下来上题解区题解：
当K>1时，我们可以通过移动将任意一个字符放置到第一位。
然后再通过移动1~N的字符将第一位的字符插入任意一个字符后面。

例如：
aedcb
我们可以通过移动将b放到第一位
aedcb->edcba->dcbae->cbaed->baedc
再移动1~N的字符成如下情况
b aedc-> b edca
接下来即可将b插入a后面
edcba

重复上面步骤可以将任意字符插入至任意位置，相当于可以随意移动。
那么S最终一定是最小字典序，那么直接排序即可。

对于K=1的情况，
将S首尾相接，直接暴力查找所有情况下最小排序。

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
56.91%
的用户
内存消耗 :
9.1 MB
, 在所有 C++ 提交中击败了
80.21%
的用户
（时间一般，空间不错）

上代码：
class Solution {
public:
    string orderlyQueue(string S, int K) {
        if (S.size() == 1) {
            return S;
        }
                                          
        if (K >= 2 || K >= S.size()) {
            sort(S.begin(), S.end());
            return S;
        }
        
        vector<string> ret;
        string s = S + S;
        sort(S.begin(), S.end());

        int len = S.size();
        for (int i = 0; i < S.size(); ++i) {
            // 最小字典序最小的肯定在第一位
            if (s[i] == S[0]) {
                string tmp = s.substr(i, len);
                ret.push_back(tmp);    
            }
        }
        sort(ret.begin(), ret.end());
        return ret[0]; 
    }
};