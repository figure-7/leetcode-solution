题目难度：HARD

给你一个整数 n，请你帮忙统计一下我们可以按下述规则形成多少个长度为 n 的字符串：

字符串中的每个字符都应当是小写元音字母（'a', 'e', 'i', 'o', 'u'）
每个元音 'a' 后面都只能跟着 'e'
每个元音 'e' 后面只能跟着 'a' 或者是 'i'
每个元音 'i' 后面 不能 再跟着另一个 'i'
每个元音 'o' 后面只能跟着 'i' 或者是 'u'
每个元音 'u' 后面只能跟着 'a'
由于答案可能会很大，所以请你返回 模 10^9 + 7 之后的结果。

 

示例 1：

输入：n = 1
输出：5
解释：所有可能的字符串分别是："a", "e", "i" , "o" 和 "u"。
示例 2：

输入：n = 2
输出：10
解释：所有可能的字符串分别是："ae", "ea", "ei", "ia", "ie", "io", "iu", "oi", "ou" 和 "ua"。
示例 3：

输入：n = 5
输出：68
 

提示：

1 <= n <= 2 * 10^4

思路：模拟
接下来上题解区题解：
我们发现每一个序列往后加一个字母， 只和前一个字符有关。 
利用加法原理， 可以直接推出。
我们用f(i, char)f(i,char)来表示前ii个字符以charchar结尾和合法字符串数量。
则由规则可以得到。
f(i, 'a') = f(i-1, 'e') + f(i-1, 'i') + f(i-1, 'u')f(i, 
′
 a 
′
 )=f(i−1, 
′
 e 
′
 )+f(i−1, 
′
 i 
′
 )+f(i−1, 
′
 u 
′
 )
其余类推。
注意取模的时候， 因为1e9 + 7 比较大， 5e9会超过int上限， 所以最后一步的时候需要连续取模或者转为long long.

上代码：
class Solution {
public:
    int countVowelPermutation(int n) {
        long long a = 1, e = 1, i = 1, o = 1, u = 1;
        long long res = 0, mod = 1e9+7;
        for(int j=1; j<n; j++) {
            long long a1, e1, i1, o1, u1;
            a1 = (e + i + u) % mod;
            e1 = (a + i) % mod;
            i1 = (e + o) % mod;
            o1 = i;
            u1 = (i + o) % mod;
            a = a1, e = e1, i = i1, o = o1, u = u1;
        }
        res = (a + e + i + o + u) % mod;
        return res;
    }
};