题目难度：EASY

你有一个日志数组 logs。

每条日志都是以空格分隔的字串。

对于每条日志，其第一个字为字母数字标识符。然后，要么：

标识符后面的每个字将仅由小写字母组成，或；
标识符后面的每个字将仅由数字组成。
我们将这两种日志分别称为字母日志和数字日志。

保证每个日志在其标识符后面至少有一个字。

将日志重新排序，使得所有字母日志都排在数字日志之前。

字母日志按内容字母顺序排序，忽略标识符；

在内容相同时，按标识符排序。

数字日志应该按原来的顺序排列。

返回日志的最终顺序。

 

示例 ：

输入：["a1 9 2 3 1","g1 act car","zo4 4 7","ab1 off key dog","a8 act zoo"]
输出：["g1 act car","a8 act zoo","ab1 off key dog","a1 9 2 3 1","zo4 4 7"]
 

提示：

0 <= logs.length <= 100
3 <= logs[i].length <= 100
logs[i] 保证有一个标识符，并且标识符后面有一个字。

思路：模拟
接下来上题解区题解：
一个stable_sort自定义cmp函数就够了，不过效率略低

执行用时 :
40 ms
, 在所有 C++ 提交中击败了
12.60%
的用户
内存消耗 :
15.2 MB
, 在所有 C++ 提交中击败了
29.17%
的用户
（时空都不咋地）

上代码：
class Solution {
public:
	static bool cmp(string s1, string s2){
		int idx1 = s1.find(' ');
		int idx2 = s2.find(' ');
		if (isalpha(s1[idx1 + 1]) && isalpha(s2[idx2 + 1]))
			return s1.substr(idx1 + 1) == s2.substr(idx2 + 1) ? s1.substr(0, idx1) < s2.substr(0, idx2) : s1.substr(idx1 + 1) < s2.substr(idx2 + 1) ;
		else if (isdigit(s1[idx1 + 1]) && isdigit(s2[idx2 + 1]))
			return false;
		else
			return isalpha(s1[idx1 + 1]) && isdigit(s2[idx2 + 1]);
    //return改成return isalpha(s1[idx1 + 1])其实也足够了
	}

	vector<string> reorderLogFiles(vector<string>& logs) {
		stable_sort(logs.begin(), logs.end(), cmp);
        return logs;
    }
};