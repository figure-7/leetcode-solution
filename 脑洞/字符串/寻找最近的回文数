题目难度：HARD

给定一个表示整数的字符串 n ，返回与它最近的回文整数（不包括自身）。
如果不止一个，返回较小的那个。
“最近的”定义为两个整数差的绝对值最小。
示例 1:
输入: n = "123"
输出: "121"
示例 2:
输入: n = "1"
输出: "0"
解释: 0 和 2是最近的回文，但我们返回最小的，也就是 0。
提示:
1 <= n.length <= 18
n 只由数字组成
n 不含前导 0
n 代表在 [1, 1018 - 1] 范围内的整数

思路：模拟
接下来上题解区题解：
构造回文整数有一个直观的方法：
用原数的较高位的数字替换其对应的较低位。
例如，对于数 1234512345，我们可以用 11 替换 55，用 22 替换 44，这样原数即变为回文整数 1232112321。
在这种方案中，我们修改的都是较低位的数字，因此构造出的新的整数与原数较为接近。
大部分情况下，这种方案是最优解，但还有部分情况我们没有考虑到。
构造的回文整数大于原数时，我们可以减小该回文整数的中间部分来缩小回文整数和原数的差距。
例如，对于数 9932199321，我们将构造出回文整数 9939999399，实际上 9929999299 更接近原数。
当我们减小构造的回文整数时，可能导致回文整数的位数变化。
例如，对于数 100100，我们将构造出回文整数 101101，减小其中间部分将导致位数减少。
得到的回文整数形如 999\dots 999999…999（10^{\textit{len}}-110 
len
 −1）。
构造的回文整数小于原数时，我们可以增大该回文整数的中间部分来缩小回文整数和原数的差距。
例如，对于数 1239912399，我们将构造出回文整数 1232112321，实际上 1242112421 更接近原数。
当我们增大构造的回文整数时，可能导致回文整数的位数变化。
例如，对于数 998998，我们将构造出回文整数 999999，增大其中间部分将导致位数增加。
得到的回文整数形如 100\dots 001100…001（10^{\textit{len}}+110 
len
 +1）。
构造的回文整数等于原数时，由于题目约定，我们需要排除该回文整数，在其他的可能情况中寻找最近的回文整数。
考虑到以上所有的可能，我们可以给出最终的方案：
分别计算出以下每一种可能的方案对应的回文整数，在其中找到与原数最近且不等于原数的数即为答案。
用原数的前半部分替换后半部分得到的回文整数。
用原数的前半部分加一后的结果替换后半部分得到的回文整数。
用原数的前半部分减一后的结果替换后半部分得到的回文整数。
为防止位数变化导致构造的回文整数错误，因此直接构造 999\dots 999999…999 和 100\dots 001100…001 作为备选答案。

执行用时：
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗：
6.3 MB
, 在所有 C++ 提交中击败了
20.96%
的用户
（时间完杀！！！空间炸了）

上代码：
class Solution {
public:
    vector<long> getCandidates(const string& n) {
        int len = n.length();
        vector<long> candidates = {
            (long)pow(10, len - 1) - 1,
            (long)pow(10, len) + 1,
        };
        long selfPrefix = stol(n.substr(0, (len + 1) / 2));
        for (int i : {selfPrefix - 1, selfPrefix, selfPrefix + 1}) {
            string prefix = to_string(i);
            string candidate = prefix + string(prefix.rbegin() + (len & 1), prefix.rend());
            candidates.push_back(stol(candidate));
        }
        return candidates;
    }

    string nearestPalindromic(string n) {
        long selfNumber = stol(n), ans = -1;
        const vector<long>& candidates = getCandidates(n);
        for (auto& candidate : candidates) {
            if (candidate != selfNumber) {
                if (ans == -1 ||
                    abs(candidate - selfNumber) < abs(ans - selfNumber) ||
                    abs(candidate - selfNumber) == abs(ans - selfNumber) && candidate < ans) {
                    ans = candidate;
                }
            }
        }
        return to_string(ans);
    }
};
