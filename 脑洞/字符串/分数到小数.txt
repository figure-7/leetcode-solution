题目难度：MEDIUM

给定两个整数，分别表示分数的分子 numerator 和分母 denominator，以字符串形式返回小数。

如果小数部分为循环小数，则将循环的部分括在括号内。

示例 1:

输入: numerator = 1, denominator = 2
输出: "0.5"
示例 2:

输入: numerator = 2, denominator = 1
输出: "2"
示例 3:

输入: numerator = 2, denominator = 3
输出: "0.(6)"

思路：在小数部分如果出现两次除数相同的情况即说明是循环小数，具体看代码注释

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
74.02%
的用户
内存消耗 :
8.8 MB
, 在所有 C++ 提交中击败了
74.61%
的用户

上代码：
class Solution {
public:
    string fractionToDecimal(int numerator, int denominator) {
        string result;
        if(denominator == 0)
            return result;
        long long num = static_cast<long long>(numerator);
        long long denom = static_cast<long long>(denominator);
        //处理符号
        if((num < 0 && denom > 0) || (num > 0 && denom < 0))
            result += "-";
        num = abs(num);
        denom = abs(denom);
        //处理整数部分
        result += to_string(num / denom);
        num %= denom;
        //处理小数部分
        if(num)
            result += ".";
        //利用hash表记录出现过的除数从而定位循环
        unordered_map<long long, int> map;
        int index = 0;//当前index - map[num]可以定位循环的长度
        while(num && map.find(num) == map.end()) {
            map[num] = index++;
            num *= 10;
            result += to_string(num / denom);
            num %= denom;
        }
        //如果是出现了循环小数
        if(map.find(num) != map.end()) {
            result += "()";
            int cur = result.size() - 2;
            while(index-- > map[num]) {
                swap(result[cur], result[cur - 1]);
                --cur;
            }
        }
        return result;
    }
};