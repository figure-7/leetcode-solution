题目难度：MEDIUM

给定一个较长字符串big和一个包含较短字符串的数组smalls，设计一个方法，根据smalls中的每一个较短字符串，对big进行搜索。
输出smalls中的字符串在big里出现的所有位置positions，其中positions[i]为smalls[i]出现的所有位置。
示例：
输入：
big = "mississippi"
smalls = ["is","ppi","hi","sis","i","ssippi"]
输出： [[1,4],[8],[],[3],[1,4,7,10],[5]]
提示：
0 <= len(big) <= 1000
0 <= len(smalls[i]) <= 1000
smalls的总字符数不会超过 100000。
你可以认为smalls中没有重复字符串。
所有出现的字符均为英文小写字母。

思路：模拟
接下来上题解区题解：
遍历smalls, 用find函数循环查找子串，加入到结果中

执行用时：
80 ms
, 在所有 C++ 提交中击败了
97.57%
的用户
内存消耗：
24.6 MB
, 在所有 C++ 提交中击败了
93.69%
的用户
（时空都绝杀！）

上代码：
class Solution {
public:
    vector<vector<int>> multiSearch(string big, vector<string>& smalls) {
        vector<vector<int>> res;
        vector<int> tmp;
        int index = 0;
        for (auto x : smalls) {
            if (x.empty()) {
                res.emplace_back(vector<int>());
                continue;
            }
            while ((index = big.find(x, index)) != string::npos) {
                tmp.emplace_back(index);
                index++;
            }
            res.emplace_back(tmp);
            tmp.clear();
            index = 0;
        }
        return res;
    }
};