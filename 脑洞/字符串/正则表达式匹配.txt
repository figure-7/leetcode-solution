题目难度：HARD

给你一个字符串?s?和一个字符规律?p，请你来实现一个支持 '.'?和?'*'?的正则表达式匹配。


'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖?整个?字符串?s的，而不是部分字符串。



说明:

s?可能为空，且只包含从?a-z?的小写字母。

p?可能为空，且只包含从?a-z?的小写字母，以及字符?.?和?*。


示例 1:

输入:
s = "aa"
p = "a"

输出: false

解释: "a" 无法匹配 "aa" 整个字符串。


示例 2:

输入:
s = "aa"
p = "a*"

输出: true

解释:?因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。
因此，字符串 "aa" 可被视为 'a' 重复了一次。


示例?3:

输入:
s = "ab"
p = ".*"

输出: true

解释:?".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。


示例 4:

输入:
s = "aab"
p = "c*a*b"

输出: true

解释:?因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。
因此可以匹配字符串 "aab"。


示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."

输出: false



思路：见代码，敲半天晕了XX

执行用时 :
288 ms
, 在所有 C++ 提交中击败了
32.68%
的用户
内存消耗 :
15.1 MB
, 在所有 C++ 提交中击败了
15.97%
的用户
（效率倒是不咋地，，，）

上代码：
class Solution {
public:
    bool isMatch(string s, string p) {
        //cnt++;
        //cout<<"cnt "<<cnt<<endl;
        //cout<<"s:"<<s[0]<<" p:"<<p[0]<<endl;
        if (p.empty()) return s.empty();    //判断是否为空

        bool first_match = !s.empty() && (s[0] == p[0] || p[0] == '.'); //比较s,p当前指向s[0],p[0];

        if (p.length() >= 2 && p[1] == '*') {   //特殊情况下的处理，这个是关键
            //对应特殊情况下的两个选择
            //return isMatch(s,p.substr(2))表示跳过*去匹配
            //return first_match && isMatch(s.substr(1),p)表示p借助*去匹配s中的重复元素
            //采用将s首元素不断右移的方法，递归处理
            //用||连接，起到很巧妙的作用
            return isMatch(s, p.substr(2)) || (first_match && isMatch(s.substr(1), p)); //调用次数问题
            //如果first_match已经为false，那么  &&后面的isMatch还会被继续调用么？
        } else {
            return first_match && isMatch(s.substr(1), p.substr(1));
        }
    }
};