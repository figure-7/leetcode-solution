题目难度：MEDIUM

在一个社交圈子当中，有 N 个人。每个人都有一个从 0 到 N-1 唯一的 id 编号。

我们有一份日志列表 logs，其中每条记录都包含一个非负整数的时间戳，以及分属两个人的不同 id，logs[i] = [timestamp, id_A, id_B]。

每条日志标识出两个人成为好友的时间，友谊是相互的：如果 A 和 B 是好友，那么 B 和 A 也是好友。

如果 A 是 B 的好友，或者 A 是 B 的好友的好友，那么就可以认为 A 也与 B 熟识。

返回圈子里所有人之间都熟识的最早时间。如果找不到最早时间，就返回 -1 。

 

示例：

输入：logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], N = 6
输出：20190301
解释：
第一次结交发生在 timestamp = 20190101，0 和 1 成为好友，社交朋友圈如下 [0,1], [2], [3], [4], [5]。
第二次结交发生在 timestamp = 20190104，3 和 4 成为好友，社交朋友圈如下 [0,1], [2], [3,4], [5].
第三次结交发生在 timestamp = 20190107，2 和 3 成为好友，社交朋友圈如下 [0,1], [2,3,4], [5].
第四次结交发生在 timestamp = 20190211，1 和 5 成为好友，社交朋友圈如下 [0,1,5], [2,3,4].
第五次结交发生在 timestamp = 20190224，2 和 4 已经是好友了。
第六次结交发生在 timestamp = 20190301，0 和 3 成为好友，大家都互相熟识了。
 

提示：

1 <= N <= 100
1 <= logs.length <= 10^4
0 <= logs[i][0] <= 10^9
0 <= logs[i][1], logs[i][2] <= N - 1
保证 logs[i][0] 中的所有时间戳都不同
Logs 不一定按某一标准排序
logs[i][1] != logs[i][2]

思路：设置结构体数组，分别保存人物1，人物2，相识时间。
然后对该数组针对时间排序，并设置一个新数组下标对应初值为他自己
遍历该数组的两个人，并调用函数对新数组对每组数据作比较，有新朋友就让两人下标对应新数组的值为其中最小的一个人，并返回true
没有新朋友就返回false
如果有新朋友（返回true）就--cnt（人物总数）
cnt==1就返回时间即可，此外就返回-1即可

上代码：
struct LogNode{
    int time;
    int A, B;
}logNode[10050];

inline bool cmp(const LogNode &a, const LogNode &b){
    return a.time<b.time;
}

class Solution {
public:
    int fa[550];
    
    int getFather(int x){
        return fa[x]=(fa[x]==x?x:getFather(fa[x]));
    }
    
    bool mergeFather(int x, int y){
        int fx=getFather(x), fy=getFather(y);
        if (fx==fy) return false;
        if (fx>fy) swap(fx, fy);
        fa[fx]=fy;
        return true;
    }
    
    int earliestAcq(vector<vector<int>>& logs, int N) {
        for (int i=0; i<N; i++) fa[i]=i;
        
        int n=logs.size();
        for (int i=0; i<n; i++){
            logNode[i].time=logs[i][0];
            logNode[i].A=logs[i][1];
            logNode[i].B=logs[i][2];
        }
        
        sort(logNode, logNode+n, cmp);
        
        int cnt=N;
        for (int i=0; i<n; i++){
            int A=logNode[i].A, B=logNode[i].B;
            if (mergeFather(A, B)) --cnt;
             printf("i:%d\n", cnt);
            if (cnt==1) return logNode[i].time;
        }
        
        return -1;
    }
};