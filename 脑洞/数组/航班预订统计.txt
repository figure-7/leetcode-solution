题目难度：MEDIUM

这里有 n 个航班，它们分别从 1 到 n 进行编号。

我们这儿有一份航班预订表，表中第 i 条预订记录 bookings[i] = [i, j, k] 意味着我们在从 i 到 j 的每个航班上预订了 k 个座位。

请你返回一个长度为 n 的数组 answer，按航班编号顺序返回每个航班上预订的座位数。

 

示例：

输入：bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5
输出：[10,55,45,25,25]
 

提示：

1 <= bookings.length <= 20000
1 <= bookings[i][0] <= bookings[i][1] <= n <= 20000
1 <= bookings[i][2] <= 10000

思路：
首先我要说的是，我做出来了，然后超时。时间O(N^2)，然后很好奇这题怎么可能O(N)时间算出来，不信！
先把每个下标对应第一个值和第二个值加一作为下标的新数组值加上对应第三个值，减去第三个值
得到的数组进行遍历，不断累加即可，（理解比较复杂加下面详细分解）

例如上面案例
输入：
[[1,2,10],[2,3,20],[2,5,25]]
5

运行：
第一次循环：
a[1] = 10
a[3] = -10
a[2] = 20
a[4] = -20
a[2] = 20+25 = 45
a[6] = -25
第二次循环：
sum[0] = 0 + 10 = 10
sum[1] = 10 + 45 = 55
sum[2] = 55 + -10 = 45
sum[3] = 45 + -20 = 25
sum[4] = 25 + 0 = 25
即可得到结果（10,55,45,25,25）（妈的真神奇！）

上代码：
class Solution {
public:
    vector<int> corpFlightBookings(vector<vector<int>>& bookings, int n) {       
        vector<int> a(n+2);
        for (int i = 0; i < bookings.size(); ++i) {
            int x = bookings[i][0];
            int y = bookings[i][1];
            int c = bookings[i][2];
            a[x] += c;
            a[y+1] -= c;
            printf("%d",a[x]);
        }
        vector<int> sum;
        int pre = 0;
        for (int i = 1; i <= n; ++i) {
            pre = pre + a[i];
            sum.push_back(pre);
        }
        return sum;
    }
};