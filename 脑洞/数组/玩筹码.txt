题目难度：EASY

数轴上放置了一些筹码，每个筹码的位置存在数组 chips 当中。

你可以对 任何筹码 执行下面两种操作之一（不限操作次数，0 次也可以）：

将第 i 个筹码向左或者右移动 2 个单位，代价为 0。
将第 i 个筹码向左或者右移动 1 个单位，代价为 1。
最开始的时候，同一位置上也可能放着两个或者更多的筹码。

返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。

 

示例 1：

输入：chips = [1,2,3]
输出：1
解释：第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。
示例 2：

输入：chips = [2,2,2,3,3]
输出：2
解释：第四和第五个筹码移动到位置二的代价都是 1，所以最小总代价为 2。
 

提示：

1 <= chips.length <= 100
1 <= chips[i] <= 10^9

思路：模拟
（这题真的读不懂）接下来上题解区题解：
解题思路：由于移动两个步长不需要代价，所以奇数与奇数、偶数与偶数之间的转化不需要代价，只需要把所有的奇数、偶数移动到相邻位置，再把较少的移到对面即可。

执行用时 :
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗 :
8.8 MB
, 在所有 C++ 提交中击败了
5.06%
的用户
（时间完杀！空间炸了）

上代码：
class Solution {
public:
    int minCostToMoveChips(vector<int>& chips) {
        vector<int> oddvec = {};
        vector<int> evevec = {};
        for(auto itm : chips){
            if(itm%2 == 0) evevec.push_back(itm);
               else oddvec.push_back(itm);
        }
          return min(evevec.size(), oddvec.size());
    }
};