题目难度：HARD

你有 4 张写有 1 到 9 数字的牌。

你需要判断是否能通过 *，/，+，-，(，) 的运算得到 24。

示例 1:

输入: [4, 1, 8, 7]
输出: True
解释: (8-4) * (7-1) = 24
示例 2:

输入: [1, 2, 1, 2]
输出: False
注意:

除法运算符 / 表示实数除法，而不是整数除法。
例如 4 / (1 - 2/3) = 12 。
每个运算符对两个数进行运算。
特别是我们不能用 - 作为一元运算符。
例如，[1, 1, 1, 1] 作为输入时，表达式 -1 - 1 - 1 - 1 是不允许的。
你不能将数字连接在一起。
例如，输入为 [1, 2, 1, 2] 时，不能写成 12 + 12 。

思路：模拟
(这题拿到手一点思路没有...)接下来上题解区题解：

不解释 利用引用最优化空间和时间

执行用时 :
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗 :
8.5 MB
, 在所有 C++ 提交中击败了
78.44%
的用户
（时间完杀，空间不错）

上代码：
class Solution {
public:
	bool judgePoint24(vector<int>& nums) {
		double a = nums[0], b = nums[1], c = nums[2], d = nums[3];
		return judgePoint24_4(a, b, c, d);
	}

	bool judgePoint24_1(double a) {
		return abs(a - 24) < 1e-6;
	}

	bool judgePoint24_2(double a, double& b) {
		return
			judgePoint24_1(a + b) ||
			judgePoint24_1(a - b) ||
			judgePoint24_1(b - a) ||
			judgePoint24_1(a * b) ||
			judgePoint24_1(a / b) ||
			judgePoint24_1(b / a);
	}

	bool judgePoint24_3(double a, double& b, double& c) {
		return
			judgePoint24_2(b + c, a) ||
			judgePoint24_2(b - c, a) ||
			judgePoint24_2(c - b, a) ||
			judgePoint24_2(b * c, a) ||
			judgePoint24_2(b / c, a) ||
			judgePoint24_2(c / b, a) ||
			judgePoint24_2(a + c, b) ||
			judgePoint24_2(a - c, b) ||
			judgePoint24_2(c - a, b) ||
			judgePoint24_2(a * c, b) ||
			judgePoint24_2(a / c, b) ||
			judgePoint24_2(c / a, b) ||
			judgePoint24_2(a + b, c) ||
			judgePoint24_2(a - b, c) ||
			judgePoint24_2(b - a, c) ||
			judgePoint24_2(a * b, c) ||
			judgePoint24_2(a / b, c) ||
			judgePoint24_2(b / a, c);
	}

	bool judgePoint24_4(double& a, double& b, double& c, double& d) {
		return
			judgePoint24_3(c + d, a, b) ||
			judgePoint24_3(c - d, a, b) ||
			judgePoint24_3(d - c, a, b) ||
			judgePoint24_3(d * c, a, b) ||
			judgePoint24_3(c / d, a, b) ||
			judgePoint24_3(d / c, a, b) ||
			judgePoint24_3(b + d, a, c) ||
			judgePoint24_3(b - d, a, c) ||
			judgePoint24_3(d - b, a, c) ||
			judgePoint24_3(b * d, a, c) ||
			judgePoint24_3(b / d, a, c) ||
			judgePoint24_3(d / b, a, c) ||
			judgePoint24_3(b + c, a, d) ||
			judgePoint24_3(b - c, a, d) ||
			judgePoint24_3(c - b, a, d) ||
			judgePoint24_3(b * c, a, d) ||
			judgePoint24_3(b / c, a, d) ||
			judgePoint24_3(c / b, a, d) ||
			judgePoint24_3(a + d, b, c) ||
			judgePoint24_3(a - d, b, c) ||
			judgePoint24_3(d - a, b, c) ||
			judgePoint24_3(a * d, b, c) ||
			judgePoint24_3(a / d, b, c) ||
			judgePoint24_3(d / a, b, c) ||
			judgePoint24_3(a + c, b, d) ||
			judgePoint24_3(a - c, b, d) ||
			judgePoint24_3(c - a, b, d) ||
			judgePoint24_3(a * c, b, d) ||
			judgePoint24_3(a / c, b, d) ||
			judgePoint24_3(c / a, b, d) ||
			judgePoint24_3(a + b, c, d) ||
			judgePoint24_3(a - b, c, d) ||
			judgePoint24_3(b - a, c, d) ||
			judgePoint24_3(a * b, c, d) ||
			judgePoint24_3(a / b, c, d) ||
			judgePoint24_3(b / a, c, d);
	}
};