题目难度：MEDIUM

假设按照升序排序的数组在预先未知的某个点上进行了旋转。


( 例如，数组?[0,1,2,4,5,6,7]?可能变为?[4,5,6,7,0,1,2]?)。


搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回?-1?。


你可以假设数组中不存在重复的元素。



你的算法时间复杂度必须是?O(log?n) 级别。



示例 1:

输入: nums = [4,5,6,7,0,1,2], target = 0

输出: 4


示例?2:

输入: nums = [4,5,6,7,0,1,2], target = 3

输出: -1


由于是时间O(log n),所以用二分法。
由于数组不是单调递增排序的而是旋转了一次，所以在二份的时候要对边界判断
先判断mid的值跟两边界值的大小判断，针对只单调增或单调减的区间在进行二分即可

执行用时 :
8 ms
, 在所有 C++ 提交中击败了
61.96%
的用户
内存消耗 :
8.5 MB
, 在所有 C++ 提交中击败了
98.54%
的用户

上代码：
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int first = 0, last = nums.size();
        while(first != last) {
            const int mid = (first + last) / 2;
            if(nums[mid] == target)
                return mid;
            if(nums[first] <= nums[mid]) {
                if(nums[first] <= target && target < nums[mid])
                    last = mid;
                else
                    first = mid + 1;
            }
            else {
                if(nums[mid] < target && target <= nums[last-1])
                    first = mid + 1;
                else
                    last = mid;
            }
        }
        return -1;
    }
};