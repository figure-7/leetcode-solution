题目难度：EASY

给定平面上 n 对不同的点，“回旋镖” 是由点表示的元组 (i, j, k) ，其中 i 和 j 之间的距离和 i 和 k 之间的距离相等（需要考虑元组的顺序）。

找到所有回旋镖的数量。
你可以假设 n 最大为 500，所有点的坐标在闭区间 [-10000, 10000] 中。

示例:

输入:
[[0,0],[1,0],[2,0]]

输出:
2

解释:
两个回旋镖为 [[1,0],[0,0],[2,0]] 和 [[1,0],[2,0],[0,0]]

思路：哈希表
（这是简单题？看半天没思路，我真傻）
接下来上题解区思路：
遍历每个节点开头的线段,用unordered_map记录每种长度的线段数量,每次增加一种长度的数量,若已经有等长线段,就增加2*(n-1)个回旋镖

执行用时 :
612 ms
, 在所有 C++ 提交中击败了
64.54%
的用户
内存消耗 :
86.4 MB
, 在所有 C++ 提交中击败了
89.64%
的用户
（时间一般，空间不错）

上代码：
class Solution {
public:
    int numberOfBoomerangs(vector<vector<int>>& points) {
        int num=0;
        int dis=0;
        unordered_map<int,int> n;
        for(int i=0;i<points.size();++i){
            n.clear();
            for(int j=0;j<points.size();++j){
                if(i!=j){
                    dis=pow(points[i][0]-points[j][0],2)+pow(points[i][1]-points[j][1],2);
                    n[dis]++;//同长度线段计数
                    if (n[dis]>1)
                        num+=2*(n[dis]-1);//一次加入等长线段,增加2*(n-1)个回旋镖
                }
            }
        }
        return num;
    }
};