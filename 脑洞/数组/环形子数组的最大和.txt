题目难度：MEDIUM

给定一个由整数数组 A 表示的环形数组 C，求 C 的非空子数组的最大可能和。

在此处，环形数组意味着数组的末端将会与开头相连呈环状。

（形式上，当0 <= i < A.length 时 C[i] = A[i]，而当 i >= 0 时 C[i+A.length] = C[i]）

此外，子数组最多只能包含固定缓冲区 A 中的每个元素一次。

（形式上，对于子数组 C[i], C[i+1], ..., C[j]，不存在 i <= k1, k2 <= j 其中 k1 % A.length = k2 % A.length）

 

示例 1：

输入：[1,-2,3,-2]
输出：3
解释：从子数组 [3] 得到最大和 3
示例 2：

输入：[5,-3,5]
输出：10
解释：从子数组 [5,5] 得到最大和 5 + 5 = 10
示例 3：

输入：[3,-1,2,-1]
输出：4
解释：从子数组 [2,-1,3] 得到最大和 2 + (-1) + 3 = 4
示例 4：

输入：[3,-2,2,-3]
输出：3
解释：从子数组 [3] 和 [3,-2,2] 都可以得到最大和 3
示例 5：

输入：[-2,-3,-1]
输出：-1
解释：从子数组 [-1] 得到最大和 -1
 

提示：

-30000 <= A[i] <= 30000
1 <= A.length <= 30000

思路：模拟
接下来上题解区题解：
最大 x 最小
表世界最大值 == 里世界最小值

执行用时 :
148 ms
, 在所有 C++ 提交中击败了
39.20%
的用户
内存消耗 :
37.9 MB
, 在所有 C++ 提交中击败了
50.00%
的用户
（时间不咋地，空间一般）

上代码：
class Solution {
public:
    int maxSubarraySumCircular(vector<int>& A) {
        int sum = 0;
        int smax = INT_MIN;
        bool flag = true;
        int s1 = 0;
        int s2 = 0;
        int ans1 = 0;
        int ans2 = 0;
        for (auto n : A) {
            sum += n;
            smax = max(smax, n);
            if (n > 0) flag = false;
            s1 = (s1 > 0) ? s1 + n : n;
            ans1 = max(ans1, s1);
            s2 = (s2 < 0) ? s2 + n : n;
            ans2 = min(ans2, s2);
        }
        if (flag) return smax;
        return max(ans1, sum - ans2);
    }
};