题目难度：HARD

给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字母的最小子串。

示例：

输入: S = "ADOBECODEBANC", T = "ABC"
输出: "BANC"
说明：

如果 S 中不存这样的子串，则返回空字符串 ""。
如果 S 中存在这样的子串，我们保证它是唯一的答案。

执行用时 :
44 ms
, 在所有 C++ 提交中击败了
49.61%
的用户
内存消耗 :
19.1 MB
, 在所有 C++ 提交中击败了
8.35%
的用户

思路：使用一个字符类型下标的数组，分别把T的每个字符作为下标对应值加一。
之后使用双指针，左指针值为0，之后依次加一做子串判断（这里效率较低）
在S中每次都把对应字符的数组值减一，然后判断对应下标的值是不是大于等于0，如果大于等于0了就说明T中的字符被找到了，并且记录找到的次数。
如果次数等于T的长度，那么就找到了子串。
之后判断长度，如果长度是最小的，利用substr调用双指针截取到子串保存即可。
然后左指针加一，继续循环判断，时间慢就是指针每次加一造成的

上代码：
class Solution {
public:
    string minWindow(string s, string t) {
    int count[256] = { 0 };
    for (auto c : t) ++count[c];
    int len = 0, minLength = s.length();
    string res;
    for (int l = 0, r = 0; r < s.length(); ++r) {
        count[s[r]]--;
        if (count[s[r]] >= 0) ++len;
        while (len == t.length()) {
            if (r - l + 1 <= minLength) {
                minLength = r - l + 1;
                res = s.substr(l, r - l + 1);
            }
            count[s[l]]++;
            if (count[s[l]] > 0) --len;
            ++l;
        }
    }
    return res;
}
};