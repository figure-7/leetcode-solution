题目难度：HARD

给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口 k 内的数字。滑动窗口每次只向右移动一位。

返回滑动窗口最大值。

示例:

输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7] 
解释: 

  滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
注意：

你可以假设 k 总是有效的，1 ≤ k ≤ 输入数组的大小，且输入数组不为空。

进阶：

你能在线性时间复杂度内解决此题吗？

思路：动态规划


直觉

这是另一个 {O}(N)O(N) 的算法。
本算法的优点是不需要使用 数组 / 列表 之外的任何数据结构。



算法的思想是将输入数组分割成有 k 个元素的块。 
若 n % k != 0，则最后一块的元素个数可能更少。




开头元素为 i ，结尾元素为 j 的当前滑动窗口可能在一个块内，也可能在两个块中。




情况 1 比较简单。 
建立数组 left， 其中 left[j] 是从块的开始到下标 j 最大的元素，方向 左->右。




为了处理更复杂的情况 2，我们需要数组 right，其中 right[j] 是从块的结尾到下标 j 最大的元素，方向 右->左。
right 数组和 left 除了方向不同以外基本一致。



两数组一起可以提供两个块内元素的全部信息。
考虑从下标 i 到下标 j的滑动窗口。 

根据定义，right[i] 是左侧块内的最大元素， left[j] 是右侧块内的最大元素。
因此滑动窗口中的最大元素为 max(right[i], left[j])。







算法十分直截了当：

从左到右遍历数组，建立数组 left。


从右到左遍历数组，建立数组 right。


建立输出数组 max(right[i], left[i + k - 1])，其中 i 取值范围为 (0, n - k + 1)。



执行用时 :
10 ms
, 在所有 Java 提交中击败了
88.99%
的用户
内存消耗 :
51.8 MB
, 在所有 Java 提交中击败了
14.94%
的用户

上代码（java版）：
class Solution {
  public int[] maxSlidingWindow(int[] nums, int k) {
    int n = nums.length;
    if (n * k == 0) return new int[0];
    if (k == 1) return nums;

    int [] left = new int[n];
    left[0] = nums[0];
    int [] right = new int[n];
    right[n - 1] = nums[n - 1];
    for (int i = 1; i < n; i++) {
      // from left to right
      if (i % k == 0) left[i] = nums[i];  // block_start
      else left[i] = Math.max(left[i - 1], nums[i]);

      // from right to left
      int j = n - i - 1;
      if ((j + 1) % k == 0) right[j] = nums[j];  // block_end
      else right[j] = Math.max(right[j + 1], nums[j]);
    }

    int [] output = new int[n - k + 1];
    for (int i = 0; i < n - k + 1; i++)
      output[i] = Math.max(left[i + k - 1], right[i]);

    return output;
  }
}