题目难度：HARD

给你一个整数数组 nums 。

「 数组值」定义为所有满足 0 <= i < nums.length-1 的 |nums[i]-nums[i+1]| 的和。

你可以选择给定数组的任意子数组，并将该子数组翻转。

但你只能执行这个操作 一次 。

请你找到可行的最大 数组值 。

 

示例 1：

输入：nums = [2,3,1,5,4]
输出：10
解释：通过翻转子数组 [3,1,5] ，数组变成 [2,5,1,3,4] ，数组值为 10 。
示例 2：

输入：nums = [2,4,9,24,2,1,10]
输出：68
 

提示：

1 <= nums.length <= 3*10^4
-10^5 <= nums[i] <= 10^5

思路：周赛第四题，模拟（10分曼哈顿！难）
nums[0...n - 1]
数组值由题可知
看一次翻转改变了什么
什么都不变的数组值 = sum
.....a | b......c | d.....反转之后.....a | c......b | d.....
sum - Abs(a - b) - Abs(a - d) + Abs(a - c) + Abs(b - d)
a = x0 b = y0
c = x1 d = y1
sum{-Abs(x0 - y0) - Abs(x1 - y1)} + {Abs(x0 - x1) + Abs(y0 - y1)}
转化为求曼哈顿距离最大值
Abs(x0 - x1) + Abs(y0 - y1) - Abs(x0 - y0) - Abs(x1 - y1) = max(|(x0 + y0) - (x1 + y1)|, |(x0 - y0) - (x1 - y1)|)
|(x0 + y0) - (x1 + y1)| = max((x0 + y0 - Abs(x0 - y0)) - (x1 + y1 + Abs(x1 - y1)), (-x0 - y0 - Abs(x0 - y0)) - (-x1 - y1 + Abs(x1 - y1)))
先用sum算出数组值，然后遍历从头开始和到结尾结束的反转情况（需额外判断）
之后套用上面曼哈顿公式
然后遍历算就可以了
最后返回结果即可

上代码：
class Solution {
public:
    int Abs(int x){
        if (x < 0) return -x;
        return x;
    }
    
    int maxValueAfterReverse(vector<int>& nums) {
        int n = nums.size();
        
        int sum = 0;
        for (int i = 0; i < n - 1; i++) sum += Abs(nums[i] - nums[i + 1]);
        
        int ans = sum;
        
        for (int i = 0; i < n - 1; i++){
            ans = max(ans, sum - Abs(nums[i] - nums[i + 1]) + Abs(nums[0] - nums[i + 1]));
            ans = max(ans, sum - Abs(nums[i] - nums[i + 1]) + Abs(nums[i] - nums[n - 1]));
        }
        
        for (int a = 0; a < 2; a++){
            for (int b = 0; b < 2; b++){
                vector<int> arrA, arrB;
                for (int i = 0; i < n - 1; i++){
                    int x = nums[i], y = nums[i + 1];
                    int cur = 0;
                    if (a == 0) cur -= x; else cur += x;
                    if (b == 0) cur -= y; else cur += y;
                    arrA.push_back(cur + Abs(x - y));
                    arrB.push_back(cur - Abs(x - y));
                }
                sort(arrA.begin(), arrA.end());
                sort(arrB.begin(), arrB.end());
                ans = max(ans, sum + arrB[n - 2] - arrA[0]);
            }
        }
        
        return ans;
    }
};