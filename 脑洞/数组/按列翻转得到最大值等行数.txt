题目难度：MEDIUM

给定由若干 0 和 1 组成的矩阵 matrix，从中选出任意数量的列并翻转其上的 每个 单元格。翻转后，单元格的值从 0 变成 1，或者从 1 变为 0 。

返回经过一些翻转后，行上所有值都相等的最大行数。

 

示例 1：

输入：[[0,1],[1,1]]
输出：1
解释：不进行翻转，有 1 行所有值都相等。
示例 2：

输入：[[0,1],[1,0]]
输出：2
解释：翻转第一列的值之后，这两行都由相等的值组成。
示例 3：

输入：[[0,0,0],[0,0,1],[1,1,0]]
输出：2
解释：翻转前两列的值之后，后两行由相等的值组成。
 

提示：

1 <= matrix.length <= 300
1 <= matrix[i].length <= 300
所有 matrix[i].length 都相等
matrix[i][j] 为 0 或 1

思路：说一下个人思路，先将数组保存到另一个数组中
先计算初始相同行数，然后针对每一行做变换（都变为相同的数）计算出相同行数个数，
取最大值即可，但是搞了半天结果也不对，不知道错在哪里（难受）
以下是把别人的算法，思路也跟上面差不多

上代码：
class Solution {
public:
    int maxEqualRowsAfterFlips(vector<vector<int>>& a) {
        int n = a.size();
        int m = a[0].size();
        map<vector<int>, int> F;
        for (int i = 0; i < n; ++ i)
        {
            if (a[i][0] == 1)
            {
                for (int j = 0; j < m; ++ j)
                    a[i][j] ^= 1;
            }
            F[a[i]] ++;
        }
        int ans = 0;
        for (auto p : F)
            ans = max(ans, p.second);
        return ans;
    }
};