题目难度：MEDIUM


在 R 行 C 列的矩阵上，我们从 (r0, c0) 面朝东面开始

这里，网格的西北角位于第一行第一列，网格的东南角位于最后一行最后一列。

现在，我们以顺时针按螺旋状行走，访问此网格中的每个位置。

每当我们移动到网格的边界之外时，我们会继续在网格之外行走（但稍后可能会返回到网格边界）。

最终，我们到过网格的所有 R * C 个空间。

按照访问顺序返回表示网格位置的坐标列表。

 

示例 1：

输入：R = 1, C = 4, r0 = 0, c0 = 0
输出：[[0,0],[0,1],[0,2],[0,3]]


 

示例 2：

输入：R = 5, C = 6, r0 = 1, c0 = 4
输出：[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]


 

提示：

1 <= R <= 100
1 <= C <= 100
0 <= r0 < R
0 <= c0 < C

思路：模拟
接下来上题解区题解;
我们一步一个脚印走，步长规律1,1,2,2,3,3,4,4....其中东和南的步长相同，西和北的步长相同，只要逐一判断是否在规定区域内就行了~

执行用时 :
32 ms
, 在所有 C++ 提交中击败了
43.20%
的用户
内存消耗 :
12.3 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时间一般，空间完杀！）

上代码：
class Solution {
public:
    vector<vector<int>> spiralMatrixIII(int R, int C, int r0, int c0) {
        /*已经过的个数*/
        int num = 1;
        
        vector<vector<int>> p;
        vector<int> temp(2);
        temp[0] = r0;
        temp[1] = c0;
        p.push_back(temp);
        
        /*移动步长*/
        int step = 1;
        
        while(num < R * C)
        {
            /*朝东走*/
            int n = 1;
            while(n <= step)
            {
                c0++;
                if(Judge(r0, c0, R, C))
                {
                    temp[0] = r0;
                    temp[1] = c0;
                    p.push_back(temp);
                    num++;
                }
                n++;
            }
        
            /*朝南走*/
            n = 1;
            while(n <= step)
            {
                r0++;
                if(Judge(r0, c0, R, C))
                {
                    temp[0] = r0;
                    temp[1] = c0;
                    p.push_back(temp);
                    num++;
                }
                n++;
            }
        
            /*步长加1*/
            step++;
        
            /*朝西走*/
            n = 1;
            while(n <= step)
            {
                c0--;
                if(Judge(r0, c0, R, C))
                {
                    temp[0] = r0;
                    temp[1] = c0;
                    p.push_back(temp);
                    num++;
                }
                n++;
            }
        
            /*朝北走*/
            n = 1;
            while(n <= step)
            {
                r0--;
                if(Judge(r0, c0, R, C))
                {
                    temp[0] = r0;
                    temp[1] = c0;
                    p.push_back(temp);
                    num++;
                }
                n++;
            }
        
            /*步长加1*/
            step++;
        }
        return p;
    }
    
    /*判断是否在规定区域内*/
    bool Judge(int x, int y, int r, int c)
    {
        return x >= 0 && y >= 0 && x < r && y < c ? true : false;
    }
};