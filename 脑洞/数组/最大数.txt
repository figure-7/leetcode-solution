题目难度：MEDIUM

给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。

示例 1:

输入: [10,2]
输出: 210
示例 2:

输入: [3,30,34,5,9]
输出: 9534330
说明: 输出结果可能非常大，所以你需要返回一个字符串而不是整数。

思路：重写排序方法
接下来上题解区题解：
将输入的数组按照某个顺序排序，然后按顺序组合就是最大数。

这个顺序的目的是实现组合后较大的数字在前面。

所以排序的比较算法应该是对组合后的数字进行比较。

通过计算进行比较的两个数字的位数，交叉相乘再相加（a * b的位数 + b），实现将两个数字组合到一起

执行用时 :
20 ms
, 在所有 C++ 提交中击败了
34.61%
的用户
内存消耗 :
9.4 MB
, 在所有 C++ 提交中击败了
15.28%
的用户
（都不咋地。。。）

上代码：
class Solution {
public:
    string largestNumber(vector<int>& nums)
    {
        sort(nums.rbegin(), nums.rend(), [](const int& a, const int& b)
        {
            string sa = to_string(a);
            string sb = to_string(b);
            return sa + sb < sb + sa;
        });

        string ans;
        for (auto n : nums)
        {
            ans = (ans == "0") ? to_string(n) : ans + to_string(n);
        }
        return ans;
    }
};