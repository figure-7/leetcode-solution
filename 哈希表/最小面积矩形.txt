题目难度：MEDIUM

给定在 xy 平面上的一组点，确定由这些点组成的矩形的最小面积，其中矩形的边平行于 x 轴和 y 轴。

如果没有任何矩形，就返回 0。

 

示例 1：

输入：[[1,1],[1,3],[3,1],[3,3],[2,2]]
输出：4
示例 2：

输入：[[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
输出：2
 

提示：

1 <= points.length <= 500
0 <= points[i][0] <= 40000
0 <= points[i][1] <= 40000
所有的点都是不同的。

思路：哈希表
接下来上题解区题解：
C++ （行／列）哈希解法

执行用时 :
876 ms
, 在所有 C++ 提交中击败了
30.73%
的用户
内存消耗 :
18.9 MB
, 在所有 C++ 提交中击败了
50.00%
的用户
（时间不咋地，空间一般）

上代码：
class Solution {
public:
    int minAreaRect(vector<vector<int>>& points) {
        map<int, set<int> > m;
        for (auto& p : points) {
            m[p[0]].insert(p[1]);
        }
        vector<int> rows;
        for (auto& p : m) rows.push_back(p.first);
        int res = INT_MAX;
        for (int i = 1; i < rows.size(); ++i) {
            auto& s1 = m[rows[i]];
            for (int j = 0; j < i; ++j) {
                auto& s2 = m[rows[j]];
                auto it1 = s1.begin();
                auto it2 = s2.begin();
                int dr = rows[i] - rows[j];
                int dc = INT_MAX;
                int prev = -1;
                while (it1 != s1.end() && it2 != s2.end()) {
                    if (*it1 == *it2) {
                        if (prev != -1) {
                            dc = min(dc, *it1 - prev);
                        }
                        prev = *it1;
                        ++it1;
                        ++it2;
                    } else if (*it1 < *it2) {
                        ++it1;
                    } else {
                        ++it2;
                    }
                }
                if (dc != INT_MAX) {
                    res = min(res, dr * dc);
                }
            }
        }
        return res == INT_MAX ? 0 : res;
    }
};