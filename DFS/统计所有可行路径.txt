题目难度：HARD

给你一个 互不相同 的整数数组，其中 locations[i] 表示第 i 个城市的位置。
同时给你 start，finish 和 fuel 分别表示出发城市、目的地城市和你初始拥有的汽油总量
每一步中，如果你在城市 i ，你可以选择任意一个城市 j ，满足  j != i 且 0 <= j < locations.length ，并移动到城市 j 。
从城市 i 移动到 j 消耗的汽油量为 |locations[i] - locations[j]|，|x| 表示 x 的绝对值。
请注意， fuel 任何时刻都 不能 为负，且你 可以 经过任意城市超过一次（包括 start 和 finish ）。
请你返回从 start 到 finish 所有可能路径的数目。
由于答案可能很大， 请将它对 10^9 + 7 取余后返回。
示例 1：
输入：locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5
输出：4
解释：以下为所有可能路径，每一条都用了 5 单位的汽油：
1 -> 3
1 -> 2 -> 3
1 -> 4 -> 3
1 -> 4 -> 2 -> 3
示例 2：
输入：locations = [4,3,1], start = 1, finish = 0, fuel = 6
输出：5
解释：以下为所有可能的路径：
1 -> 0，使用汽油量为 fuel = 1
1 -> 2 -> 0，使用汽油量为 fuel = 5
1 -> 2 -> 1 -> 0，使用汽油量为 fuel = 5
1 -> 0 -> 1 -> 0，使用汽油量为 fuel = 3
1 -> 0 -> 1 -> 0 -> 1 -> 0，使用汽油量为 fuel = 5
示例 3：
输入：locations = [5,2,1], start = 0, finish = 2, fuel = 3
输出：0
解释：没有办法只用 3 单位的汽油从 0 到达 2 。
因为最短路径需要 4 单位的汽油。
示例 4 ：
输入：locations = [2,1,5], start = 0, finish = 0, fuel = 3
输出：2
解释：总共有两条可行路径，0 和 0 -> 1 -> 0 。
示例 5：
输入：locations = [1,2,3], start = 0, finish = 2, fuel = 40
输出：615088286
解释：路径总数为 2615088300 。
将结果对 10^9 + 7 取余，得到 615088286 。
提示：
2 <= locations.length <= 100
1 <= locations[i] <= 10^9
所有 locations 中的整数 互不相同 。
0 <= start, finish < locations.length
1 <= fuel <= 200

思路：DFS
接下来上题解区题解：
我们知道，如果要实现 DFS 的话，通常有以下几个步骤：
设计好递归函数的「入参」和「出参」
设置好递归函数的出口（Base Case）
编写「最小单元」处理逻辑
对于大多数的 DFS 来说，第 1 步和第 3 步都很好实现，而找 Base Case 通常是三部曲中最难的。
以本题为例，我们来剖析一下该如何找 Base Case。
首先要明确，所谓的找 Base Case，其实是在确定什么样的情况下，算一次有效/无效。
对于本题，找 Base Case 其实就是在确定：什么样的情况下，算是 0 条路径；什么样的情况下，算是 1 条路径。
然后再在 DFS 过程中，不断的累加有效情况（算作路径数量为 1）的个数作为答案。
这是 DFS 的本质，也是找 Base Case 的思考过程。
回到本题，对于 有效情况 的确立，十分简单直接，如果我们当前所在的位置 ii 就是目的地 finishfinish 的话，那就算成是一条有效路径，我们可以对路径数量进行 +1。
那么如何确立无效情况呢？
一个直观的感觉是当油量消耗完，所在位置又不在 finishfinish，那么就算走到头了，算是一次「无效情况」，可以终止递归。
逻辑上这没有错，但是存在油量始终无法为零的情况。
考虑以下样例数据：
locations = [0,2,2,2], 
start = 0, 
finish = 3, 
fuel = 1
我们当前位置在 0，想要到达 3，但是油量为 1，无法移动到任何位置。
也就是如果我们只考虑 fuel = 0fuel=0 作为 Base Case 的话，递归可能无法终止。
因此还要增加一个限制条件：油量不为 0，但无法再移动到任何位置，也算是一次「无效情况」，可以终止递归。
到这里，我们已经走完「DFS 的三部曲」了，然后由于本题的数据范围超过了 30，我们需要为 DFS 添加「记忆化搜索」。
缓存器的设计也十分简单，使用二维数组 cache[][]cache[][] 进行记录即可。
我们用 cache[i][fuel]cache[i][fuel] 代表从位置 ii 出发，当前剩余的油量为 fuelfuel 的前提下，到达目标位置的「路径数量」。
之所以能采取「缓存中间结果」这样的做法，是因为「在 ii 和 fuelfuel 确定的情况下，其到达目的地的路径数量是唯一确定的」。

执行用时：
176 ms
, 在所有 C++ 提交中击败了
44.03%
的用户
内存消耗：
11.6 MB
, 在所有 C++ 提交中击败了
54.95%
的用户
（时空都一般）

上代码：
class Solution {
private:
    static constexpr int mod = 1000000007;
    vector<vector<int>> f;
    
public:
    int dfs(const vector<int>& locations, int pos, int finish, int rest) {
        if (f[pos][rest] != -1) {
            return f[pos][rest];
        }
        
        f[pos][rest] = 0;
        if (abs(locations[pos] - locations[finish]) > rest) {
            return 0;
        }
        
        int n = locations.size();
        for (int i = 0; i < n; ++i) {
            if (pos != i) {
                if (int cost = abs(locations[pos] - locations[i]); cost <= rest) {
                    f[pos][rest] += dfs(locations, i, finish, rest - cost);
                    f[pos][rest] %= mod;
                }
            }
        }
        if (pos == finish) {
            f[pos][rest] += 1;
            f[pos][rest] %= mod;
        }
        return f[pos][rest];
    }
    
    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {
        f.assign(locations.size(), vector<int>(fuel + 1, -1));
        return dfs(locations, start, finish, fuel);
    }
};