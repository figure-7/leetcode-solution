题目难度：HARD

我们有一组排序的数字 D，它是  {'1','2','3','4','5','6','7','8','9'} 的非空子集。

（请注意，'0' 不包括在内。）

现在，我们用这些数字进行组合写数字，想用多少次就用多少次。

例如 D = {'1','3','5'}，我们可以写出像 '13', '551', '1351315' 这样的数字。

返回可以用 D 中的数字写出的小于或等于 N 的正整数的数目。

 

示例 1：

输入：D = ["1","3","5","7"], N = 100
输出：20
解释：
可写出的 20 个数字是：
1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.
示例 2：

输入：D = ["1","4","9"], N = 1000000000
输出：29523
解释：
我们可以写 3 个一位数字，9 个两位数字，27 个三位数字，
81 个四位数字，243 个五位数字，729 个六位数字，
2187 个七位数字，6561 个八位数字和 19683 个九位数字。
总共，可以使用D中的数字写出 29523 个整数。
 

提示：

D 是按排序顺序的数字 '1'-'9' 的子集。
1 <= N <= 10^9

思路：DFS
接下来上题解区题解：
先算出比N的位数少的
再计算和N.length相同的，可分为三种情况
举例
D=["1","2","3","4","7","8","9"]
N=32901345

看第一位 3
D中有3,2,1可以取
先计算第一位为2或1时
再计算第一位为3时，这时需要看下一位（若D中不存在与3相等的，则直接返回即可，不需要再看下一位了）
重复上面
直到第四位
D中没有比0小的，结束，因为第四位取不到0，因此第三位不能取9，所以第三位取9的答案为0

执行用时 :
0 ms
, 在所有 C++ 提交中击败了
100.00%
的用户
内存消耗 :
8.3 MB
, 在所有 C++ 提交中击败了
100.00%
的用户
（时空都完杀！！！！！！）

上代码：
class Solution {
public:
    int res=0,f=0;
    int jisuan(int m,int n){
        if(m==0) return 0;
        int sum=0,x=1;
        while(m){
            x=x*n;
           sum+=x;
           m--; 
        }
        return sum;
    }
    int dfs(vector<string>& D,string s,int pos){
        if(pos==s.size()) return 1;//递归到了最后，表示每一位都是确定的，这也是一个答案，和N相等，所以返回1
        int i;
        for(i=D.size()-1;i>=0;i--){
            if(s[pos]>=D[i][0]){
                break;//找到D中大于等于当前位的
            }
        }
        if(i>=0){
            if(s[pos]>D[i][0]) return (i+1)*pow(D.size(),s.size()-pos-1);//不存在和当前位相等的，则不需要继续往下，后面的位取D中所有的数
            else if(s[pos]==D[i][0]) return i*pow(D.size(),s.size()-pos-1)+dfs(D,s,pos+1);//存在和当前位相等的，先计算D中有几个比当前位小的，计算出符合条件的数，再需要继续往下
        }
        return 0;//D中的数都比当前位大，则不需要再往下
    }
    int atMostNGivenDigitSet(vector<string>& D, int N) {
        string s=to_string(N);
        res+=jisuan(s.size()-1,D.size());
        res+=dfs(D,s,0);        
        return res;
    }
};