题目难度：HARD

给你一个整数数组 nums 以及两个整数 lower 和 upper 。
求数组中，值位于范围 [lower, upper] （包含 lower 和 upper）之内的 区间和的个数 。
区间和 S(i, j) 表示在 nums 中，位置从 i 到 j 的元素之和，包含 i 和 j (i ≤ j)。
示例 1：
输入：nums = [-2,5,-1], lower = -2, upper = 2
输出：3
解释：存在三个区间：[0,0]、[2,2] 和 [0,2] ，对应的区间和分别是：-2 、-1 、2 。
示例 2：
输入：nums = [0], lower = 0, upper = 0
输出：1
提示：
1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
-105 <= lower <= upper <= 105
题目数据保证答案是一个 32 位 的整数

思路：DFS
接下来上题解区题解：
设前缀和数组为 preSum，则问题等价于求所有的下标对 (i,j)，满足
preSum[j]−preSum[i]∈[lower,upper]
我们先考虑如下的问题：
给定两个升序排列的数组 n 
1
 ,n 
2
 ，试找出所有的下标对 (i,j)，满足
n 
2
 [j]−n 
1
 [i]∈[lower,upper]

在已知两个数组均为升序的情况下，这一问题是相对简单的：我们在 n_2n 
2
  中维护两个指针 l,r。起初，它们都指向 n 
2
  的起始位置。
随后，我们考察 n 
1
  的第一个元素。
  首先，不断地将指针 l 向右移动，直到 n 
2
 [l]≥n 
1
 [0]+lower 为止，此时， l 及其右边的元素均大于或等于 n 
1
 [0]+lower；
 随后，再不断地将指针 r 向右移动，直到 n 
2
 [r]>n 
1
 [0]+upper 为止，则 r 左边的元素均小于或等于 n 
1
 [0]+upper。
 故区间 [l,r) 中的所有下标 j，都满足
n 
2
 [j]−n 
1
 [0]∈[lower,upper]
接下来，我们考察 n 
1
  的第二个元素。
  由于 n 
1
  是递增的，不难发现 l,r 只可能向右移动。
  因此，我们不断地进行上述过程，并对于 n 
1
  中的每一个下标，都记录相应的区间 [l,r) 的大小。
  最终，我们就统计得到了满足条件的下标对 (i,j) 的数量。
在解决这一问题后，原问题就迎刃而解了：
我们采用归并排序的方式，能够得到左右两个数组排序后的形式，以及对应的下标对数量。
对于原数组而言，若要找出全部的下标对数量，只需要再额外找出左端点在左侧数组，同时右端点在右侧数组的下标对数量，而这正是我们此前讨论的问题。

执行用时：
596 ms
, 在所有 C++ 提交中击败了
43.02%
的用户
内存消耗：
207.9 MB
, 在所有 C++ 提交中击败了
31.93%
的用户
（时空都不咋地）

上代码：
class Solution {
public:
    int countRangeSumRecursive(vector<long>& sum, int lower, int upper, int left, int right) {
        if (left == right) {
            return 0;
        } else {
            int mid = (left + right) / 2;
            int n1 = countRangeSumRecursive(sum, lower, upper, left, mid);
            int n2 = countRangeSumRecursive(sum, lower, upper, mid + 1, right);
            int ret = n1 + n2;

            // 首先统计下标对的数量
            int i = left;
            int l = mid + 1;
            int r = mid + 1;
            while (i <= mid) {
                while (l <= right && sum[l] - sum[i] < lower) l++;
                while (r <= right && sum[r] - sum[i] <= upper) r++;
                ret += (r - l);
                i++;
            }

            // 随后合并两个排序数组
            vector<long> sorted(right - left + 1);
            int p1 = left, p2 = mid + 1;
            int p = 0;
            while (p1 <= mid || p2 <= right) {
                if (p1 > mid) {
                    sorted[p++] = sum[p2++];
                } else if (p2 > right) {
                    sorted[p++] = sum[p1++];
                } else {
                    if (sum[p1] < sum[p2]) {
                        sorted[p++] = sum[p1++];
                    } else {
                        sorted[p++] = sum[p2++];
                    }
                }
            }
            for (int i = 0; i < sorted.size(); i++) {
                sum[left + i] = sorted[i];
            }
            return ret;
        }
    }

    int countRangeSum(vector<int>& nums, int lower, int upper) {
        long s = 0;
        vector<long> sum{0};
        for(auto& v: nums) {
            s += v;
            sum.push_back(s);
        }
        return countRangeSumRecursive(sum, lower, upper, 0, sum.size() - 1);
    }
};
