题目难度：HARD

n?皇后问题研究的是如何将 n?个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。




上图为 8 皇后问题的一种解法。


给定一个整数 n，返回所有不同的?n?皇后问题的解决方案。


每一种解法包含一个明确的?n 皇后问题的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。



示例:

输入: 4

输出: [
 [".Q..",  "...Q",
  "Q...",
  "..Q."],

  // 解法 1

["..Q.",  "Q...",
  "...Q",
  ".Q.."]
]
// 解法 2

解释: 4 皇后问题存在两个不同的解法。

思路：比较经典的一道深搜，略麻烦
之前按照思路：遍历二维数组，根据第一行取'Q'的位置，判断接下来的行那些地方不能够取'Q'
然后后面遍历时候就根据之前的到的看能不能作为'Q'（用二维布尔数组）
每次取到'Q'就进行字符串合成（该位置为'Q'，剩余位置为'.'，累加）
把每一层的字符串放入一维数组里，用回溯的套路继续遍历
当有不符合条件（该行任何位置都不能是'Q'，就直接结束该种操作，即剪枝，开始下一种情况的判断）
直到遍历到了最后一层，判断长度为N就把一维数组放入结果二维数组里即可
然后莫名一直空间溢出，不知道怎么了，看了题解基本跟上述思路一致
区别：用到一个一维数组保存对应下标行皇后的列编号（即DFS里记录皇后的位置）
然后租后符合条件时再进行字符串构造，根据上面的数组一行一行构造，最后放入结果数组里
剩下的思路都一样。。。无缘AC了啊

执行用时 :
12 ms
, 在所有 cpp 提交中击败了
75.32%
的用户
内存消耗 :
10.8 MB
, 在所有 cpp 提交中击败了
41.42%
的用户

上代码：
class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        this->columns = vector<int>(n, 0);
        this->main_diag = vector<int>(2 * n, 0);
        this->anti_diag = vector<int>(2 * n, 0);
        
        vector<vector<string> > result;
        vector<int> C(n, 0);  //C[i]代表第i行皇后所在的列编号
        dfs(C, result, 0);
        return result;
    }
private:
    //这三个变量用于剪枝
    vector<int> columns;   //表示已经放置皇后占据了哪些列
    vector<int> main_diag; //占据了哪些主对角线
    vector<int> anti_diag; //占据了哪些副对角线
    
    void dfs(vector<int> &C, vector<vector<string> > &result, int row) {
        const int N = C.size();
        if(row == N) {      //终止状态，也是收敛条件，意味着找到了一个可行解
            vector<string> solution;
            for(int i = 0; i < N; ++i) {
                string s(N, '.');
                for(int j = 0; j < N; ++j)
                    if(j == C[i]) s[j] = 'Q';
                solution.push_back(s);
            }
            result.push_back(solution);
            return;
        }
        
        for(int j = 0; j < N; ++j) {    //扩展状态。一列一列的试
            const bool ok = columns[j] == 0 && main_diag[row + j] == 0 && anti_diag[row - j + N] == 0;
            if(!ok) continue;           //剪枝，如果合法，继续递归
            //执行扩展动作
            C[row] = j;
            columns[j] = main_diag[row + j] = anti_diag[row - j + N] = 1;
            dfs(C, result, row+1);
            //撤销动作
            //C[row] = 0;
            columns[j] = main_diag[row + j] = anti_diag[row - j + N] = 0;
        }
    } 
};