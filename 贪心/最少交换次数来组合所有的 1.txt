题目难度：MEDIUM

给出一个二进制数组 data，你需要通过交换位置，将数组中 任何位置 上的 1 组合到一起，并返回所有可能中所需 最少的交换次数。

 

示例 1：

输入：[1,0,1,0,1]
输出：1
解释： 
有三种可能的方法可以把所有的 1 组合在一起：
[1,1,1,0,0]，交换 1 次；
[0,1,1,1,0]，交换 2 次；
[0,0,1,1,1]，交换 1 次。
所以最少的交换次数为 1。
示例 2：

输入：[0,0,0,1,0]
输出：0
解释： 
由于数组中只有一个 1，所以不需要交换。
示例 3：

输入：[1,0,1,0,1,0,0,1,1,0,1]
输出：3
解释：
交换 3 次，一种可行的只用 3 次交换的解决方案是 [0,0,0,0,0,1,1,1,1,1,1]。
 

提示：

1 <= data.length <= 10^5
0 <= data[i] <= 1

思路：贪心，先算1个数，然后1的个数即是最大移动次数，再遍历数组对每相邻1的个数个求和即可
滑动窗口，取最大值（即需要补最少的0），之后去差值即可。没想到啊~

上代码：
class Solution {
public:
    int minSwaps(vector<int>& data) {
        int numsOne = 0;
        for(int i = 0; i < data.size(); i++){
            numsOne += data[i];
        }
        
        int res = 0, maxLen = 0;
        int tmpOne = 0;
        for(int i = 0; i < numsOne; i++){
            tmpOne += data[i];
        }
        for(int i = numsOne; i < data.size(); i++){
            if(tmpOne > maxLen)
                maxLen = tmpOne;
            
            tmpOne -= data[i - numsOne];
            tmpOne += data[i];
            
            //cout << "1111tmpOne = " << tmpOne << endl;
        }
        
        //cout << "numsOne = " << numsOne << "  maxLen = " << maxLen << endl;
        return numsOne - maxLen;
    }
};