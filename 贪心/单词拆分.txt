题目难度：MEDIUM

给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定?s 是否可以被空格拆分为一个或多个在字典中出现的单词。



说明：

拆分时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。



示例 1：


输入: s = "leetcode", wordDict = ["leet", "code"]

输出: true

解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"。



示例 2：


输入: s = "applepenapple", wordDict = ["apple", "pen"]

输出: true

解释: 返回 true 因为 "applepenapple" 可以被拆分成 "apple pen apple"。
?    
注意你可以重复使用字典中的单词。


示例 3：


输入: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]

输出: false



思路：
判断dp【i】表示长度为i的字符串能否被划分，挨个长度从前向后判断
先赋值dp【0】为true，之后如果是遇到前面是true的并且其下标开始到指定位置是子串就置为true
最后返回dp【s.size()】即可
dp表达式为：dp【i】 = dp【j】 && s【j,i) in dict, 0<= j < i

执行用时 :
20 ms
, 在所有C++提交中击败了
72.51%
的用户
内存消耗 :
14.4 MB
, 在所有C++提交中击败了
30.05%
的用户

上代码：
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        vector<bool> dp(s.size()+1, false);
        unordered_set<string> m(wordDict.begin(), wordDict.end());
	//放入表中便于查找
        dp[0] = true;
        for (int i = 1; i <= s.size(); ++i) {
            for (int j = 0; j < i; ++j) {
                if (dp[j] && m.find(s.substr(j, i-j)) != m.end()) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.size()];
    }
};