题目难度：HARD

老师想给孩子们分发糖果，有 N?个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。



你需要按照以下要求，帮助老师给这些孩子分发糖果：

每个孩子至少分配到 1 个糖果。


相邻的孩子中，评分高的孩子必须获得更多的糖果。
那么这样下来，老师至少需要准备多少颗糖果呢？

示例?1:


输入: [1,0,2]

输出: 5

解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。


示例?2:


输入: [1,2,2]

输出: 4

解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。
     第三个孩子只得到 1 颗糖果，这已满足上述两个条件



思路：贪心，先给每个人一颗糖，
	然后从左到右，如果i的分数大于i-1，就给i加一颗糖，
	再从后到前遍历，若i的分数大于i+1，就给i加一颗糖，
	返回糖数总和即可

执行用时 :
48 ms
, 在所有C++提交中击败了
37.01%
的用户
内存消耗 :
10.8 MB
, 在所有C++提交中击败了
16.41%
的用户

上代码：
class Solution {
public:
    int candy(vector<int>& ratings) {
        vector<int> candys;
        //首先每人发一颗糖
        candys.resize(ratings.size(), 1);
        //这个循环保证了右边高级别的孩子一定比左边的孩子糖果数多
        for(int i = 1; i < ratings.size(); i++) {
            if(ratings[i] >ratings[i - 1]) {
                candys[i] = candys[i - 1] + 1;
            }
        }
        //这个循环保证了左边高级别的孩子一定比右边的孩子糖果数多
        for(int i = ratings.size() - 2; i >= 0; i--) {
            if(ratings[i] > ratings[i + 1] && candys[i] <= candys[i + 1]) {
                candys[i] = candys[i + 1] + 1;
            }
        }
        int n = 0;
        for(int i = 0; i < candys.size(); i++) {
            n += candys[i];
        }
        return n;
    }
};